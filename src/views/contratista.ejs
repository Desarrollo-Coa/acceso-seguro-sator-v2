<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Solicitud de Contratistas</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            'ga-gold': '#CC9000',
            'ga-navy': '#011C3D',
            'ga-cream': '#FDF1E6',
            'ga-light': '#FBFBF0',
            'ga-white': '#FDFDFD'
          }
        }
      }
    }

    
  </script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="/css/contratista.css">
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
  <meta name="user-id" content="<%= userId %>"> <!-- Agregar esta línea -->
  <meta name="contratista-user-id" content="<%= userId %>"> <!-- Agregar esta línea -->
  <style>
        .active {
        background-color: #CC9000; 
        color: #FDFDFD; 
        font-weight: bold;
    }
    .btn-primary {
      background-color: #CC9000;
      color: #FDFDFD;
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      transition: background-color 0.2s;
    }
    .btn-primary:hover {
      background-color: #011C3D;
    }
    .btn-secondary {
      background-color: #011C3D;
      color: #FDFDFD;
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      transition: background-color 0.2s;
    }
    .btn-secondary:hover {
      background-color: #CC9000;
    }
    .input-primary {
      border: 1px solid #FDF1E6;
      border-radius: 0.375rem;
      padding: 0.5rem;
    }
    .input-primary:focus {
      border-color: #CC9000;
      outline: none;
      box-shadow: 0 0 0 2px rgba(204, 144, 0, 0.2);
    }
    .card-hover {
      transition: all 0.2s;
    }
    .card-hover:hover {
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      border-color: #CC9000;
    }

    nav{
      background-color: #CC9000;
    }

    .form-select {
      display: block;
      width: 100%;
      padding: .375rem .75rem;
      font-size: 1rem;
      font-weight: 400;
      line-height: 1.5;
      color: #212529;
      background-color: #fff;
      background-clip: padding-box;
      border: 1px solid #ced4da;
      border-radius: .25rem;
      transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }
    
    #modalDisabledCollaborators {
      z-index: 1050;
    }
    
    #historialColaboradorModal {
      z-index: 1060;
    }
    
    .badge-success {
      background-color: #28a745;
      color: white;
    }
    
    .badge-danger {
      background-color: #dc3545;
      color: white;
    }
    
    .badge {
      display: inline-block;
      padding: .25em .4em;
      font-size: 75%;
      font-weight: 700;
      line-height: 1;
      text-align: center;
      white-space: nowrap;
      vertical-align: baseline;
      border-radius: .25rem;
    }
    
    .status-icon-sent {
      color: #d1d1d1;
    }
    
    .status-icon-delivered {
      color: #d1d1d1;
    }
    
    .status-icon-read {
      color: #53bdeb;
    }
    
    .status-icon-error {
      color: #f44336;
    }
    
    .chat-message {
      position: relative;
    }
    
  </style>
<script>
  window.contratistaUserId = "<%= userId %>";
  console.log('✅ ID de usuario contratista inicializado:', window.contratistaUserId);
</script>
</head>
<body class="font-sans bg-ga-light">
  <!-- Barra de navegación -->
  <nav class="flex justify-between items-center   text-ga-white p-4">
    <a class="text-lg font-semibold" href="#">Vista Contratista ST</a>
    <a class="text-lg hover:text-ga-gold transition-colors duration-200" href="/logout">Cerrar sesión</a>
  </nav>

  <!-- Contenedor principal -->
  <div class="min-h-screen flex flex-col md:flex-row bg-ga-cream" id="contentMayor">
    <!-- Formulario -->
    <div class="flex-1 bg-ga-white p-6 md:w-1/2 overflow-auto shadow-lg" id="contratistaFormulario">
      <h1 class="text-center text-2xl font-bold mb-6 text-ga-navy">Solicitud de Ingreso</h1>
      <form id="formulario" method="POST" enctype="multipart/form-data" class="space-y-6">
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
          <div>
            <label for="empresa" class="block text-sm font-semibold text-gray-700">Empresa</label>
            <input type="text" name="empresa" id="empresa" class="mt-1 p-2 border border-gray-300 rounded-md w-full" value="<%= empresa %>" required readonly>
          </div>
          <div>
            <label for="nit" class="block text-sm font-semibold text-gray-700">NIT</label>
            <input type="text" name="nit" id="nit" class="mt-1 p-2 border border-gray-300 rounded-md w-full" value="<%= nit %>" required readonly>
          </div>
          <div class="relative">
            <label for="lugar" class="block text-sm font-semibold text-gray-700">Lugar</label>
            <select name="lugar" id="lugar" class="mt-1 p-2 border border-gray-300 rounded-md w-full" required>
              <option value="" disabled selected>Seleccione un lugar</option>
              <% lugares.forEach(lugar => { %>
                <option value="<%= lugar.id %>"><%= lugar.nombre_lugar %></option>
              <% }); %>
            </select>
            <p id="error-lugar" class="text-red-500 text-sm hidden">Debes seleccionar un lugar válido.</p>
          </div>
          <div>
            <label for="labor" class="block text-sm font-semibold text-gray-700">Labor</label>
            <input type="text" name="labor" id="labor" class="mt-1 p-2 border border-gray-300 rounded-md w-full" required>
          </div>
          <div>
            <label for="interventor_id" class="block text-sm font-semibold text-gray-700">Interventor</label>
            <select name="interventor_id" id="interventor_id" class="mt-1 p-2 border border-gray-300 rounded-md w-full" required>
              <option value="" disabled selected>Seleccione un interventor</option>
              <% interventores.forEach(interventor => { %>
                <option value="<%= interventor.id %>"><%= interventor.username %></option>
              <% }); %>
            </select>
          </div>
        </div>

        <!-- Modal Colaboradores Deshabilitados -->
        <div id="modalDisabledCollaborators" class="modal fade" tabindex="-1" role="dialog">
          <div class="modal-dialog modal-xl">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Colaboradores de la Solicitud</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
                  <span aria-hidden="true">×</span>
              </button>
            </div>
              <div class="modal-body">
                <p><strong>ID de la Solicitud:</strong> <span id="colaboradoresId"></span></p>
                <p><strong>Empresa:</strong> <span id="colaboradoresEmpresa"></span></p>
                <div class="mb-3">
                  <label for="filtroEstado" class="form-label">Filtrar por Estado:</label>
                  <select class="form-select" id="filtroEstado">
                    <option value="todos">Todos</option>
                    <option value="habilitados">Habilitados</option>
                    <option value="inhabilitados">Inhabilitados</option>
                  </select>
            </div>
                <div class="table-responsive">
                  <table class="table table-bordered">
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Cédula</th>
                        <th>Estado</th>
                        <th>Curso SISO</th>
                        <th>Plantilla SS</th>
                        <th>Acciones</th>
                        <th>Historial</th>
                      </tr>
                    </thead>
                    <tbody id="tablaColaboradores"></tbody>
                  </table>
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Colaboradores -->
        <div>
          <div class="text-lg font-semibold mb-3">Datos de Colaboradores</div>
          <div id="personas-container">
            <!-- Los colaboradores se agregarán aquí dinámicamente -->
          </div>
          <button type="button" id="add-person" class="mt-4 bg-ga-gold hover:bg-ga-navy text-ga-white font-bold py-2 px-4 rounded transition-colors duration-200 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            Agregar Colaborador
          </button>
          <button type="button" id="show-disabled-collaborators" class="mt-4 ml-4 bg-ga-navy hover:bg-ga-gold text-ga-white font-bold py-2 px-4 rounded transition-colors duration-200 hidden">
            Colaboradores Deshabilitados
          </button>
          <p class="text-sm text-gray-600 mt-2">* Debe agregar al menos un colaborador</p>
        </div>


                <!-- Vehículos -->
        <div>
          <div class="text-lg font-semibold mb-3">Vehículos</div>
          <div id="vehiculos-container">
            <!-- Los vehículos se agregarán aquí dinámicamente -->
          </div>
          <button type="button" id="add-vehiculo" class="mt-4 bg-ga-gold hover:bg-ga-navy text-ga-white font-bold py-2 px-4 rounded transition-colors duration-200 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            Agregar Vehículo
          </button>
          <p class="text-sm text-gray-600 mt-2">* Los vehículos son opcionales</p>
        </div>

        <!-- Seguridad Social -->
        <div>
          <div class="text-lg font-semibold mb-3">Seguridad Social de Trabajadores</div>
          <div id="arl-container">
            <label for="arl" class="block text-sm font-semibold text-gray-700">Documento ARL</label>
            <div class="flex items-center space-x-2">
              <div class="flex-grow">
                <label for="arl" class="cursor-pointer flex items-center justify-center p-2 border border-gray-300 rounded-md hover:bg-gray-50">
                  <input type="file" name="arl" id="arl" class="absolute w-0 h-0" accept=".pdf,.doc,.docx">
                  <span id="arl-filename" class="text-gray-500">Ningún archivo seleccionado</span>
                </label>
              </div>
            </div>
            <div id="arl-preview" class="mt-2 p-2 border border-gray-300 rounded-md"></div>
          </div>
          <div id="pasocial-container" class="mt-4">
            <label for="pasocial" class="block text-sm font-semibold text-gray-700">Planilla de Pago Seguridad Social</label>
            <div class="flex items-center space-x-2">
              <div class="flex-grow">
                <label for="pasocial" class="cursor-pointer flex items-center justify-center p-2 border border-gray-300 rounded-md hover:bg-gray-50">
                  <input type="file" name="pasocial" id="pasocial" class="absolute w-0 h-0" accept=".pdf,.doc,.docx">
                  <span id="pasocial-filename" class="text-gray-500">Ningún archivo seleccionado</span>
                </label>
              </div>
            </div>
            <div id="pasocial-preview" class="mt-2 p-2 border border-gray-300 rounded-md"></div>
          </div>
        </div>

        <!-- Fechas de Obra -->
        <div>
          <div class="text-lg font-semibold mb-3">Fechas de Obra</div>
          <label for="inicio_obra" class="block text-sm font-semibold text-gray-700">Inicio de Obra</label>
          <input type="date" name="inicio_obra" id="inicio-obra" class="p-2 border border-gray-300 rounded-md w-full" required>
          <label for="fin_obra" class="block text-sm font-semibold text-gray-700 mt-4">Fin de Obra</label>
          <input type="date" name="fin_obra" id="fin-obra" class="p-2 border border-gray-300 rounded-md w-full" required>
          <label for="dias_trabajo" class="block text-sm font-semibold text-gray-700 mt-4">Días Solicitados para Trabajar</label>
          <input type="text" name="dias_trabajo" id="dias" class="p-2 border border-ga-cream rounded-md w-full bg-ga-cream" readonly>
        </div>

        <div class="text-center">
          <button type="submit" id="submitButton" class="bg-ga-gold text-ga-white p-2 rounded-md hover:bg-ga-navy">Enviar Solicitud</button>
        </div>
      </form>
    </div>

<!-- Modal de Chat -->
<div id="chatModal" class="fixed inset-0 z-50 hidden bg-gray-900 bg-opacity-50 flex justify-center items-center">
  <div class="bg-white w-full max-w-4xl h-3/4 rounded-lg shadow-lg overflow-hidden flex flex-col">
    <!-- Header del chat -->
    <div class="bg-ga-navy text-ga-white px-4 py-3 flex justify-between items-center">
      <h5 class="text-lg font-semibold">Chat - Solicitud Id: <span id="chatSolicitudId"></span></h5>
      <button type="button" onclick="closeChatModal()" class="text-ga-white hover:text-ga-gold">
        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <!-- Cuerpo del chat -->
    <div class="flex flex-1 overflow-hidden">
      <!-- Lista de contactos (izquierda) -->
      <div class="w-1/4 bg-gray-100 border-r border-gray-200 overflow-y-auto">
        <ul id="chatContacts" class="p-2 space-y-2">
          <li id="sstContact" class="p-2 hover:bg-gray-200 cursor-pointer flex justify-between items-center" onclick="loadChat('sst')">
            <span>SST</span>
            <span class="badge badge-pill badge-danger unread-count hidden" data-type="sst" id="unread-count-sst">0</span>
          </li>
          <li id="interventorContact" class="p-2 hover:bg-gray-200 cursor-pointer flex justify-between items-center" onclick="loadChat('interventor')">
            <span>Interventor: <span id="interventorName"></span></span>
            <span class="badge badge-pill badge-danger unread-count hidden" data-type="interventor" id="unread-count-interventor">0</span>
          </li>
        </ul>
      </div>
      <!-- Área de conversación (derecha) -->
      <div class="w-3/4 flex flex-col">
        <div class="bg-gray-50 border-b border-gray-200 px-4 py-2 text-ga-navy font-semibold" id="chatActiveContact">Selecciona un contacto</div>
        <div id="chatMessages" class="flex-1 p-4 overflow-y-auto"></div>
        <!-- Área de escritura -->
        <div id="chatInputContainer" class="border-t border-gray-200 p-4">
          <div class="flex space-x-2">
            <textarea id="chatInput" class="flex-1 p-2 border border-gray-300 rounded-md resize-none" rows="2" placeholder="Escribe un mensaje..."></textarea>
            <button onclick="sendMessage()" class="bg-ga-gold text-ga-white px-4 py-2 rounded-md hover:bg-ga-navy">Enviar</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

 
    <!-- Listado de solicitudes -->
    <div class="flex-1 bg-gray-50 p-6 overflow-auto" id="personasListado">
      <div class="text-lg font-semibold mb-6">Solicitudes Realizadas</div>
      <div class="space-y-4">
        <% solicitudes.forEach(solicitud => { %>
          <div class="p-4 bg-white rounded-md shadow-md">
            <p>Empresa: <%= solicitud.empresa %></p>
            <p>ID: <%= solicitud.id %></p>
            <p>Inicio de Obra: <%= solicitud.inicio_obra %></p>
            <p>Fin de Obra: <%= solicitud.fin_obra %></p>
            <p>NIT: <%= solicitud.nit %></p>
            <p>Lugar: <%= solicitud.nombre_lugar %></p>
            <p>Labor: <%= solicitud.labor %></p>
            <p>Interventor: <%= solicitud.interventor %></p>
            <p>Estado: <span class="<%= getEstadoClass(solicitud.estado_actual) %>"><%= solicitud.estado_actual %></span></p>
            <p>Comentario: <span class="text-muted text-sm"><%= solicitud.comentario %></span></p>
            <!-- Mostrar cantidad de vehículos -->
            <p>Vehículos: <span id="vehiculos-count-<%= solicitud.id %>">Cargando...</span></p>
            <div class="mt-4 flex space-x-2">
              <% const doc = solicitud_url_download.find(d => d.solicitud_id === solicitud.id); %>
              <% if (doc) { %>
                <a href="<%= doc.url %>" target="_blank" class="bg-ga-gold text-ga-white py-2 px-4 rounded-md hover:bg-ga-navy text-xs">Descargar Documentos</a>
              <% } else { %>
                <p class="text-gray-600 text-sm">Podrá descargar sus archivos en cuanto sean habilitados por SST.</p>
              <% } %>
              <button type="button" onclick="window.renovarSolicitud('<%= solicitud.id %>')" class="bg-ga-gold text-ga-white py-2 px-4 rounded-md hover:bg-ga-navy text-xs">
                Renovar Solicitud
              </button>
              <button type="button" onclick="window.openChatModal('<%= solicitud.id %>')" class="bg-ga-navy text-ga-white py-2 px-4 rounded-md hover:bg-ga-gold text-xs">
                Conversar
                <span class="badge badge-light unread-count hidden" data-solicitud-id="<%= solicitud.id %>" data-type="all">0</span>
              </button>
            </div>
          </div>
        <% }); %>
      </div>
    </div>
  </div>

  <!-- Modal QR -->
  <div id="modalVerQR" class="fixed inset-0 z-50 hidden bg-gray-900 bg-opacity-50 flex justify-center items-center">
    <div class="bg-white w-11/12 sm:w-96 rounded-lg shadow-lg overflow-hidden">
      <div class="px-6 py-4 flex justify-between items-center border-b border-gray-200">
        <h5 class="text-xl font-semibold text-gray-800">Ver Código QR</h5>
        <button type="button" class="text-gray-500 hover:text-gray-800" onclick="closeModal()">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="px-6 py-4 text-center" id="qr-container"></div>
      <div class="px-6 py-3 flex justify-end border-t border-gray-200">
        <button type="button" class="bg-gray-500 text-white py-2 px-4 rounded-md hover:bg-gray-600" onclick="closeModal()">Cerrar</button>
      </div>
    </div>
  </div>

  <!-- Loader -->
  <div id="loader" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500 border-opacity-75"></div>
    <p class="ml-4 text-white text-lg">Procesando archivos...</p>
  </div>

<!-- Modal de Confirmación de Cambios -->
<div class="modal fade" id="confirmarCambiosModal" tabindex="-1" aria-labelledby="confirmarCambiosModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmarCambiosModalLabel">Confirmar Cambios</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> Se han detectado los siguientes cambios. Revise y deshaga los que no desee aplicar.
                </div>
                
                <!-- Colaboradores -->
                <div class="mb-4" id="cambiosColaboradores">
                    <h6 class="mb-3">Colaboradores</h6>
                    <div class="nuevos-colaboradores">
                        <h6 class="text-success">Nuevos</h6>
                        <div class="list-group mb-2" id="listaNuevosColaboradores"></div>
                    </div>
                    <div class="modificados-colaboradores">
                        <h6 class="text-warning">Modificados</h6>
                        <div class="list-group mb-2" id="listaModificadosColaboradores"></div>
                    </div>
                    <div class="eliminados-colaboradores">
                        <h6 class="text-danger">Eliminados</h6>
                        <div class="list-group mb-2" id="listaEliminadosColaboradores"></div>
                    </div>
                </div>

                <!-- Vehículos -->
                <div class="mb-4" id="cambiosVehiculos">
                    <h6 class="mb-3">Vehículos</h6>
                    <div class="nuevos-vehiculos">
                        <h6 class="text-success">Nuevos</h6>
                        <div class="list-group mb-2" id="listaNuevosVehiculos"></div>
                    </div>
                    <div class="modificados-vehiculos">
                        <h6 class="text-warning">Modificados</h6>
                        <div class="list-group mb-2" id="listaModificadosVehiculos"></div>
                    </div>
                    <div class="eliminados-vehiculos">
                        <h6 class="text-danger">Eliminados</h6>
                        <div class="list-group mb-2" id="listaEliminadosVehiculos"></div>
                    </div>
                </div>

                <!-- Documentos -->
                <div class="mb-4" id="cambiosDocumentos">
                    <h6 class="mb-3">Documentos</h6>
                    <div class="list-group" id="listaCambiosDocumentos"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="confirmarCambios">Confirmar Cambios</button>
            </div>
        </div>
    </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Elementos del DOM
    const form = document.getElementById('formulario');
    const addPersonBtn = document.getElementById('add-person');
    const addVehiculoBtn = document.getElementById('add-vehiculo');
    const personasContainer = document.getElementById('personas-container');
    const vehiculosContainer = document.getElementById('vehiculos-container');
    const submitButton = document.getElementById('submitButton');
    const showDisabledBtn = document.getElementById('show-disabled-collaborators');
    const modalDisabled = document.getElementById('modalDisabledCollaborators');
    const lugarInput = document.getElementById('lugar');
    const errorLugar = document.getElementById('error-lugar');

    // Estados globales
    let esRenovacion = false;
    let solicitudActualId = null;

    // Datos del servidor
    const solicitudIds = <%- JSON.stringify(solicitudes?.map(s => s.id) || []) %>;

    // Plantillas
    const collaboratorTemplate = `
        <div class="person-group mb-4 relative p-4 border border-ga-cream rounded-lg">
            <button type="button" class="remove-person absolute -top-3 -right-3 w-8 h-8 bg-ga-gold hover:bg-ga-navy text-ga-white rounded-full flex items-center justify-center shadow-lg z-10 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </button>
            <div class="mb-4">
                <input type="number" placeholder="Cédula del Colaborador" name="cedula[]" class="p-2 border border-ga-cream rounded-md w-full mb-2" required>
                <input type="text" placeholder="Nombre del colaborador" name="nombre[]" class="p-2 border border-ga-cream rounded-md w-full mb-2" required>
                <input type="hidden" name="estado[]" value="true">
            </div>
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block text-ga-navy mb-2">Foto del colaborador</label>
                    <input type="file" name="foto[]" class="p-2 border border-ga-cream rounded-md w-full" accept="image/*" required>
                </div>
                <div>
                    <label class="block text-ga-navy mb-2">Foto de la cédula</label>
                    <input type="file" name="cedulaFoto[]" class="p-2 border border-ga-cream rounded-md w-full" accept="image/*" required>
                </div>
            </div>
        </div>
    `;

    const vehiculoTemplate = `
        <div class="vehiculo-group mb-4 relative p-4 border border-ga-cream rounded-lg">
            <button type="button" class="remove-vehiculo absolute -top-3 -right-3 w-8 h-8 bg-ga-gold hover:bg-ga-navy text-ga-white rounded-full flex items-center justify-center shadow-lg z-10 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </button>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-semibold text-gray-700">Matrícula</label>
                    <input type="text" name="matricula[]" class="mt-1 p-2 border border-ga-cream rounded-md w-full" placeholder="Ej: ABC123" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700">Foto del vehículo</label>
                    <input type="file" name="foto_vehiculo[]" class="mt-1 p-2 border border-ga-cream rounded-md w-full" accept="image/*,.pdf">
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700">Tecnomecánica</label>
                    <input type="file" name="tecnomecanica[]" class="mt-1 p-2 border border-ga-cream rounded-md w-full" accept="image/*,.pdf">
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700">SOAT</label>
                    <input type="file" name="soat[]" class="mt-1 p-2 border border-ga-cream rounded-md w-full" accept="image/*,.pdf">
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700">Licencia de Conducción</label>
                    <input type="file" name="licencia_conduccion[]" class="mt-1 p-2 border border-ga-cream rounded-md w-full" accept="image/*,.pdf">
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700">Licencia de Tránsito</label>
                    <input type="file" name="licencia_transito[]" class="mt-1 p-2 border border-ga-cream rounded-md w-full" accept="image/*,.pdf">
                </div>
            </div>
        </div>
    `;

    // Funciones de utilidades
    const formatDate = (dateString) => {
        const date = new Date(dateString);
        return date.toISOString().split('T')[0];
    };

    const updateRemoveButtons = () => {
        document.querySelectorAll('.remove-person').forEach(button => {
            button.removeEventListener('click', confirmarEliminarColaborador);
            button.addEventListener('click', () => confirmarEliminarColaborador(button));
        });
        document.querySelectorAll('.remove-vehiculo').forEach(button => {
            button.removeEventListener('click', removeVehiculoHandler);
            button.addEventListener('click', removeVehiculoHandler);
        });
    };

    const removeVehiculoHandler = (e) => {
        const vehiculoGroup = e.target.closest('.vehiculo-group');
        Swal.fire({
            title: '¿Está seguro?',
            text: "¿Desea quitar este vehículo del formulario?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#CC9000',
            cancelButtonColor: '#011C3D',
            confirmButtonText: 'Sí, quitar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                vehiculoGroup.remove();
                Swal.fire({
                    icon: 'success',
                    title: 'Eliminado',
                    text: 'El vehículo ha sido removido del formulario',
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        });
    };

    // Funciones de colaboradores
    const addCollaborator = () => {
        const div = document.createElement('div');
        div.innerHTML = collaboratorTemplate;
        personasContainer.appendChild(div.firstElementChild);
        updateRemoveButtons();
    };

    window.confirmarEliminarColaborador = (button) => {
        const personGroup = button.closest('.person-group');
        const totalColaboradores = document.querySelectorAll('.person-group').length;
        const colaboradorId = personGroup.dataset.colaboradorId;

        if (totalColaboradores <= 1) {
            Swal.fire({
                icon: 'info',
                title: 'Información',
                text: 'No se puede eliminar el último colaborador.',
                timer: 3000
            });
            return;
        }

        const action = colaboradorId ? 
            {
                title: '¿Deshabilitar colaborador?',
                text: 'Este colaborador será deshabilitado pero no eliminado',
                confirmText: 'Sí, deshabilitar',
                onConfirm: () => cambiarEstadoColaborador(parseInt(colaboradorId), false)
            } : 
            {
                title: '¿Quitar colaborador?',
                text: '¿Desea quitar este colaborador del formulario?',
                confirmText: 'Sí, quitar',
                onConfirm: () => personGroup.remove()
            };

        Swal.fire({
            title: action.title,
            text: action.text,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#CC9000',
            cancelButtonColor: '#011C3D',
            confirmButtonText: action.confirmText,
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                action.onConfirm();
                personGroup.remove();
                updateRemoveButtons();
                Swal.fire({
                    icon: 'success',
                    title: colaboradorId ? 'Deshabilitado' : 'Eliminado',
                    text: colaboradorId ? 'El colaborador ha sido deshabilitado' : 'El colaborador ha sido removido',
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        });
    };

    // Funciones de vehículos
    const addVehiculo = () => {
        const div = document.createElement('div');
        div.innerHTML = vehiculoTemplate;
        vehiculosContainer.appendChild(div.firstElementChild);
        updateRemoveButtons();
    };

    const updateVehiculosCount = async () => {
        for (const id of solicitudIds) {
            try {
                const response = await fetch(`/obtener-vehiculos-solicitud/${id}`);
                const vehiculos = await response.json();
                const countElement = document.getElementById(`vehiculos-count-${id}`);
                if (countElement) {
                    countElement.textContent = vehiculos.length > 0 ? `${vehiculos.length} registrado${vehiculos.length > 1 ? 's' : ''}` : 'Ninguno';
                }
            } catch (error) {
                console.error(`Error al contar vehículos para solicitud ${id}:`, error);
                const countElement = document.getElementById(`vehiculos-count-${id}`);
                if (countElement) countElement.textContent = 'Error al cargar';
            }
        }
    };

    // Renovación de solicitud
    window.renovarSolicitud = async (solicitudId) => {
        try {
            form.reset();
            personasContainer.innerHTML = '';
            vehiculosContainer.innerHTML = '';

            const response = await fetch(`/obtener-datos-solicitud/${solicitudId}`);
            if (!response.ok) throw new Error('Error al obtener datos');

            const data = await response.json();
            if (!data.solicitud || !data.colaboradores) throw new Error('Datos incompletos');

            esRenovacion = true;
            solicitudActualId = solicitudId;

            showDisabledBtn.classList.remove('hidden');
            showDisabledBtn.style.display = 'inline-block';
            showDisabledBtn.disabled = false;

            document.getElementById('empresa').value = data.solicitud.empresa || '';
            document.getElementById('nit').value = data.solicitud.nit || '';
            document.getElementById('lugar').value = data.solicitud.lugar || '';
            document.getElementById('lugar').setAttribute('disabled', true);
            document.getElementById('lugar').classList.add('bg-gray-100');

            document.getElementById('labor').value = data.solicitud.labor || '';
            document.getElementById('labor').setAttribute('readonly', true);
            document.getElementById('labor').classList.add('bg-gray-100');

            document.getElementById('interventor_id').value = data.solicitud.interventor_id || '';
            document.getElementById('interventor_id').setAttribute('disabled', true);

            const vehiculosResponse = await fetch(`/obtener-vehiculos-solicitud/${solicitudId}`);
            if (!vehiculosResponse.ok) throw new Error('Error al cargar vehículos');
            const vehiculos = await vehiculosResponse.json();

            vehiculos.forEach(vehiculo => {
                const div = document.createElement('div');
                div.className = 'vehiculo-group mb-4 relative p-4 border border-ga-cream rounded-lg';
                div.dataset.vehiculoId = vehiculo.id;
                div.innerHTML = `
                    <button type="button" class="remove-vehiculo absolute -top-3 -right-3 w-8 h-8 bg-ga-gold hover:bg-ga-navy text-ga-white rounded-full flex items-center justify-center shadow-lg z-10 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-700">Matrícula</label>
                            <input type="text" name="matricula[]" class="mt-1 p-2 border border-gray-300 rounded-md w-full bg-gray-100" value="${vehiculo.matricula}" readonly required>
                            <input type="hidden" name="vehiculo_id[]" value="${vehiculo.id}">
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-700">Foto del vehículo</label>
                            <input type="file" name="foto_vehiculo_${vehiculo.id}" class="mt-1 p-2 border border-gray-300 rounded-md w-full" accept="image/*">
                            ${vehiculo.foto ? `<img src="${vehiculo.foto}" class="mt-2 w-32 h-32 object-cover rounded" alt="Foto actual">` : '<p class="text-gray-500 text-sm">Sin foto</p>'}
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-700">Tecnomecánica</label>
                            <input type="file" name="tecnomecanica_${vehiculo.id}" class="mt-1 p-2 border border-gray-300 rounded-md w-full" accept="image/*,.pdf">
                            ${vehiculo.tecnomecanica ? `<a href="${vehiculo.tecnomecanica}" target="_blank" class="text-blue-600 hover:text-blue-800">Ver actual</a>` : '<p class="text-gray-500 text-sm">Sin documento</p>'}
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-700">SOAT</label>
                            <input type="file" name="soat_${vehiculo.id}" class="mt-1 p-2 border border-gray-300 rounded-md w-full" accept="image/*,.pdf">
                            ${vehiculo.soat ? `<a href="${vehiculo.soat}" target="_blank" class="text-blue-600 hover:text-blue-800">Ver actual</a>` : '<p class="text-gray-500 text-sm">Sin documento</p>'}
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-700">Licencia de Conducción</label>
                            <input type="file" name="licencia_conduccion_${vehiculo.id}" class="mt-1 p-2 border border-gray-300 rounded-md w-full" accept="image/*,.pdf">
                            ${vehiculo.licencia_conduccion ? `<a href="${vehiculo.licencia_conduccion}" target="_blank" class="text-blue-600 hover:text-blue-800">Ver actual</a>` : '<p class="text-gray-500 text-sm">Sin documento</p>'}
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-700">Licencia de Tránsito</label>
                            <input type="file" name="licencia_transito_${vehiculo.id}" class="mt-1 p-2 border border-gray-300 rounded-md w-full" accept="image/*,.pdf">
                            ${vehiculo.licencia_transito ? `<a href="${vehiculo.licencia_transito}" target="_blank" class="text-blue-600 hover:text-blue-800">Ver actual</a>` : '<p class="text-gray-500 text-sm">Sin documento</p>'}
                        </div>
                    </div>
                `;
                vehiculosContainer.appendChild(div);
            });

            document.getElementById('inicio-obra').value = formatDate(data.solicitud.inicio_obra);
            document.getElementById('fin-obra').value = formatDate(data.solicitud.fin_obra);
            document.getElementById('dias').value = data.solicitud.dias_trabajo || '';
            ['inicio-obra', 'fin-obra', 'dias'].forEach(id => {
                const input = document.getElementById(id);
                input.setAttribute('readonly', true);
                input.classList.add('bg-gray-100');
            });

            submitButton.textContent = 'Guardar Cambios';

            const arlPreview = document.getElementById('arl-preview');
            const pasocialPreview = document.getElementById('pasocial-preview');
            if (data.solicitud.arl_documento) {
                arlPreview.innerHTML = `
                    <div class="flex items-center justify-between p-2 bg-gray-50 rounded-md">
                        <span class="text-sm">Documento ARL actual</span>
                        <a href="${data.solicitud.arl_documento}" target="_blank" class="text-blue-500 hover:text-blue-700 text-sm">Ver documento</a>
                    </div>
                `;
            }
            if (data.solicitud.pasocial_documento) {
                pasocialPreview.innerHTML = `
                    <div class="flex items-center justify-between p-2 bg-gray-50 rounded-md">
                        <span class="text-sm">Planilla Social actual</span>
                        <a href="${data.solicitud.pasocial_documento}" target="_blank" class="text-blue-500 hover:text-blue-700 text-sm">Ver documento</a>
                    </div>
                `;
            }

            data.colaboradores.forEach(colaborador => {
                const div = document.createElement('div');
                div.className = 'person-group mb-4 relative p-4 border border-ga-cream rounded-lg';
                div.dataset.colaboradorId = colaborador.id;
                div.innerHTML = `
                    <button type="button" class="remove-person absolute -top-3 -right-3 w-8 h-8 bg-ga-gold hover:bg-ga-navy text-ga-white rounded-full flex items-center justify-center shadow-lg z-10 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                    <div class="mb-4">
                        <input type="text" name="nombre[]" value="${colaborador.nombre}" class="p-2 border border-ga-cream rounded-md w-full mb-2 bg-gray-100" readonly>
                        <input type="number" name="cedula[]" value="${colaborador.cedula}" class="p-2 border border-ga-cream rounded-md w-full mb-2 bg-gray-100" readonly>
                        <input type="hidden" name="colaborador_id[]" value="${colaborador.id}">
                        <input type="hidden" name="estado[]" value="true">
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-ga-navy mb-2">Foto actual</label>
                            ${colaborador.foto ? `
                                <div class="mb-2">
                                    <img src="${colaborador.foto}" alt="Foto actual" class="w-32 h-32 object-cover rounded-md">
                                    <a href="${colaborador.foto}" target="_blank" class="text-blue-500 hover:text-blue-700 text-sm">Ver foto</a>
                                </div>
                            ` : '<p class="text-gray-500 text-sm mb-2">Sin foto</p>'}
                            <label class="block text-ga-navy mb-2">Actualizar foto</label>
                            <input type="file" name="foto_${colaborador.id}" class="p-2 border border-ga-cream rounded-md w-full" accept="image/*">
                        </div>
                        <div>
                            <label class="block text-ga-navy mb-2">Cédula actual</label>
                            ${colaborador.cedulaFoto ? `
                                <div class="mb-2">
                                    <img src="${colaborador.cedulaFoto}" alt="Cédula actual" class="w-32 h-32 object-cover rounded-md">
                                    <a href="${colaborador.cedulaFoto}" target="_blank" class="text-blue-500 hover:text-blue-700 text-sm">Ver cédula</a>
                                </div>
                            ` : '<p class="text-gray-500 text-sm mb-2">Sin foto de cédula</p>'}
                            <label class="block text-ga-navy mb-2">Actualizar cédula</label>
                            <input type="file" name="cedula_foto_${colaborador.id}" class="p-2 border border-ga-cream rounded-md w-full" accept="image/*">
                        </div>
                    </div>
                `;
                personasContainer.appendChild(div);
            });

            updateRemoveButtons();
            document.getElementById('contratistaFormulario').scrollIntoView({ behavior: 'smooth' });
        } catch (error) {
            console.error('Error al renovar solicitud:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: `Error al cargar los datos: ${error.message}`
            });
        }
    };

    // Gestión de colaboradores deshabilitados
    showDisabledBtn.addEventListener('click', async () => {
        if (!solicitudActualId) {
            Swal.fire({ icon: 'error', title: 'Error', text: 'No se ha seleccionado ninguna solicitud' });
            return;
        }

        Swal.fire({ title: 'Cargando...', allowOutsideClick: false, didOpen: () => Swal.showLoading() });

        try {
            const response = await fetch(`/obtener-colaboradores-todos/${solicitudActualId}`);
            if (!response.ok) throw new Error('Error al obtener colaboradores');
            const data = await response.json();

            Swal.close();
            document.getElementById('colaboradoresId').textContent = solicitudActualId;
            document.getElementById('colaboradoresEmpresa').textContent = data.solicitud?.empresa || '';

            const tbody = document.getElementById('tablaColaboradores');
            tbody.innerHTML = data.colaboradores.length === 0 ? `
                <tr><td colspan="8" class="text-center">No hay colaboradores para mostrar</td></tr>
            ` : data.colaboradores.map(col => {
                // Extraer las fechas de la plantilla SS si existe
                let plantillaClass = 'text-red-500 font-semibold';
                if (col.plantilla_ss && col.plantilla_ss !== 'No definida') {
                    const fechas = col.plantilla_ss.split(' - ');
                    if (fechas.length === 2) {
                        const fechaFin = fechas[1].split('/').reverse().join('-'); // Convertir dd/mm/yyyy a yyyy-mm-dd
                        const hoy = new Date().toISOString().split('T')[0];
                        plantillaClass = fechaFin >= hoy ? 'text-green-500 font-semibold' : 'text-red-500 font-semibold';
                    }
                }
                
                return `
                <tr data-colaborador-id="${col.id}" data-estado="${col.estado ? 'habilitado' : 'inhabilitado'}">
                    <td>${col.id}</td>
                    <td>${col.nombre}</td>
                    <td>${col.cedula}</td>
                    <td class="estado-colaborador">${col.estado ? 'Habilitado' : 'Inhabilitado'}</td>
                    <td>No definido</td>
                    <td class="${plantillaClass}">${col.plantilla_ss || 'No definida'}</td>
                    <td class="acciones-colaborador">
                        <button class="btn btn-${col.estado ? 'danger' : 'success'} btn-sm accion-colaborador" data-colaborador-id="${col.id}" data-nuevo-estado="${!col.estado}">
                            ${col.estado ? 'Deshabilitar' : 'Restaurar'}
                        </button>
                    </td>
                    <td><button class="btn btn-info btn-sm ver-historial" data-colaborador-id="${col.id}">Ver</button></td>
                </tr>
            `}).join('');

            $('#modalDisabledCollaborators').modal('show');
            aplicarFiltroEstado();

            $('#tablaColaboradores').off('click').on('click', '.accion-colaborador', function() {
                const colaboradorId = parseInt($(this).data('colaborador-id'));
                const nuevoEstado = $(this).data('nuevo-estado');
                cambiarEstadoColaborador(colaboradorId, nuevoEstado);
            }).on('click', '.ver-historial', function(e) {
                e.preventDefault();
                verHistorial(parseInt($(this).data('colaborador-id')));
            });
        } catch (error) {
            Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Error al cargar colaboradores' });
        }
    });

    const aplicarFiltroEstado = () => {
        const filtro = document.getElementById('filtroEstado').value;
        document.querySelectorAll('#tablaColaboradores tr').forEach(fila => {
            const estado = fila.getAttribute('data-estado');
            if (!estado) return;
            
            // Convertir el estado de la fila al formato del filtro
            const estadoFiltro = estado === 'habilitado' ? 'habilitados' : 'inhabilitados';
            
            // Mostrar la fila si coincide con el filtro o si es 'todos'
            fila.style.display = filtro === 'todos' || filtro === estadoFiltro ? '' : 'none';
        });
    };

    document.getElementById('filtroEstado')?.addEventListener('change', aplicarFiltroEstado);

    window.verHistorial = async (colaboradorId) => {
        try {
            const response = await fetch(`/obtener-historial-colaborador/${colaboradorId}`);
            if (!response.ok) throw new Error('Error al obtener historial');
            const data = await response.json();

            let historialModal = document.getElementById('historialColaboradorModal');
            if (!historialModal) {
                document.body.insertAdjacentHTML('beforeend', `
                    <div class="modal fade" id="historialColaboradorModal" tabindex="-1" role="dialog">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Historial de Ingresos y Salidas</h5>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body">
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                            <thead>
                                                <tr><th>Fecha/Hora</th><th>Estado</th><th>Tipo</th><th>Lugar</th><th>Usuario</th></tr>
                                            </thead>
                                            <tbody id="historialColaboradorBody"></tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" id="cerrarHistorialBtn">Cerrar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `);
                document.getElementById('cerrarHistorialBtn').addEventListener('click', () => {
                    document.activeElement.blur();
                    $('#historialColaboradorModal').modal('hide');
                });
            }

            const historialBody = document.getElementById('historialColaboradorBody');
            historialBody.innerHTML = data.length > 0 ? data.map(r => `
                <tr>
                    <td>${r.fecha_hora || 'N/A'}</td>
                    <td><span class="badge badge-${r.estado_actual === 'Ingreso' ? 'success' : 'danger'}">${r.estado_actual || 'N/A'}</span></td>
                    <td><span class="badge badge-${r.tipo?.toLowerCase() === 'entrada' ? 'success' : 'danger'}">${r.tipo || 'N/A'}</span></td>
                    <td>${r.nombre_lugar || 'N/A'}</td>
                    <td>${r.usuario_registro || 'N/A'}</td>
                </tr>
            `).join('') : '<tr><td colspan="5" class="text-center">No hay registros</td></tr>';

            $('#historialColaboradorModal').modal({ backdrop: 'static', keyboard: false });
            $('#historialColaboradorModal').off('hidden.bs.modal').on('hidden.bs.modal', () => document.activeElement.blur());
        } catch (error) {
            Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo obtener el historial: ' + error.message });
        }
    };

    window.cambiarEstadoColaborador = async (colaboradorId, nuevoEstado) => {
        try {
            const button = document.querySelector(`button[data-colaborador-id="${colaboradorId}"]`);
            if (button) {
                button.disabled = true;
                button.textContent = 'Procesando...';
            }

            const response = await fetch(`/actualizar-estado-colaborador/${colaboradorId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ estado: nuevoEstado })
            });

            if (!response.ok) throw new Error((await response.json()).message || 'Error al actualizar estado');

            const fila = document.querySelector(`tr[data-colaborador-id="${colaboradorId}"]`);
            if (fila) {
                fila.querySelector('.estado-colaborador').textContent = nuevoEstado ? 'Habilitado' : 'Inhabilitado';
                fila.setAttribute('data-estado', nuevoEstado ? 'habilitado' : 'inhabilitado');
                fila.querySelector('.acciones-colaborador').innerHTML = `
                    <button class="btn btn-${nuevoEstado ? 'danger' : 'success'} btn-sm accion-colaborador" data-colaborador-id="${colaboradorId}" data-nuevo-estado="${!nuevoEstado}">
                        ${nuevoEstado ? 'Deshabilitar' : 'Restaurar'}
                    </button>
                `;
                aplicarFiltroEstado();
            }

            if (nuevoEstado) await agregarColaboradorAlFormulario(colaboradorId);
            else quitarColaboradorDelFormulario(colaboradorId);

            if (button) {
                button.disabled = false;
                button.textContent = nuevoEstado ? 'Deshabilitar' : 'Restaurar';
            }

            Swal.fire({
                icon: 'success',
                title: 'Éxito',
                text: `Colaborador ${nuevoEstado ? 'habilitado' : 'deshabilitado'} correctamente`,
                timer: 1500,
                showConfirmButton: false
            });
        } catch (error) {
            const button = document.querySelector(`button[data-colaborador-id="${colaboradorId}"]`);
            if (button) {
                button.disabled = false;
                button.textContent = nuevoEstado ? 'Deshabilitar' : 'Restaurar';
            }
            Swal.fire({ icon: 'error', title: 'Error', text: error.message });
        }
    };

    const agregarColaboradorAlFormulario = async (colaboradorId) => {
        if (!esRenovacion) return;
        if (document.querySelector(`.person-group[data-colaborador-id="${colaboradorId}"]`)) return;

        try {
            const response = await fetch(`/obtener-colaborador/${colaboradorId}`);
            if (!response.ok) throw new Error('No se pudo obtener el colaborador');
            const colaborador = await response.json();

            const div = document.createElement('div');
            div.className = 'person-group mb-4 relative p-4 border border-ga-cream rounded-lg';
            div.dataset.colaboradorId = colaborador.id;
            div.innerHTML = `
                <button type="button" class="remove-person absolute -top-3 -right-3 w-8 h-8 bg-ga-gold hover:bg-ga-navy text-ga-white rounded-full flex items-center justify-center shadow-lg z-10 transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
                <div class="mb-4">
                    <input type="text" value="${colaborador.nombre}" name="nombre[]" class="p-2 border border-ga-cream rounded-md w-full mb-2 bg-gray-100" readonly>
                    <input type="number" value="${colaborador.cedula}" name="cedula[]" class="p-2 border border-ga-cream rounded-md w-full mb-2 bg-gray-100" readonly>
                    <input type="hidden" name="colaborador_id[]" value="${colaborador.id}">
                    <input type="hidden" name="estado[]" value="true">
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-ga-navy mb-2">Foto actual</label>
                        ${colaborador.foto ? `
                            <div class="mb-2">
                                <img src="${colaborador.foto}" alt="Foto actual" class="w-32 h-32 object-cover rounded-md">
                                <a href="${colaborador.foto}" target="_blank" class="text-blue-500 hover:text-blue-700 text-sm">Ver foto</a>
                            </div>
                        ` : '<p class="text-gray-500 text-sm mb-2">Sin foto</p>'}
                        <label class="block text-ga-navy mb-2">Actualizar foto</label>
                        <input type="file" name="foto_${colaborador.id}" class="p-2 border border-ga-cream rounded-md w-full" accept="image/*">
                    </div>
                    <div>
                        <label class="block text-ga-navy mb-2">Cédula actual</label>
                        ${colaborador.cedulaFoto ? `
                            <div class="mb-2">
                                <img src="${colaborador.cedulaFoto}" alt="Cédula actual" class="w-32 h-32 object-cover rounded-md">
                                <a href="${colaborador.cedulaFoto}" target="_blank" class="text-blue-500 hover:text-blue-700 text-sm">Ver cédula</a>
                            </div>
                        ` : '<p class="text-gray-500 text-sm mb-2">Sin foto de cédula</p>'}
                        <label class="block text-ga-navy mb-2">Actualizar cédula</label>
                        <input type="file" name="cedula_foto_${colaborador.id}" class="p-2 border border-ga-cream rounded-md w-full" accept="image/*">
                    </div>
                </div>
            `;
            personasContainer.appendChild(div);
            updateRemoveButtons();
        } catch (error) {
            Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo agregar el colaborador' });
        }
    };

    const quitarColaboradorDelFormulario = (colaboradorId) => {
        if (!esRenovacion) return;
        const div = document.querySelector(`.person-group[data-colaborador-id="${colaboradorId}"]`);
        if (div) div.remove();
        updateRemoveButtons();
    };

 // Envío del formulario
form.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Validación de fechas
    const fechaInicio = new Date(document.getElementById('inicio-obra').value);
    const fechaFin = new Date(document.getElementById('fin-obra').value);

    if (isNaN(fechaInicio) || isNaN(fechaFin)) {
        Swal.fire({ icon: 'error', title: 'Error', text: 'Seleccione fechas válidas' });
        return;
    }

    if (fechaFin < fechaInicio) {
        Swal.fire({ icon: 'error', title: 'Error', text: 'La fecha de fin debe ser posterior o igual a la de inicio' });
        return;
    }

    // Validación de colaboradores mínimos
    if (personasContainer.children.length === 0) {
        Swal.fire({ icon: 'error', title: 'Error', text: 'Agregue al menos un colaborador' });
        return;
    }

    // Validación de campos requeridos
    const requiredFields = form.querySelectorAll('[required]');
    let hasEmptyFields = false;
    requiredFields.forEach(field => {
        if (!field.value.trim()) {
            hasEmptyFields = true;
            field.classList.add('border-red-500');
        } else {
            field.classList.remove('border-red-500');
        }
    });

    if (hasEmptyFields) {
        Swal.fire({ icon: 'error', title: 'Error', text: 'Complete todos los campos requeridos' });
        return;
    }

    // Detectar cambios específicos
    const cambios = {
        colaboradores: {
            nuevos: [],
            modificados: [],
            eliminados: []
        },
        vehiculos: {
            nuevos: [],
            modificados: [],
            eliminados: []
        },
        documentos: {
            arl: false,
            pasocial: false
        }
    };

    // Verificar cambios en colaboradores
    document.querySelectorAll('.person-group').forEach((grupo) => {
        const colaboradorId = grupo.dataset.colaboradorId;
        const fotoInput = grupo.querySelector(`input[name="foto_${colaboradorId}"]`);
        const cedulaFotoInput = grupo.querySelector(`input[name="cedula_foto_${colaboradorId}"]`);
        
        if (colaboradorId) {
            if (fotoInput?.files.length > 0 || cedulaFotoInput?.files.length > 0) {
                cambios.colaboradores.modificados.push({
                    id: parseInt(colaboradorId),
                    cambios: {
                        foto: fotoInput?.files.length > 0,
                        cedula: cedulaFotoInput?.files.length > 0
                    }
                });
            }
        } else {
            cambios.colaboradores.nuevos.push({
                cedula: grupo.querySelector('input[name="cedula[]"]').value.trim(),
                nombre: grupo.querySelector('input[name="nombre[]"]').value.trim()
            });
        }
    });

    // Verificar cambios en vehículos
    document.querySelectorAll('.vehiculo-group').forEach((grupo) => {
        const vehiculoId = grupo.dataset.vehiculoId;
        const inputs = grupo.querySelectorAll('input[type="file"]');
        const hasChanges = Array.from(inputs).some(input => input.files.length > 0);
        
        if (vehiculoId) {
            if (hasChanges) {
                cambios.vehiculos.modificados.push({
                    id: parseInt(vehiculoId),
                    cambios: {
                        foto: grupo.querySelector('input[name^="foto_vehiculo_"]')?.files.length > 0,
                        tecnomecanica: grupo.querySelector('input[name^="tecnomecanica_"]')?.files.length > 0,
                        soat: grupo.querySelector('input[name^="soat_"]')?.files.length > 0,
                        licencia_conduccion: grupo.querySelector('input[name^="licencia_conduccion_"]')?.files.length > 0,
                        licencia_transito: grupo.querySelector('input[name^="licencia_transito_"]')?.files.length > 0
                    }
                });
            }
        } else {
            cambios.vehiculos.nuevos.push({
                matricula: grupo.querySelector('input[name="matricula[]"]').value.trim().toUpperCase()
            });
        }
    });

    // Verificar cambios en documentos
    cambios.documentos.arl = document.getElementById('arl')?.files.length > 0;
    cambios.documentos.pasocial = document.getElementById('pasocial')?.files.length > 0;

    // Determinar si hay cambios reales
    const hayCambios = 
        cambios.colaboradores.nuevos.length > 0 ||
        cambios.colaboradores.modificados.length > 0 ||
        cambios.colaboradores.eliminados.length > 0 ||
        cambios.vehiculos.nuevos.length > 0 ||
        cambios.vehiculos.modificados.length > 0 ||
        cambios.vehiculos.eliminados.length > 0 ||
        cambios.documentos.arl ||
        cambios.documentos.pasocial ||
        solicitudActualId === null;

    // Preparar datos para enviar
    const formData = new FormData(form);
    
    // Procesar archivos antes de enviarlos
    const fileInputs = form.querySelectorAll('input[type="file"]');
    for (const input of fileInputs) {
        if (input.files.length > 0) {
            const files = Array.from(input.files);
            for (const file of files) {
                if (file.type.startsWith('image/')) {
                    try {
                        const webpFile = await convertImageToWebP(file);
                        formData.append(input.name, webpFile);
                    } catch (error) {
                        console.error('Error al procesar archivo:', file.name, error);
                        formData.append(input.name, file); // Mantener el archivo original si falla la conversión
                    }
                } else {
                    formData.append(input.name, file);
                }
            }
        }
    }
    
    formData.append('cambios', JSON.stringify(cambios));
    formData.append('renovacion', esRenovacion ? 'true' : 'false');

    // Determinar la URL y método según si es nueva o actualización
    const isNewRequest = solicitudActualId === null;
    const url = isNewRequest ? '/generar-solicitud' : `/actualizar-solicitud/${solicitudActualId}`;
    const method = 'POST';

    try {
        // Mostrar loading hasta que termine el proceso
        Swal.fire({
            title: 'Procesando...',
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading(),
            showConfirmButton: false // Evitar que aparezca un botón mientras carga
        });
        // Si no hay cambios en una solicitud existente, mostrar alerta temporal
        if (!isNewRequest && !hayCambios) {
            Swal.close(); // Cerrar el loader

            await Swal.fire({
                icon: 'info',
                title: 'Sin cambios',
                text: 'No se detectaron cambios en la solicitud',
                timer: 2000,
                showConfirmButton: false,
                allowOutsideClick: false
            });

            window.location.reload();
            return;
        }

        // Enviar solicitud al backend
        const response = await fetch(url, {
            method: method,
            body: formData
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Error al procesar la solicitud');
        }

        const result = await response.json();

        // Cerrar el loader y mostrar mensaje de éxito
        Swal.close();
        await Swal.fire({
            icon: 'success',
            title: 'Éxito',
            text: isNewRequest ? 'Solicitud creada correctamente' : 'Solicitud actualizada correctamente',
            timer: 1500,
            showConfirmButton: false
        });

        // Recargar la página
        window.location.reload();
    } catch (error) {
        console.error('Error al procesar solicitud:', error);
        Swal.close(); // Cerrar el loader en caso de error
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: `Error al procesar la solicitud: ${error.message}`
        });
    }
});    

// Cálculo de días
    const calcularDias = () => {
        const fechaInicio = new Date(document.getElementById('inicio-obra').value);
        const fechaFin = new Date(document.getElementById('fin-obra').value);
        const diasInput = document.getElementById('dias');

        if (!isNaN(fechaInicio) && !isNaN(fechaFin)) {
            const diferencia = Math.ceil((fechaFin - fechaInicio) / (1000 * 60 * 60 * 24)) + 1;
            if (diferencia < 1) {
                Swal.fire({ icon: 'error', title: 'Error', text: 'La fecha de fin debe ser posterior o igual a la de inicio' });
                document.getElementById('fin-obra').value = document.getElementById('inicio-obra').value;
                diasInput.value = '1';
            } else {
                diasInput.value = diferencia;
            }
        } else {
            diasInput.value = '';
        }
    };

    ['inicio-obra', 'fin-obra'].forEach(id => {
        document.getElementById(id).addEventListener('change', function() {
            const otherId = id === 'inicio-obra' ? 'fin-obra' : 'inicio-obra';
            const otherInput = document.getElementById(otherId);
            if (!otherInput.value) otherInput.value = this.value;
            calcularDias();
        });
    });

    // Previsualización de archivos
    ['arl', 'pasocial'].forEach(id => {
        document.getElementById(id)?.addEventListener('change', function() {
            document.getElementById(`${id}-filename`).textContent = this.files[0]?.name || 'Ningún archivo seleccionado';
        });
    });

    // Inicialización
    submitButton.textContent = 'Enviar Solicitud';
    if (personasContainer.children.length === 0) addCollaborator();
    updateVehiculosCount();
    addPersonBtn.addEventListener('click', addCollaborator);
    addVehiculoBtn.addEventListener('click', addVehiculo);

    // Gestión de modales
    $(document).on('hidden.bs.modal', '.modal', () => document.activeElement.blur());
    $(document).on('click', '.modal button', e => e.stopPropagation());
});

// Chat Implementation (separado para mejor organización)
let currentSolicitudId = null;
let currentChatType = null;
let socket = null;
let oldestMessageId = null;
let interventorName = '';
let isLoadingMore = false;
const sentMessages = new Map();
const displayedMessages = new Set();

const getContratistaUserId = () => {
    return window.contratistaUserId || document.querySelector('[data-contratista-user-id]')?.dataset.contratistaUserId || 
           document.querySelector('meta[name="contratista-user-id"]')?.getAttribute('content') || null;
};


window.openChatModal = async (solicitudId) => {
    try {
        currentSolicitudId = solicitudId;
        sentMessages.clear();
        displayedMessages.clear();

        const modalElement = document.getElementById('chatModal');
        if (!modalElement) throw new Error('No se encontró el modal de chat');
        modalElement.style.display = 'flex';
        modalElement.classList.remove('hidden');

        document.getElementById('chatSolicitudId').textContent = solicitudId;

        const userId = getContratistaUserId();
        if (!userId) throw new Error('No se pudo obtener ID de usuario');

        // Initialize both sst and soporte chats
        await Promise.all([
            fetch('/api/chat/iniciar/' + solicitudId + '/sst', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId })
            }).catch(err => console.warn('Error al inicializar chat SST:', err)),
            fetch('/api/chat/iniciar/' + solicitudId + '/soporte', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId })
            }).catch(err => console.warn('Error al inicializar chat Soporte:', err))
        ]);

        if (socket?.readyState === WebSocket.OPEN) socket.close();

        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        socket = new WebSocket(`${protocol}//${window.location.host}/ws`);

        socket.onopen = () => {
            socket.send(JSON.stringify({
                type: 'identify',
                userId,
                role: 'contratista',
                solicitudId
            }));
        };

        socket.onmessage = (event) => {
            console.log('Received WebSocket message:', event.data);
            const message = JSON.parse(event.data);
            if (message.type === 'identify_confirmation') return;

            if (message.type === 'status_update') {
                const { tempId, status, messageId } = message;
                const existing = document.querySelector(`.chat-message[data-message-id="${tempId}"]`);
                if (existing) {
                    existing.dataset.messageId = messageId;
                    updateMessageStatus(messageId, status);
                    sentMessages.set(tempId, messageId);
                    displayedMessages.add(messageId);
                }
                return;
            }

            if (message.id && message.solicitudId) {
                const isSender = parseInt(message.usuario_id) === parseInt(userId);
                if (isSender && sentMessages.has(message.tempId || String(message.id))) return;
                if (displayedMessages.has(message.id)) return;

                const normalizedMessage = {
                    id: message.id,
                    usuario_id: message.usuario_id,
                    content: message.content,
                    created_at: message.created_at,
                    type: message.type || 'sst',
                    leido: message.leido || false
                };

                if (message.solicitudId === currentSolicitudId && message.type === currentChatType) {
                    displayMessage(normalizedMessage);
                    displayedMessages.add(message.id);
                    if (!isSender) markMessagesAsRead(currentSolicitudId, currentChatType);
                } else {
                    updateUnreadCounter(message.solicitudId, message.type);
                    if (!isSender) notifyNewMessage(message);
                }
            }
        };

        socket.onerror = (error) => console.error('WebSocket error:', error);
        socket.onclose = () => console.log('WebSocket cerrado');

        await fetchInterventorInfo(solicitudId);
        await loadChat('sst'); // Default to SST chat on open
        document.getElementById('chatMessages').addEventListener('scroll', scrollHandler);
    } catch (error) {
        Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo abrir el chat: ' + error.message });
    }
};

window.closeChatModal = () => {
    if (socket) {
        socket.close();
        socket = null;
    }

    const chatMessages = document.getElementById('chatMessages');
    if (chatMessages) {
        chatMessages.innerHTML = '';
        chatMessages.removeEventListener('scroll', scrollHandler);
    }

    document.getElementById('chatInput').value = '';
    ['sstContact', 'interventorContact'].forEach(id => document.getElementById(id)?.classList.remove('active'));
    document.getElementById('chatActiveContact').textContent = 'Selecciona un contacto';
    
    const modalElement = document.getElementById('chatModal');
    modalElement.classList.add('hidden');
    modalElement.style.display = 'none';

    currentSolicitudId = null;
    currentChatType = null;
    oldestMessageId = null;
    interventorName = '';
    displayedMessages.clear();
};

window.loadChat = async (chatType) => {
    try {
        displayedMessages.clear();
        currentChatType = chatType;

        // Set the active contact name based on chat type
        if (chatType === 'sst') {
            document.getElementById('chatActiveContact').textContent = 'SST';
        } else if (chatType === 'interventor') {
            document.getElementById('chatActiveContact').textContent = `Interventor: ${interventorName}`;
        } else if (chatType === 'soporte') {
            document.getElementById('chatActiveContact').textContent = 'Soporte';
        }

        ['sstContact', 'interventorContact', 'soporteContact'].forEach(id => document.getElementById(id)?.classList.remove('active'));
        document.getElementById(`${chatType}Contact`).classList.add('active');

        const messages = await loadInitialMessagesWithRetry(currentSolicitudId, chatType, getContratistaUserId());
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = messages.length === 0 ? 
            '<div class="text-center text-gray-500 p-4">No hay mensajes. Escribe para comenzar.</div>' : '';
        
        messages.forEach(displayMessage);
        chatMessages.scrollTop = chatMessages.scrollHeight;

        await markMessagesAsRead(currentSolicitudId, chatType);
    } catch (error) {
        document.getElementById('chatMessages').innerHTML = `
            <div class="flex justify-center my-4 p-4 bg-red-100 text-red-700 rounded-lg">
                Error al cargar mensajes. <button class="underline ml-2" onclick="loadChat('${chatType}')">Reintentar</button>
            </div>
        `;
    }
};

const loadInitialMessagesWithRetry = async (solicitudId, chatType, userId, maxRetries = 3) => {
    for (let retries = 0; retries < maxRetries; retries++) {
        try {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.innerHTML = '<div class="flex justify-center my-4"><div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-ga-gold"></div></div>';

            const response = await fetch(`/api/chat/${solicitudId}/${chatType}?userId=${userId}&limit=20`);
            if (!response.ok) throw new Error('Error al cargar mensajes');

            const messages = await response.json();
            if (messages.length > 0) {
                oldestMessageId = messages.reduce((min, curr) => parseInt(curr.id) < parseInt(min.id) ? curr : min).id;
            }
            return messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
        } catch (err) {
            if (retries === maxRetries - 1) throw err;
            await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, retries)));
        }
    }
};

const loadMoreMessages = async (solicitudId, type) => {
    if (!oldestMessageId || isLoadingMore) return;
    isLoadingMore = true;

    try {
        const chatMessages = document.getElementById('chatMessages');
        const loading = document.createElement('div');
        loading.className = 'text-center text-gray-500 text-sm py-2';
        loading.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-ga-gold inline-block"></div> Cargando...';
        chatMessages.insertBefore(loading, chatMessages.firstChild);

        const response = await fetch(`/api/chat/${solicitudId}/${type}?limit=20&before=${oldestMessageId}&userId=${getContratistaUserId()}`);
        if (!response.ok) throw new Error('Error al cargar más mensajes');

        const messages = await response.json();
        loading.remove();

        if (messages.length > 0) {
            const scrollHeightBefore = chatMessages.scrollHeight;
            const scrollTopBefore = chatMessages.scrollTop;

            messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at)).forEach(displayMessage);
            oldestMessageId = messages.reduce((min, curr) => parseInt(curr.id) < parseInt(min.id) ? curr : min).id;

            chatMessages.scrollTop = scrollTopBefore + (chatMessages.scrollHeight - scrollHeightBefore);
        } else {
            oldestMessageId = null;
            const noMore = document.createElement('div');
            noMore.className = 'text-center text-gray-500 text-xs py-1';
            noMore.textContent = 'No hay más mensajes';
            chatMessages.insertBefore(noMore, chatMessages.firstChild);
            setTimeout(() => noMore.remove(), 3000);
        }
    } catch (error) {
        console.error('Error al cargar más mensajes:', error);
    } finally {
        isLoadingMore = false;
    }
};

const scrollHandler = () => {
    const chatMessages = document.getElementById('chatMessages');
    if (chatMessages.scrollTop < 50 && oldestMessageId && !isLoadingMore) {
        loadMoreMessages(currentSolicitudId, currentChatType);
    }
};

const displayMessage = (message) => {
    if (displayedMessages.has(message.id)) return;

    const chatMessages = document.getElementById('chatMessages');
    const emptyMessage = chatMessages.querySelector('.text-center.text-gray-500');
    if (emptyMessage) chatMessages.innerHTML = '';

    const userId = getContratistaUserId();
    const isSender = parseInt(message.usuario_id) === parseInt(userId);

    const div = document.createElement('div');
    div.className = `chat-message p-3 my-2 rounded-lg ${isSender ? 'bg-ga-gold text-white ml-auto' : 'bg-gray-200 text-gray-800'} max-w-xs`;
    div.dataset.messageId = message.id;
    div.dataset.userId = message.usuario_id;

    let content;
    try {
        // Intentar parsear como JSON si es string
        if (typeof message.content === 'string') {
            const parsed = JSON.parse(message.content);
            content = parsed.text || message.content;
        } else {
            content = message.content.text || JSON.stringify(message.content);
        }
    } catch (e) {
        // Si falla el parseo, usar el contenido directamente
        content = message.content;
    }

    const date = new Date(message.created_at || Date.now());
    const time = date.toLocaleString('es-ES', { dateStyle: 'short', timeStyle: 'short' });

    const statusIcon = isSender ? (
        String(message.id).startsWith('temp-') ? '<span class="status-icon-sent">✓</span>' :
        message.leido ? '<span class="status-icon-read">✓✓</span>' : '<span class="status-icon-delivered">✓✓</span>'
    ) : '';

    div.innerHTML = `
        <div class="text-sm mb-1">${content}</div>
        <div class="text-xs ${isSender ? 'text-gray-200' : 'text-gray-500'} text-right">${time} ${statusIcon}</div>
    `;

    chatMessages.appendChild(div);
    displayedMessages.add(message.id);

    const isNearBottom = chatMessages.scrollHeight - chatMessages.scrollTop - chatMessages.clientHeight < 100;
    if (isNearBottom) setTimeout(() => chatMessages.scrollTop = chatMessages.scrollHeight, 100);
};

const sendMessage = () => {
    const input = document.getElementById('chatInput');
    const content = input.value.trim();
    if (!content || !currentSolicitudId || !currentChatType || !socket) return;

    const userId = getContratistaUserId();
    if (!userId) {
        Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo identificar usuario' });
        return;
    }

    const tempId = 'temp-' + Date.now();
    const timestamp = new Date().toISOString();

    const localMessage = { id: tempId, usuario_id: userId, content, created_at: timestamp, type: currentChatType };
    displayMessage(localMessage);
    sentMessages.set(tempId, tempId);
    displayedMessages.add(tempId);

    const messageToSend = { solicitudId: currentSolicitudId, type: currentChatType, content, userId, tempId, timestamp };

    if (socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify(messageToSend));
        setTimeout(() => updateMessageStatus(tempId, 'sent'), 300);
        setTimeout(() => updateMessageStatus(tempId, 'delivered'), 1000);
    } else {
        updateMessageStatus(tempId, 'error');
        Swal.fire({ icon: 'warning', title: 'Conexión perdida', text: 'Reconectando...' });
        setTimeout(() => { closeChatModal(); openChatModal(currentSolicitudId); }, 2000);
    }

    input.value = '';
};

const updateMessageStatus = (messageId, status) => {
    const messageElement = document.querySelector(`.chat-message[data-message-id="${messageId}"]`);
    if (!messageElement) return;

    const statusContainer = messageElement.querySelector('.text-right');
    if (!statusContainer) return;

    const timeText = statusContainer.textContent.trim().split(' ').slice(0, 2).join(' ');
    const statusIcon = status === 'error' ? '<span class="status-icon-error">!</span>' :
                      status === 'sent' ? '<span class="status-icon-sent">✓</span>' :
                      status === 'delivered' ? '<span class="status-icon-delivered">✓✓</span>' :
                      '<span class="status-icon-read">✓✓</span>';

    statusContainer.innerHTML = `${timeText} ${statusIcon}`;
};

const markMessagesAsRead = async (solicitudId, type) => {
    const userId = getContratistaUserId();
    if (!userId) return;

    try {
        const response = await fetch(`/api/chat/${solicitudId}/${type}/mark-read`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            if (errorData.error === 'Chat no encontrado') {
                console.log('Chat no encontrado, ignorando error');
                return;
            }
            throw new Error(errorData.message || 'Error al marcar mensajes');
        }
        
        const badge = document.getElementById(`unread-count-${type}`);
        if (badge) {
            badge.textContent = '0';
            badge.classList.add('hidden');
        }
    } catch (error) {
        console.error('Error al marcar mensajes como leídos:', error);
    }
};

const updateUnreadCounter = async (solicitudId, type) => {
    if (currentSolicitudId === solicitudId && currentChatType === type) return;

    try {
        const userId = getContratistaUserId();
        const response = await fetch(`/api/chat/${solicitudId}/${type}/unread?userId=${userId}`);
        if (!response.ok) throw new Error('Error al obtener contador');

        const data = await response.json();
        const badge = document.querySelector(`.unread-count[data-type="${type}"][data-solicitud-id="${solicitudId}"]`) || 
                     document.getElementById(`unread-count-${type}`);
        if (badge) {
            badge.textContent = data.unreadCount;
            badge.classList.toggle('hidden', data.unreadCount === 0);
        }
    } catch (error) {
        console.error('Error al actualizar contador:', error);
    }
};

const fetchInterventorInfo = async (solicitudId) => {
    try {
        const response = await fetch(`/api/solicitud/${solicitudId}/interventor`);
        if (!response.ok) throw new Error('Error al obtener interventor');
        
        const data = await response.json();
        interventorName = data.interventorName || 'Sin asignar';
        document.getElementById('interventorName').textContent = interventorName;
    } catch (error) {
        interventorName = 'Sin asignar';
        document.getElementById('interventorName').textContent = interventorName;
    }
};

const notifyNewMessage = (message) => {
    if (parseInt(message.userId) === parseInt(getContratistaUserId())) return;
    
    updateUnreadCounter(message.solicitudId, message.type);
    
    if (!document.getElementById('chatModal').classList.contains('hidden') && 
        currentSolicitudId === message.solicitudId && currentChatType === message.type) return;

    if (Notification.permission === 'granted') {
        const sender = message.type === 'sst' ? 'SST' : 'Interventor';
        const notification = new Notification(`Nuevo mensaje de ${sender}`, {
            body: message.content,
            icon: '/img/logo.png',
            tag: `chat-${message.solicitudId}-${message.type}`
        });
        notification.onclick = () => {
            window.focus();
            openChatModal(message.solicitudId);
            loadChat(message.type);
        };
    }
};

document.addEventListener('DOMContentLoaded', async () => {
    if ("Notification" in window && Notification.permission !== "granted") {
        Notification.requestPermission();
    }

    const solicitudIds = Array.from(document.querySelectorAll('.unread-count[data-solicitud-id]'))
        .map(el => el.dataset.solicitudId);
    for (const id of solicitudIds) {
        await updateUnreadCounter(id, 'sst');
        await updateUnreadCounter(id, 'interventor');
        await updateUnreadCounter(id, 'soporte');
    }

    document.getElementById('chatInput')?.parentElement.addEventListener('submit', (e) => {
        e.preventDefault();
        sendMessage();
    });
});

let cambiosDetectados = {
    colaboradores: {
        nuevos: [],
        modificados: [],
        eliminados: []
    },
    vehiculos: {
        nuevos: [],
        modificados: [],
        eliminados: []
    },
    documentos: {
        arl: false,
        pasocial: false
    }
};

function mostrarConfirmacionCambios() {
    const modal = document.getElementById('confirmacionCambiosModal');
    const listaCambios = document.getElementById('listaCambios');
    listaCambios.innerHTML = '';

    // Verificar si hay cambios
    const hayCambios = Object.values(cambiosDetectados).some(categoria => 
        Object.values(categoria).some(cambios => 
            Array.isArray(cambios) ? cambios.length > 0 : cambios
        )
    );

    if (!hayCambios) {
        confirmarCambios();
        return;
    }

    // Generar HTML para cada tipo de cambio
    let html = '';

    // Cambios en colaboradores
    if (cambiosDetectados.colaboradores.nuevos.length > 0) {
        html += `
            <div class="mb-4">
                <h4 class="font-semibold text-blue-600">Nuevos Colaboradores:</h4>
                <ul class="list-disc pl-5">
                    ${cambiosDetectados.colaboradores.nuevos.map(col => `
                        <li class="flex justify-between items-center">
                            <span>${col.nombre}</span>
                            <button onclick="deshacerCambio('colaborador', 'nuevo', ${col.id})" 
                                    class="text-red-600 hover:text-red-800 text-sm">
                                Deshacer
                            </button>
                        </li>
                    `).join('')}
                </ul>
            </div>
        `;
    }

    if (cambiosDetectados.colaboradores.modificados.length > 0) {
        html += `
            <div class="mb-4">
                <h4 class="font-semibold text-yellow-600">Colaboradores Modificados:</h4>
                <ul class="list-disc pl-5">
                    ${cambiosDetectados.colaboradores.modificados.map(col => `
                        <li class="flex justify-between items-center">
                            <span>${col.nombre}</span>
                            <button onclick="deshacerCambio('colaborador', 'modificado', ${col.id})" 
                                    class="text-red-600 hover:text-red-800 text-sm">
                                Deshacer
                            </button>
                        </li>
                    `).join('')}
                </ul>
            </div>
        `;
    }

    if (cambiosDetectados.colaboradores.eliminados.length > 0) {
        html += `
            <div class="mb-4">
                <h4 class="font-semibold text-red-600">Colaboradores Eliminados:</h4>
                <ul class="list-disc pl-5">
                    ${cambiosDetectados.colaboradores.eliminados.map(col => `
                        <li class="flex justify-between items-center">
                            <span>${col.nombre}</span>
                            <button onclick="deshacerCambio('colaborador', 'eliminado', ${col.id})" 
                                    class="text-red-600 hover:text-red-800 text-sm">
                                Restaurar
                            </button>
                        </li>
                    `).join('')}
                </ul>
            </div>
        `;
    }

    // Cambios en vehículos
    if (cambiosDetectados.vehiculos.nuevos.length > 0) {
        html += `
            <div class="mb-4">
                <h4 class="font-semibold text-blue-600">Nuevos Vehículos:</h4>
                <ul class="list-disc pl-5">
                    ${cambiosDetectados.vehiculos.nuevos.map(veh => `
                        <li class="flex justify-between items-center">
                            <span>${veh.placa}</span>
                            <button onclick="deshacerCambio('vehiculo', 'nuevo', ${veh.id})" 
                                    class="text-red-600 hover:text-red-800 text-sm">
                                Deshacer
                            </button>
                        </li>
                    `).join('')}
                </ul>
            </div>
        `;
    }

    if (cambiosDetectados.vehiculos.modificados.length > 0) {
        html += `
            <div class="mb-4">
                <h4 class="font-semibold text-yellow-600">Vehículos Modificados:</h4>
                <ul class="list-disc pl-5">
                    ${cambiosDetectados.vehiculos.modificados.map(veh => `
                        <li class="flex justify-between items-center">
                            <span>${veh.placa}</span>
                            <button onclick="deshacerCambio('vehiculo', 'modificado', ${veh.id})" 
                                    class="text-red-600 hover:text-red-800 text-sm">
                                Deshacer
                            </button>
                        </li>
                    `).join('')}
                </ul>
            </div>
        `;
    }

    if (cambiosDetectados.vehiculos.eliminados.length > 0) {
        html += `
            <div class="mb-4">
                <h4 class="font-semibold text-red-600">Vehículos Eliminados:</h4>
                <ul class="list-disc pl-5">
                    ${cambiosDetectados.vehiculos.eliminados.map(veh => `
                        <li class="flex justify-between items-center">
                            <span>${veh.placa}</span>
                            <button onclick="deshacerCambio('vehiculo', 'eliminado', ${veh.id})" 
                                    class="text-red-600 hover:text-red-800 text-sm">
                                Restaurar
                            </button>
                        </li>
                    `).join('')}
                </ul>
            </div>
        `;
    }

    // Cambios en documentos
    if (cambiosDetectados.documentos.arl || cambiosDetectados.documentos.pasocial) {
        html += `
            <div class="mb-4">
                <h4 class="font-semibold text-yellow-600">Documentos Modificados:</h4>
                <ul class="list-disc pl-5">
                    ${cambiosDetectados.documentos.arl ? `
                        <li class="flex justify-between items-center">
                            <span>ARL</span>
                            <button onclick="deshacerCambio('documento', 'arl')" 
                                    class="text-red-600 hover:text-red-800 text-sm">
                                Deshacer
                            </button>
                        </li>
                    ` : ''}
                    ${cambiosDetectados.documentos.pasocial ? `
                        <li class="flex justify-between items-center">
                            <span>Pasocial</span>
                            <button onclick="deshacerCambio('documento', 'pasocial')" 
                                    class="text-red-600 hover:text-red-800 text-sm">
                                Deshacer
                            </button>
                        </li>
                    ` : ''}
                </ul>
            </div>
        `;
    }

    listaCambios.innerHTML = html;
    modal.classList.remove('hidden');
    modal.classList.add('flex');
}

function deshacerCambio(tipo, accion, id) {
    switch(tipo) {
        case 'colaborador':
            if (accion === 'nuevo') {
                // Eliminar el colaborador de la lista de nuevos
                cambiosDetectados.colaboradores.nuevos = cambiosDetectados.colaboradores.nuevos.filter(c => c.id !== id);
                // Eliminar el elemento del DOM
                document.querySelector(`#colaborador-${id}`)?.remove();
            } else if (accion === 'modificado') {
                // Restaurar los datos originales del colaborador
                const colaboradorOriginal = colaboradoresOriginales.find(c => c.id === id);
                if (colaboradorOriginal) {
                    const elemento = document.querySelector(`#colaborador-${id}`);
                    if (elemento) {
                        elemento.querySelector('.nombre-colaborador').textContent = colaboradorOriginal.nombre;
                        elemento.querySelector('.cedula-colaborador').textContent = colaboradorOriginal.cedula;
                    }
                }
                cambiosDetectados.colaboradores.modificados = cambiosDetectados.colaboradores.modificados.filter(c => c.id !== id);
            } else if (accion === 'eliminado') {
                // Restaurar el colaborador eliminado
                const colaboradorEliminado = cambiosDetectados.colaboradores.eliminados.find(c => c.id === id);
                if (colaboradorEliminado) {
                    agregarColaborador(colaboradorEliminado);
                    cambiosDetectados.colaboradores.eliminados = cambiosDetectados.colaboradores.eliminados.filter(c => c.id !== id);
                }
            }
            break;
        case 'vehiculo':
            if (accion === 'nuevo') {
                cambiosDetectados.vehiculos.nuevos = cambiosDetectados.vehiculos.nuevos.filter(v => v.id !== id);
                document.querySelector(`#vehiculo-${id}`)?.remove();
            } else if (accion === 'modificado') {
                const vehiculoOriginal = vehiculosOriginales.find(v => v.id === id);
                if (vehiculoOriginal) {
                    const elemento = document.querySelector(`#vehiculo-${id}`);
                    if (elemento) {
                        elemento.querySelector('.placa-vehiculo').textContent = vehiculoOriginal.placa;
                    }
                }
                cambiosDetectados.vehiculos.modificados = cambiosDetectados.vehiculos.modificados.filter(v => v.id !== id);
            } else if (accion === 'eliminado') {
                const vehiculoEliminado = cambiosDetectados.vehiculos.eliminados.find(v => v.id === id);
                if (vehiculoEliminado) {
                    agregarVehiculo(vehiculoEliminado);
                    cambiosDetectados.vehiculos.eliminados = cambiosDetectados.vehiculos.eliminados.filter(v => v.id !== id);
                }
            }
            break;
        case 'documento':
            if (accion === 'arl') {
                cambiosDetectados.documentos.arl = false;
                // Restaurar el documento ARL original
                const inputArl = document.querySelector('input[name="arl_documento"]');
                if (inputArl) {
                    inputArl.value = '';
                }
            } else if (accion === 'pasocial') {
                cambiosDetectados.documentos.pasocial = false;
                // Restaurar el documento Pasocial original
                const inputPasocial = document.querySelector('input[name="pasocial_documento"]');
                if (inputPasocial) {
                    inputPasocial.value = '';
                }
            }
            break;
    }

    // Actualizar la vista del modal
    mostrarConfirmacionCambios();
}

function cancelarCambios() {
    // Restaurar todos los cambios
    cambiosDetectados.colaboradores.nuevos.forEach(col => {
        document.querySelector(`#colaborador-${col.id}`)?.remove();
    });
    cambiosDetectados.colaboradores.eliminados.forEach(col => {
        agregarColaborador(col);
    });
    cambiosDetectados.colaboradores.modificados.forEach(col => {
        const original = colaboradoresOriginales.find(c => c.id === col.id);
        if (original) {
            const elemento = document.querySelector(`#colaborador-${col.id}`);
            if (elemento) {
                elemento.querySelector('.nombre-colaborador').textContent = original.nombre;
                elemento.querySelector('.cedula-colaborador').textContent = original.cedula;
            }
        }
    });

    cambiosDetectados.vehiculos.nuevos.forEach(veh => {
        document.querySelector(`#vehiculo-${veh.id}`)?.remove();
    });
    cambiosDetectados.vehiculos.eliminados.forEach(veh => {
        agregarVehiculo(veh);
    });
    cambiosDetectados.vehiculos.modificados.forEach(veh => {
        const original = vehiculosOriginales.find(v => v.id === veh.id);
        if (original) {
            const elemento = document.querySelector(`#vehiculo-${veh.id}`);
            if (elemento) {
                elemento.querySelector('.placa-vehiculo').textContent = original.placa;
            }
        }
    });

    // Restaurar documentos
    if (cambiosDetectados.documentos.arl) {
        const inputArl = document.querySelector('input[name="arl_documento"]');
        if (inputArl) {
            inputArl.value = '';
        }
    }
    if (cambiosDetectados.documentos.pasocial) {
        const inputPasocial = document.querySelector('input[name="pasocial_documento"]');
        if (inputPasocial) {
            inputPasocial.value = '';
        }
    }

    // Limpiar el objeto de cambios
    cambiosDetectados = {
        colaboradores: { nuevos: [], modificados: [], eliminados: [] },
        vehiculos: { nuevos: [], modificados: [], eliminados: [] },
        documentos: { arl: false, pasocial: false }
    };

    // Ocultar el modal
    document.getElementById('confirmacionCambiosModal').classList.add('hidden');
    document.getElementById('confirmacionCambiosModal').classList.remove('flex');
}

function confirmarCambios() {
    // Ocultar el modal
    document.getElementById('confirmacionCambiosModal').classList.add('hidden');
    document.getElementById('confirmacionCambiosModal').classList.remove('flex');
    
    // Proceder con el guardado de los cambios
    guardarCambios();
}

// Modificar la función de guardar para que primero muestre la confirmación
function guardarSolicitud() {
    // Detectar cambios
    detectarCambios();
    
    // Mostrar el modal de confirmación
    mostrarConfirmacionCambios();
}

// Función para mostrar el modal de confirmación de cambios
function mostrarModalConfirmacionCambios(cambios) {
    // Limpiar listas anteriores
    document.getElementById('listaNuevosColaboradores').innerHTML = '';
    document.getElementById('listaModificadosColaboradores').innerHTML = '';
    document.getElementById('listaEliminadosColaboradores').innerHTML = '';
    document.getElementById('listaNuevosVehiculos').innerHTML = '';
    document.getElementById('listaModificadosVehiculos').innerHTML = '';
    document.getElementById('listaEliminadosVehiculos').innerHTML = '';
    document.getElementById('listaCambiosDocumentos').innerHTML = '';

    // Mostrar/ocultar secciones según haya cambios
    document.getElementById('cambiosColaboradores').style.display = 
        (cambios.colaboradores.nuevos.length + cambios.colaboradores.modificados.length + cambios.colaboradores.eliminados.length) > 0 ? 'block' : 'none';
    document.getElementById('cambiosVehiculos').style.display = 
        (cambios.vehiculos.nuevos.length + cambios.vehiculos.modificados.length + cambios.vehiculos.eliminados.length) > 0 ? 'block' : 'none';
    document.getElementById('cambiosDocumentos').style.display = 
        (cambios.documentos.arl || cambios.documentos.pasocial) ? 'block' : 'none';

    // Agregar colaboradores nuevos
    cambios.colaboradores.nuevos.forEach(col => {
        const item = document.createElement('div');
        item.className = 'list-group-item d-flex justify-content-between align-items-center';
        item.innerHTML = `
            ${col.nombre} (Cédula: ${col.cedula})
            <button class="btn btn-sm btn-outline-danger deshacer-cambio" data-tipo="colaborador" data-id="${col.cedula}">
                <i class="fas fa-undo"></i> Deshacer
            </button>
        `;
        document.getElementById('listaNuevosColaboradores').appendChild(item);
    });

    // Agregar colaboradores modificados
    cambios.colaboradores.modificados.forEach(col => {
        const item = document.createElement('div');
        item.className = 'list-group-item d-flex justify-content-between align-items-center';
        item.innerHTML = `
            ${col.nombre} (Cédula: ${col.cedula})
            <button class="btn btn-sm btn-outline-danger deshacer-cambio" data-tipo="colaborador" data-id="${col.cedula}">
                <i class="fas fa-undo"></i> Deshacer
            </button>
        `;
        document.getElementById('listaModificadosColaboradores').appendChild(item);
    });

    // Agregar colaboradores eliminados
    cambios.colaboradores.eliminados.forEach(col => {
        const item = document.createElement('div');
        item.className = 'list-group-item d-flex justify-content-between align-items-center';
        item.innerHTML = `
            ${col.nombre} (Cédula: ${col.cedula})
            <button class="btn btn-sm btn-outline-success deshacer-cambio" data-tipo="colaborador" data-id="${col.cedula}">
                <i class="fas fa-undo"></i> Restaurar
            </button>
        `;
        document.getElementById('listaEliminadosColaboradores').appendChild(item);
    });

    // Agregar vehículos nuevos
    cambios.vehiculos.nuevos.forEach(veh => {
        const item = document.createElement('div');
        item.className = 'list-group-item d-flex justify-content-between align-items-center';
        item.innerHTML = `
            Placa: ${veh.matricula}
            <button class="btn btn-sm btn-outline-danger deshacer-cambio" data-tipo="vehiculo" data-id="${veh.matricula}">
                <i class="fas fa-undo"></i> Deshacer
            </button>
        `;
        document.getElementById('listaNuevosVehiculos').appendChild(item);
    });

    // Agregar vehículos modificados
    cambios.vehiculos.modificados.forEach(veh => {
        const item = document.createElement('div');
        item.className = 'list-group-item d-flex justify-content-between align-items-center';
        item.innerHTML = `
            Placa: ${veh.matricula}
            <button class="btn btn-sm btn-outline-danger deshacer-cambio" data-tipo="vehiculo" data-id="${veh.matricula}">
                <i class="fas fa-undo"></i> Deshacer
            </button>
        `;
        document.getElementById('listaModificadosVehiculos').appendChild(item);
    });

    // Agregar vehículos eliminados
    cambios.vehiculos.eliminados.forEach(veh => {
        const item = document.createElement('div');
        item.className = 'list-group-item d-flex justify-content-between align-items-center';
        item.innerHTML = `
            Placa: ${veh.matricula}
            <button class="btn btn-sm btn-outline-success deshacer-cambio" data-tipo="vehiculo" data-id="${veh.matricula}">
                <i class="fas fa-undo"></i> Restaurar
            </button>
        `;
        document.getElementById('listaEliminadosVehiculos').appendChild(item);
    });

    // Agregar cambios en documentos
    if (cambios.documentos.arl) {
        const item = document.createElement('div');
        item.className = 'list-group-item d-flex justify-content-between align-items-center';
        item.innerHTML = `
            Documento ARL
            <button class="btn btn-sm btn-outline-danger deshacer-cambio" data-tipo="documento" data-id="arl">
                <i class="fas fa-undo"></i> Deshacer
            </button>
        `;
        document.getElementById('listaCambiosDocumentos').appendChild(item);
    }
    if (cambios.documentos.pasocial) {
        const item = document.createElement('div');
        item.className = 'list-group-item d-flex justify-content-between align-items-center';
        item.innerHTML = `
            Documento Pasocial
            <button class="btn btn-sm btn-outline-danger deshacer-cambio" data-tipo="documento" data-id="pasocial">
                <i class="fas fa-undo"></i> Deshacer
            </button>
        `;
        document.getElementById('listaCambiosDocumentos').appendChild(item);
    }

    // Mostrar el modal
    const modal = new bootstrap.Modal(document.getElementById('confirmarCambiosModal'));
    modal.show();

    // Manejar eventos de deshacer cambios
    document.querySelectorAll('.deshacer-cambio').forEach(btn => {
        btn.addEventListener('click', function() {
            const tipo = this.dataset.tipo;
            const id = this.dataset.id;
            
            // Eliminar el elemento del modal
            this.closest('.list-group-item').remove();
            
            // Deshacer el cambio en los datos
            if (tipo === 'colaborador') {
                if (this.closest('.nuevos-colaboradores')) {
                    cambios.colaboradores.nuevos = cambios.colaboradores.nuevos.filter(c => c.cedula !== id);
                } else if (this.closest('.modificados-colaboradores')) {
                    cambios.colaboradores.modificados = cambios.colaboradores.modificados.filter(c => c.cedula !== id);
                } else if (this.closest('.eliminados-colaboradores')) {
                    cambios.colaboradores.eliminados = cambios.colaboradores.eliminados.filter(c => c.cedula !== id);
                }
            } else if (tipo === 'vehiculo') {
                if (this.closest('.nuevos-vehiculos')) {
                    cambios.vehiculos.nuevos = cambios.vehiculos.nuevos.filter(v => v.matricula !== id);
                } else if (this.closest('.modificados-vehiculos')) {
                    cambios.vehiculos.modificados = cambios.vehiculos.modificados.filter(v => v.matricula !== id);
                } else if (this.closest('.eliminados-vehiculos')) {
                    cambios.vehiculos.eliminados = cambios.vehiculos.eliminados.filter(v => v.matricula !== id);
                }
            } else if (tipo === 'documento') {
                if (id === 'arl') cambios.documentos.arl = false;
                else if (id === 'pasocial') cambios.documentos.pasocial = false;
            }

            // Ocultar secciones vacías
            if (cambios.colaboradores.nuevos.length + cambios.colaboradores.modificados.length + cambios.colaboradores.eliminados.length === 0) {
                document.getElementById('cambiosColaboradores').style.display = 'none';
            }
            if (cambios.vehiculos.nuevos.length + cambios.vehiculos.modificados.length + cambios.vehiculos.eliminados.length === 0) {
                document.getElementById('cambiosVehiculos').style.display = 'none';
            }
            if (!cambios.documentos.arl && !cambios.documentos.pasocial) {
                document.getElementById('cambiosDocumentos').style.display = 'none';
            }
        });
    });

    // Manejar confirmación de cambios
    document.getElementById('confirmarCambios').addEventListener('click', function() {
        // Verificar si hay cambios restantes
        const hayCambios = 
            cambios.colaboradores.nuevos.length > 0 ||
            cambios.colaboradores.modificados.length > 0 ||
            cambios.colaboradores.eliminados.length > 0 ||
            cambios.vehiculos.nuevos.length > 0 ||
            cambios.vehiculos.modificados.length > 0 ||
            cambios.vehiculos.eliminados.length > 0 ||
            cambios.documentos.arl ||
            cambios.documentos.pasocial;

        if (hayCambios) {
            // Cerrar el modal
            bootstrap.Modal.getInstance(document.getElementById('confirmarCambiosModal')).hide();
            // Enviar los cambios al servidor
            enviarCambiosAlServidor(cambios);
        } else {
            alert('No hay cambios para confirmar. Por favor, realice cambios antes de guardar.');
        }
    });
}

// Función para enviar cambios al servidor
async function enviarCambiosAlServidor(cambios) {
    try {
        const formData = new FormData(document.getElementById('formularioSolicitud'));
        formData.append('cambios', JSON.stringify(cambios));
        
        const response = await fetch(`/actualizar-solicitud/${solicitudId}`, {
            method: 'POST',
            body: formData
        });

        if (response.ok) {
            const result = await response.json();
            if (result.success) {
                alert('Cambios guardados correctamente');
                window.location.reload();
            } else {
                alert('Error al guardar los cambios: ' + result.message);
            }
        } else {
            throw new Error('Error en la respuesta del servidor');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error al guardar los cambios. Por favor, intente nuevamente.');
    }
}

// Funciones de formateo
function formatearNombre(nombre) {
    if (!nombre) return '';
    return nombre
        .trim()
        .split(' ')
        .map(palabra => palabra.charAt(0).toUpperCase() + palabra.slice(1).toLowerCase())
        .join(' ');
}

function formatearCedula(cedula) {
    if (!cedula) return '';
    return cedula.trim().replace(/\s+/g, '');
}

function formatearPlaca(placa) {
    if (!placa) return '';
    return placa
        .trim()
        .replace(/\s+/g, ' ')
        .replace(/\s*-\s*/g, ' - ');
}

// Función para formatear datos de colaborador
function formatearDatosColaborador(colaborador) {
    return {
        ...colaborador,
        nombre: formatearNombre(colaborador.nombre),
        cedula: formatearCedula(colaborador.cedula)
    };
}

// Función para formatear datos de vehículo
function formatearDatosVehiculo(vehiculo) {
    return {
        ...vehiculo,
        matricula: formatearPlaca(vehiculo.matricula)
    };
}

// Modificar la función de agregar colaborador
function agregarColaborador() {
    const nombre = document.getElementById('nombreColaborador').value;
    const cedula = document.getElementById('cedulaColaborador').value;
    const cargo = document.getElementById('cargoColaborador').value;
    const eps = document.getElementById('epsColaborador').value;
    const arl = document.getElementById('arlColaborador').value;
    const foto = document.getElementById('fotoColaborador').files[0];

    if (!nombre || !cedula || !cargo || !eps || !arl || !foto) {
        alert('Por favor, complete todos los campos y suba una foto');
        return;
    }

    const colaboradorFormateado = formatearDatosColaborador({
        nombre,
        cedula,
        cargo,
        eps,
        arl,
        foto
    });

    const colaboradoresContainer = document.getElementById('colaboradoresContainer');
    const colaboradorDiv = document.createElement('div');
    colaboradorDiv.className = 'colaborador-item bg-white p-4 rounded-lg shadow mb-4';
    colaboradorDiv.innerHTML = `
        <div class="flex justify-between items-start mb-2">
            <div>
                <h3 class="text-lg font-semibold">${colaboradorFormateado.nombre}</h3>
                <p class="text-gray-600">Cédula: ${colaboradorFormateado.cedula}</p>
                <p class="text-gray-600">Cargo: ${colaboradorFormateado.cargo}</p>
                <p class="text-gray-600">EPS: ${colaboradorFormateado.eps}</p>
                <p class="text-gray-600">ARL: ${colaboradorFormateado.arl}</p>
            </div>
            <div class="flex space-x-2">
                <button onclick="editarColaborador(this)" class="text-blue-500 hover:text-blue-700">
                    <i class="fas fa-edit"></i>
                </button>
                <button onclick="eliminarColaborador(this)" class="text-red-500 hover:text-red-700">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
        <div class="mt-2">
            <img src="${URL.createObjectURL(foto)}" alt="Foto del colaborador" class="w-32 h-32 object-cover rounded">
        </div>
        <input type="hidden" name="colaboradores[]" value='${JSON.stringify(colaboradorFormateado)}'>
    `;
    colaboradoresContainer.appendChild(colaboradorDiv);
    limpiarFormularioColaborador();
}

// Modificar la función de agregar vehículo
function agregarVehiculo() {
    const matricula = document.getElementById('matriculaVehiculo').value;
    const marca = document.getElementById('marcaVehiculo').value;
    const modelo = document.getElementById('modeloVehiculo').value;
    const color = document.getElementById('colorVehiculo').value;
    const foto = document.getElementById('fotoVehiculo').files[0];

    if (!matricula || !marca || !modelo || !color || !foto) {
        alert('Por favor, complete todos los campos y suba una foto');
        return;
    }

    const vehiculoFormateado = formatearDatosVehiculo({
        matricula,
        marca,
        modelo,
        color,
        foto
    });

    const vehiculosContainer = document.getElementById('vehiculosContainer');
    const vehiculoDiv = document.createElement('div');
    vehiculoDiv.className = 'vehiculo-item bg-white p-4 rounded-lg shadow mb-4';
    vehiculoDiv.innerHTML = `
        <div class="flex justify-between items-start mb-2">
            <div>
                <h3 class="text-lg font-semibold">Placa: ${vehiculoFormateado.matricula}</h3>
                <p class="text-gray-600">Marca: ${vehiculoFormateado.marca}</p>
                <p class="text-gray-600">Modelo: ${vehiculoFormateado.modelo}</p>
                <p class="text-gray-600">Color: ${vehiculoFormateado.color}</p>
            </div>
            <div class="flex space-x-2">
                <button onclick="editarVehiculo(this)" class="text-blue-500 hover:text-blue-700">
                    <i class="fas fa-edit"></i>
                </button>
                <button onclick="eliminarVehiculo(this)" class="text-red-500 hover:text-red-700">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
        <div class="mt-2">
            <img src="${URL.createObjectURL(foto)}" alt="Foto del vehículo" class="w-32 h-32 object-cover rounded">
        </div>
        <input type="hidden" name="vehiculos[]" value='${JSON.stringify(vehiculoFormateado)}'>
    `;
    vehiculosContainer.appendChild(vehiculoDiv);
    limpiarFormularioVehiculo();
}

// Modificar la función de editar colaborador
function editarColaborador(button) {
    const colaboradorDiv = button.closest('.colaborador-item');
    const colaborador = JSON.parse(colaboradorDiv.querySelector('input[type="hidden"]').value);
    
    document.getElementById('nombreColaborador').value = colaborador.nombre;
    document.getElementById('cedulaColaborador').value = colaborador.cedula;
    document.getElementById('cargoColaborador').value = colaborador.cargo;
    document.getElementById('epsColaborador').value = colaborador.eps;
    document.getElementById('arlColaborador').value = colaborador.arl;
    
    colaboradorDiv.remove();
}

// Modificar la función de editar vehículo
function editarVehiculo(button) {
    const vehiculoDiv = button.closest('.vehiculo-item');
    const vehiculo = JSON.parse(vehiculoDiv.querySelector('input[type="hidden"]').value);
    
    document.getElementById('matriculaVehiculo').value = vehiculo.matricula;
    document.getElementById('marcaVehiculo').value = vehiculo.marca;
    document.getElementById('modeloVehiculo').value = vehiculo.modelo;
    document.getElementById('colorVehiculo').value = vehiculo.color;
    
    vehiculoDiv.remove();
}

</script>
  <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
  <script src="/js/socket-manager.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/browser-image-compression@2.0.2/dist/browser-image-compression.js"></script>
  
  <script>
    // Función para convertir imagen a WebP
    async function convertImageToWebP(file) {
      try {
        const options = {
          maxSizeMB: 1,
          maxWidthOrHeight: 1920,
          useWebWorker: true,
          fileType: 'image/webp'
        };
        
        const compressedFile = await imageCompression(file, options);
        return new File([compressedFile], file.name.replace(/\.[^/.]+$/, '.webp'), {
          type: 'image/webp',
          lastModified: file.lastModified
        });
      } catch (error) {
        console.error('Error al convertir la imagen:', error);
        throw error;
      }
    }

    // Función para procesar todos los inputs de archivo
    async function processFileInputs() {
      const fileInputs = document.querySelectorAll('input[type="file"]');
      
      for (const input of fileInputs) {
        input.addEventListener('change', async (e) => {
          const files = Array.from(e.target.files);
          const convertedFiles = [];
          
          for (const file of files) {
            if (file.type.startsWith('image/')) {
              try {
                const webpFile = await convertImageToWebP(file);
                convertedFiles.push(webpFile);
              } catch (error) {
                console.error('Error al procesar archivo:', file.name, error);
                convertedFiles.push(file); // Mantener el archivo original si falla la conversión
              }
            } else {
              convertedFiles.push(file); // Mantener archivos que no son imágenes
            }
          }
          
          // Crear un nuevo DataTransfer para actualizar los archivos
          const dataTransfer = new DataTransfer();
          convertedFiles.forEach(file => dataTransfer.items.add(file));
          input.files = dataTransfer.files;
        });
      }
    }

    // Inicializar el procesamiento de archivos cuando el documento esté listo
    document.addEventListener('DOMContentLoaded', () => {
      processFileInputs();
    });
  </script>
</body>
</html>

<% function getEstadoClass(estado) {
  if (estado === 'aprobado por sst' || estado === 'pendiente ingreso') return 'text-yellow-500 font-semibold';
  if (estado === 'en labor') return 'text-blue-500 font-semibold';
  if (estado === 'labor detenida') return 'text-gray-500 font-semibold';
  if (estado === 'pendiente ingreso - vencido') return 'text-red-500 font-semibold';
  if (estado === 'en labor - vencida') return 'text-red-600 font-semibold';
  if (estado === 'negada') return 'text-red-700 font-semibold';
  return 'text-green-500 font-semibold';
} %>