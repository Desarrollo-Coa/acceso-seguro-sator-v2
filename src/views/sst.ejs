<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  

  <style>
    /* Estilos generales */
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f9fafb;
      color: #1a202c;
    }

    /* Estilos adicionales */
    .vencido {
      color: #e53e3e; /* Color rojo para elementos vencidos */
      font-weight: bold;
    }
    
    .vigente {
      color: #38a169; /* Color verde para elementos vigentes */
      font-weight: bold;
    }
    
    .no-definido {
      color: #718096; /* Color gris para elementos no definidos */
      font-style: italic;
    }
    
    .colaborador-inhabilitado {
      background-color: #ffe6e6; /* Fondo rojo claro para colaboradores inhabilitados */
    }
    
    .colaborador-habilitado {
      background-color: #f0fff4; /* Fondo verde claro para colaboradores habilitados */
    }

    nav {
      display: flex;
      gap: 20px;
    }

    .notification-badge {
      position: absolute;
      top: -8px;
      right: -8px;
      background-color: red;
      color: white;
      border-radius: 50%;
      width: 18px;
      height: 18px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 11px;
      font-weight: bold;
    }
    
    .status-icon-sent { color: #a1a1a1; }
    .status-icon-delivered { color: #d1d1d1; }
    .status-icon-read { color: #53bdeb; }
    .status-icon-error { color: #f44336; }
    .chat-message { position: relative; }

    /* Estilos para optimizar diseño y tabla fija */
    body {
      background-color: #f4f6f9;
      font-family: 'Arial', sans-serif;
    }

    .container {
      max-width: 1400px;
    }

    h1 {
      font-size: 2rem;
      color: #2d3748;
      margin-bottom: 1.5rem;
    }

    .table-container {
      max-height: 500px;
      overflow-y: auto;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      background-color: #fff;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .table thead th {
      position: sticky;
      top: 0;
      background-color: #2d3748;
      color: #fff;
      z-index: 10;
      padding: 12px;
      border-bottom: 2px solid #4a5568;
    }

    .table tbody tr:hover {
      background-color: #edf2f7;
    }

    .btn-sm {
      padding: 6px 12px;
      font-size: 0.875rem;
    }

    /* Estilos para el formulario de filtros */
    .filter-form {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      margin-bottom: 20px;
    }

    .filter-form .form-group {
      margin-bottom: 15px;
    }

    .filter-form label {
      font-weight: 600;
      color: #4a5568;
    }

    .filter-form input,
    .filter-form select {
      border-radius: 4px;
      border: 1px solid #e2e8f0;
      padding: 8px;
      width: 100%;
    }

    .filter-form button {
      background-color: #2d3748;
      color: #fff;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    .filter-form button:hover {
      background-color: #4a5568;
    }

    /* Estilos para el chat */
    .hover-bg-gray:hover {
      background-color: #e9ecef;
    }
    .cursor-pointer {
      cursor: pointer;
    }
    .contact-item.active {
      background-color: #e9ecef;
    }
    #chatModal textarea:focus {
      border-color: #80bdff;
      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
  </style>

  <script>
    // Guardar el ID del usuario SST para todo el sitio
    window.sstUserId = "<%= userId %>";
    
    console.log('✅ ID de usuario SST inicializado:', window.sstUserId);
    
    if (!window.sstUserId || window.sstUserId === 'undefined') {
      console.error('❌ ERROR: No se pudo obtener el ID de usuario SST');
    }
  </script>
  
  <!-- Meta tag para el ID del usuario SST como respaldo -->
  <meta name="sst-user-id" content="<%= userId %>" />
  
</head>
<body>
  <nav class="flex justify-between items-center p-4">
    <a class="text-lg font-semibold" href="#">Vista SST - <a href="/capacitacion/listado">Gestionar Capacitaciones</a></a>
    <div class="flex items-center space-x-4">
      <a class="text-lg hover:text-ga-gold transition-colors duration-200" href="/logout">Cerrar sesión</a>
    </div>
  </nav>

  <div class="container mt-5">
    <h1>Solicitudes</h1>

    <!-- Filtros de búsqueda -->
    <div class="mb-4 p-3 border rounded bg-light">
      <form id="formFiltro" class="row">
        <div class="form-group col-md-3">
          <label for="idSolicitud">ID Solicitud</label>
          <input type="text" class="form-control" id="idSolicitud" name="id" placeholder="ID">
          </div>
        <div class="form-group col-md-3">
          <label for="cedula">Cédula Colaborador</label>
          <input type="text" class="form-control" id="cedula" name="cedula" placeholder="Cédula">
          </div>
        <div class="form-group col-md-3">
          <label for="colaboradorId">ID Colaborador</label>
          <input type="text" class="form-control" id="colaboradorId" name="colaboradorId" placeholder="ID Colaborador">
          </div>
        <div class="form-group col-md-3">
          <label for="placa">Placa Vehículo</label>
          <input type="text" class="form-control" id="placa" name="placa" placeholder="Placa">
        </div>
        <div class="form-group col-md-3">
          <label for="vehiculoId">ID Vehículo</label>
          <input type="text" class="form-control" id="vehiculoId" name="vehiculoId" placeholder="ID Vehículo">
        </div>
        <div class="form-group col-md-3">
          <label for="interventor">Interventor</label>
          <input type="text" class="form-control" id="interventor" name="interventor" placeholder="Interventor">
        </div>
        <div class="form-group col-md-3">
          <label for="empresa">Empresa</label>
          <input type="text" class="form-control" id="empresa" name="empresa" placeholder="Empresa">
        </div>
        <div class="form-group col-md-3">
          <label for="nit">NIT</label>
          <input type="text" class="form-control" id="nit" name="nit" placeholder="NIT">
        </div>
        <div class="form-group col-md-3">
          <label for="estado">Estado</label>
          <select class="form-control" id="estado" name="estado">
              <option value="">Todos</option>
              <option value="pendiente">Pendiente</option>
            <option value="aprobada">Aprobada</option>
              <option value="negada">Negada</option>
            <option value="en labor">En Labor</option>
            <option value="labor detenida">Labor Detenida</option>
            </select>
          </div>
        <div class="form-group col-md-3">
          <label for="lugar">Lugar</label>
          <select class="form-control" id="lugar" name="lugar">
            <option value="">Todos</option>
            <% lugares.forEach(lugar => { %>
              <option value="<%= lugar.nombre_lugar %>"><%= lugar.nombre_lugar %></option>
            <% }); %>
          </select>
        </div>
        <div class="form-group col-md-3">
          <label for="fechaInicio">Fecha Inicio</label>
          <input type="date" class="form-control" id="fechaInicio" name="fechaInicio">
          </div>
        <div class="form-group col-md-3">
          <label for="fechaFin">Fecha Fin</label>
          <input type="date" class="form-control" id="fechaFin" name="fechaFin">
          </div>
        <div class="form-group col-md-3">
          <label for="vigencia">Vigencia</label>
          <select class="form-control" id="vigencia" name="vigencia">
            <option value="">Todas</option>
            <option value="Vigente">Vigente</option>
            <option value="Vencida">Vencida</option>
          </select>
          </div>
        <div class="form-group col-md-12 mt-3">
          <button type="submit" class="btn btn-primary">Filtrar</button>
          <button type="button" id="limpiarFiltros" class="btn btn-secondary">Limpiar Filtros</button>
        </div>
      </form>
    </div>

    <div class="table-container">
      <table class="table table-bordered">
        <thead>
          <tr>
            <th>ID</th>
            <th>Empresa</th>
            <th>NIT</th>
            <th>Inicio de Obra</th>
            <th>Fin de Obra</th>
            <th>Días Solicitados</th>
            <th>Lugar</th>
            <th>Labor</th>
            <th>Interventor</th>
            <th>Documentos</th>
            <th>Colaboradores</th>
            <th>Acción</th>
            <th>Mensajes</th>
          </tr>
        </thead>
        <tbody id="tablaSolicitudes">
          <% solicitud.forEach(solicitud => { %>
              <tr class="solicitud-item" data-id="<%= solicitud.id %>">
                  <td><%= solicitud.id %></td>
                  <td><%= solicitud.empresa %></td>
                  <td><%= solicitud.nit %></td>
                  <td><%= solicitud.inicio_obra %></td>
                  <td><%= solicitud.fin_obra %></td>
                  <td><%= solicitud.dias_trabajo %></td>
                  <td><%= solicitud.lugar %></td>
                  <td><%= solicitud.labor %></td>
                  <td><%= solicitud.interventor %></td>
                  <td>
                    <% const doc = solicitud_url_download.find(d => d.solicitud_id === solicitud.id); %>
                    <% if (doc) { %>
                      <button class="btn btn-success btn-sm descargar-btn" data-url="<%= doc.url %>">Descargar Documentos</button>
                    <% } else { %>
                      <button class="btn btn-info btn-sm generar-btn" data-id="<%= solicitud.id %>">Generar Documentos</button>
                    <% } %>
                  </td>
                  <td>
                    <button class="btn btn-info btn-sm" onclick="verColaboradores('<%= solicitud.id %>')">Ver Colaboradores</button>
                  </td>
                  <td>
                    <% if (solicitud.estado === 'pendiente') { %>
                      <form action="/aprobar-solicitud/<%= solicitud.id %>" method="POST" style="display:inline;">
                        <button type="submit" class="btn btn-success btn-sm" id="aprobarBtn-<%= solicitud.id %>">Aprobar</button>
                      </form>
                      <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#modalNegar" data-id="<%= solicitud.id %>" data-empresa="<%= solicitud.empresa %>" data-nit="<%= solicitud.nit %>">
                        Negar
                      </button>
                    <% } else { %>
                      <span class="badge <%= ['negada'].includes(solicitud.estado) ? 'badge-danger' : 'badge-success' %>">
                        <%= ['negada'].includes(solicitud.estado) ? 'Negada' : 'Aprobado' %>
                      </span>
                    <% } %>
                  </td>
                  <td>
                    <button class="btn btn-primary btn-sm ml-2 open-chat-btn" data-solicitud-id="<%= solicitud.id %>">
                      Conversar <span class="badge badge-light unread-count" data-solicitud-id="<%= solicitud.id %>">0</span>
                    </button>
                  </td>
              </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Modal para Negar Solicitud -->
  <div class="modal fade" id="modalNegar" tabindex="-1" role="dialog" aria-labelledby="modalNegarLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modalNegarLabel">Negar Solicitud</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="negarForm">
            <div class="form-group">
              <label for="empresa">Empresa:</label>
              <input type="text" class="form-control" id="empresa" disabled>
            </div>
            <div class="form-group">
              <label for="nit">NIT:</label>
              <input type="text" class="form-control" id="nit" disabled>
            </div>
            <div class="form-group">
              <label for="comentario">Comentario:</label>
              <textarea class="form-control" id="comentario" name="comentario" rows="4"></textarea>
            </div>
            <button type="submit" class="btn btn-danger">Negar Solicitud</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para Ver Colaboradores y Vehículos -->
  <div class="modal fade" id="colaboradoresModal" tabindex="-1" role="dialog" aria-labelledby="colaboradoresModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="colaboradoresModalLabel">Gestión de Colaboradores y Vehículos</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <p><strong>ID de la Solicitud:</strong> <span id="colaboradoresId"></span></p>
          <p><strong>Empresa:</strong> <span id="colaboradoresEmpresa"></span></p>
          <p><strong>Contratista:</strong> <span id="colaboradoresContratista"></span></p>
          
          <!-- Filtro de tipo (Colaboradores/Vehículos) -->
          <div class="mb-3">
            <label for="filtroTipo" class="form-label">Tipo:</label>
            <select class="form-select" id="filtroTipo">
              <option value="colaboradores">Colaboradores</option>
              <option value="vehiculos">Vehículos</option>
            </select>
          </div>

          <!-- Filtro de estado (solo para colaboradores) -->
          <div class="mb-3" id="filtroEstadoContainer">
            <label for="filtroEstado" class="form-label">Filtrar por Estado:</label>
            <select class="form-select" id="filtroEstado">
              <option value="todos">Todos</option>
              <option value="habilitados">Habilitados</option>
              <option value="inhabilitados">Inhabilitados</option>
            </select>
          </div>

          <!-- Tabla de Colaboradores -->
          <div id="tablaColaboradoresContainer">
            <div class="table-responsive">
              <table class="table table-bordered">
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Cédula</th>
                    <th>Estado</th>
                    <th>Curso SISO</th>
                    <th>Plantilla SS</th>
                    <th>Definir Plantilla SS</th>
                    <th>Historial</th>
                  </tr>
                </thead>
                <tbody id="tablaColaboradores"></tbody>
              </table>
            </div>
          </div>

          <!-- Tabla de Vehículos -->
          <div id="tablaVehiculosContainer" style="display: none;">
            <div class="table-responsive">
              <table class="table table-bordered">
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Placa</th>
                    <th>Estado</th>
                    <th>SOAT</th>
                    <th>Tecnomecánica</th>
                    <th>Licencia Conducción</th>
                    <th>Licencia Tránsito</th>
                  </tr>
                </thead>
                <tbody id="tablaVehiculos"></tbody>
              </table>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para Definir Vigencia de Documentos de Vehículo -->
  <div class="modal fade" id="definirVigenciaModal" tabindex="-1" role="dialog" aria-labelledby="definirVigenciaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="definirVigenciaModalLabel">Definir Vigencia</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="vigenciaForm">
            <input type="hidden" id="vehiculoId" name="vehiculoId">
            <input type="hidden" id="solicitudId" name="solicitudId">
            <input type="hidden" id="tipoDocumento" name="tipoDocumento">
            <input type="hidden" id="documentoId" name="documentoId">
            
            <div class="form-group">
              <label for="fechaInicio">Fecha de Inicio:</label>
              <input type="date" class="form-control" id="fechaInicio" name="fechaInicio" required>
            </div>
            
            <div class="form-group">
              <label for="fechaFin">Fecha de Fin:</label>
              <input type="date" class="form-control" id="fechaFin" name="fechaFin" required>
            </div>
            
            <div class="alert alert-warning" id="validacionFechas" style="display: none;">
              La fecha de fin debe ser posterior a la fecha de inicio.
            </div>
            
            <button type="submit" class="btn btn-primary">Guardar</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para Validar Documentos -->
  <div class="modal fade" id="validarDocumentoModal" tabindex="-1" role="dialog" aria-labelledby="validarDocumentoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="validarDocumentoModalLabel">Validar Documento</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="validarForm">
            <input type="hidden" id="vehiculoIdValidar">
            <input type="hidden" id="solicitudIdValidar">
            <input type="hidden" id="tipoDocumentoValidar">
            <div class="mb-3">
              <label class="form-label">Estado del Documento:</label>
              <div class="form-check">
                <input class="form-check-input" type="radio" name="estadoDocumento" id="estadoCorrecto" value="correcto" checked>
                <label class="form-check-label" for="estadoCorrecto">
                  Correcto
                </label>
              </div>
              <div class="form-check">
                <input class="form-check-input" type="radio" name="estadoDocumento" id="estadoIncorrecto" value="incorrecto">
                <label class="form-check-label" for="estadoIncorrecto">
                  Incorrecto
                </label>
              </div>
            </div>
            <div class="mb-3">
              <label for="comentarioValidacion" class="form-label">Comentario:</label>
              <textarea class="form-control" id="comentarioValidacion" rows="3"></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Guardar</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de Chat para SST (Debe ser eliminado) -->
  <div id="chatModalSST" class="fixed inset-0 z-50 hidden bg-gray-900 bg-opacity-50 flex justify-center items-center">
    <div class="bg-white w-full max-w-4xl h-3/4 rounded-lg shadow-lg overflow-hidden flex flex-col">
      <div class="bg-gray-800 text-white px-4 py-3 flex justify-between items-center">
        <h5 class="text-lg font-semibold">Chat SST - Solicitud <span id="chatSolicitudIdSST"></span></h5>
        <button type="button" onclick="closeChatModalSST()" class="text-white hover:text-yellow-500">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="flex-1 p-4 overflow-y-auto" id="chatMessagesSST"></div>
      <div class="border-t border-gray-200 p-4">
        <div class="flex space-x-2">
          <textarea id="chatInputSST" class="flex-1 p-2 border border-gray-300 rounded-md resize-none" rows="2" placeholder="Escribe un mensaje..."></textarea>
          <button onclick="sendMessageSST()" class="bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-yellow-500">Enviar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para Definir Plantilla SS -->
  <div class="modal fade" id="plantillaSSModal" tabindex="-1" role="dialog" aria-labelledby="plantillaSSModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="plantillaSSModalLabel">Definir Plantilla de Seguridad Social</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="plantillaSSForm">
            <input type="hidden" id="colaboradorId" name="colaboradorId">
            <input type="hidden" id="ssolicitudId" name="ssolicitudId">
            <input type="hidden" id="plantillaId" name="plantillaId">
            
            <div class="form-group">
              <label for="fechaInicioSS">Fecha de Inicio:</label>
              <input type="date" class="form-control" id="fechaInicioSS" name="fechaInicioSS" required>
            </div>
            
            <div class="form-group">
              <label for="fechaFinSS">Fecha de Fin:</label>
              <input type="date" class="form-control" id="fechaFinSS" name="fechaFinSS" required>
            </div>
            
            <div class="alert alert-warning" id="validacionFechasSS" style="display: none;">
              La fecha de fin debe ser posterior a la fecha de inicio.
            </div>
            
            <button type="submit" class="btn btn-primary">Guardar</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para Historial de Cursos -->
  <div class="modal fade" id="historialModal" tabindex="-1" role="dialog" aria-labelledby="historialModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="historialModalLabel">Historial de Cursos</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <table class="table table-bordered">
            <thead>
              <tr>
                <th>Curso</th>
                <th>Estado</th>
                <th>Puntaje</th>
                <th>Fecha de Vencimiento</th>
              </tr>
            </thead>
            <tbody id="tablaHistorial"></tbody>
          </table>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de Chat de Soporte -->
  <div id="chatModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="chatModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
      <div class="modal-content">
        <!-- Header del chat -->
        <div class="modal-header bg-ga-navy text-white">
          <h5 class="modal-title" id="chatModalLabel">Chat de Soporte</h5>
          <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close" onclick="closeChatModal()">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <!-- Cuerpo del chat -->
        <div class="modal-body p-0">
          <div class="d-flex" style="height: 60vh;">
            <!-- Sección de contactos -->
            <div class="bg-light border-right" style="width: 30%;">
              <div class="p-3 font-weight-bold border-bottom">Contactos</div>
              <div id="contactsList" class="overflow-auto p-2" style="height: calc(60vh - 56px);">
                <!-- Aquí se cargarán los contactos -->
                <div class="contact-item p-2 rounded mb-1 cursor-pointer hover-bg-gray" data-type="contratista">
                  <div class="font-weight-medium">Contratista</div>
                  <div class="small text-muted contratista-name">Cargando...</div>
                </div>
                <div class="contact-item p-2 rounded mb-1 cursor-pointer hover-bg-gray" data-type="soporte">
                  <div class="font-weight-medium">Soporte</div>
                  <div class="small text-muted">Equipo de soporte</div>
                </div>
              </div>
            </div>
            
            <!-- Área de conversación -->
            <div style="width: 70%;" class="d-flex flex-column">
              <div class="bg-light border-bottom p-2 font-weight-bold" id="chatCurrentContact">Soporte Técnico</div>
              <div id="chatMessages" class="flex-grow-1 p-3 overflow-auto" style="height: calc(60vh - 140px);"></div>
              <!-- Área de escritura -->
              <div id="chatInputContainer" class="border-top p-3">
                <div class="d-flex">
                  <textarea id="chatInput" class="form-control mr-2" rows="2" placeholder="Escribe un mensaje..."></textarea>
                  <button onclick="sendMessage()" class="btn btn-primary align-self-end">Enviar</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    // Nueva función para filtrar usando la API del interventor
 
    // Función para filtrar solicitudes
    async function filtrarSolicitudes(event) {
      if (event) event.preventDefault();

      try {
        // Obtener valores de los filtros
  const filtros = {
    id: $('#filtroId').val(),
    empresa: $('#filtroEmpresa').val(),
    nit: $('#filtroNit').val(),
    estado: $('#filtroEstadoSolicitud').val(),
    fechaInicio: $('#filtroFechaInicio').val(),
    fechaFin: $('#filtroFechaFin').val(),
          lugar: $('#filtroLugar').val(),
          cedula: $('#filtroCedula').val(),
          placa: $('#filtroPlaca').val(),
          interventor: $('#filtroInterventor').val(),
          vigencia: $('#filtroVigencia').val()
        };
        
        // Mostrar indicador de carga
    Swal.fire({
          title: 'Filtrando...',
      allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          }
    });

        console.log('Filtrando con los siguientes criterios:', filtros);
        
        // Realizar petición al servidor
    const response = await fetch('/api/filtrar-solicitudes-sst', {
      method: 'POST',
      headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(filtros)
        });
        
          Swal.close();

    if (!response.ok) {
          throw new Error(`Error HTTP: ${response.status}`);
    }

    const solicitudes = await response.json();

        // Actualizar la tabla con los resultados
        actualizarTablaSolicitudes(solicitudes);
  } catch (error) {
    console.error('[SST] Error al filtrar solicitudes:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'No se pudieron filtrar las solicitudes.'
    });
  }
    }

    // Asignar el manejador de eventos al formulario
    $('#filterForm').on('submit', filtrarSolicitudes);

    // Función para actualizar la tabla con los datos filtrados

    function actualizarTablaSolicitudes(solicitudes) {
    const tbody = $('#tablaSolicitudes');
    tbody.empty();

    if (solicitudes.length === 0) {
        Swal.fire({
            icon: 'info',
            title: 'Sin resultados',
            text: 'No se encontraron solicitudes con los criterios especificados'
        });
        return;
    }

    solicitudes.forEach(solicitud => {
        const estadoClass = solicitud.solicitud_estado === 'negada' ? 'badge-danger' : 'badge-success';
        const estadoTexto = solicitud.solicitud_estado === 'negada' ? 'Negada' : 'Aprobado';

        const row = `
          <tr class="solicitud-item" data-id="${solicitud.solicitud_id}">
            <td>${solicitud.solicitud_id}</td>
            <td>${solicitud.empresa}</td>
            <td>${solicitud.nit}</td>
            <td>${solicitud.inicio_obra}</td>
            <td>${solicitud.fin_obra}</td>
            <td>${solicitud.dias_trabajo || '-'}</td>
            <td>${solicitud.lugar}</td>
            <td>${solicitud.labor || '-'}</td>
            <td>${solicitud.interventor}</td>
            <td>
              ${solicitud.url_documento ? 
                `<button class="btn btn-success btn-sm descargar-btn" data-url="${solicitud.url_documento}">Descargar Documentos</button>` : 
                `<button class="btn btn-info btn-sm generar-btn" data-id="${solicitud.solicitud_id}">Generar Documentos</button>`}
            </td>
            <td>
              <button class="btn btn-info btn-sm" onclick="verColaboradores('${solicitud.solicitud_id}')">Ver Colaboradores</button>
            </td>
            <td>
              ${solicitud.solicitud_estado === 'pendiente' ? `
                <form action="/aprobar-solicitud/${solicitud.solicitud_id}" method="POST" style="display:inline;">
                  <button type="submit" class="btn btn-success btn-sm" id="aprobarBtn-${solicitud.solicitud_id}">Aprobar</button>
                </form>
                <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#modalNegar" 
                        data-id="${solicitud.solicitud_id}" data-empresa="${solicitud.empresa}" data-nit="${solicitud.nit}">
                  Negar
                </button>
              ` : `<span class="badge ${estadoClass}">${estadoTexto}</span>`}
            </td>
            <td>
              <button class="btn btn-primary btn-sm ml-2 open-chat-btn" data-solicitud-id="${solicitud.solicitud_id}">
                Conversar <span class="badge badge-light unread-count" data-solicitud-id="${solicitud.solicitud_id}">0</span>
              </button>
            </td>
          </tr>
        `;
        tbody.append(row);
    });

    // Reasignar eventos a los botones dinámicos
    $('.descargar-btn').off('click').on('click', function() {
        const url = $(this).data('url');
        descargarArchivo(url);
    });

    $('.generar-btn').off('click').on('click', function() {
        const id = $(this).data('id');
        generarDocumento(id);
    });

    // Reasignar eventos de chat
    $('.open-chat-btn').off('click').on('click', function() {
        const solicitudId = $(this).data('solicitud-id');
        openChatModalSST(solicitudId);
    });

    // Reinicializar los badges de notificación
    updateSSTNotificationBadges();
}
 // Modal para negar solicitud
$('#modalNegar').on('show.bs.modal', function(event) {
  const button = $(event.relatedTarget); // El botón que abrió el modal
  const id = button.data('id');
  const empresa = button.data('empresa');
  const nit = button.data('nit');
  const modal = $(this);

  // Rellenar los campos del modal
  modal.find('#empresa').val(empresa);
  modal.find('#nit').val(nit);
  modal.find('#comentario').val(''); // Limpiar el campo de comentario al abrir
  modal.find('#negarForm').data('solicitud-id', id); // Usar data en lugar de attr action
});

// Manejar el envío del formulario para negar la solicitud
$('#negarForm').on('submit', async function(e) {
  e.preventDefault(); // Evitar el envío por defecto del formulario

  const id = $(this).data('solicitud-id'); // Obtener el ID desde data
  const comentario = $('#comentario').val().trim();

  // Validar que haya un comentario
  if (!comentario) {
    Swal.fire({
      icon: 'warning',
      title: 'Advertencia',
      text: 'Por favor, ingrese un comentario para justificar la negación.',
      confirmButtonText: 'Aceptar'
    });
    return;
  }

  try {
    // Mostrar loading
    Swal.fire({
      title: 'Procesando...',
      text: 'Negando la solicitud',
      allowOutsideClick: false,
      didOpen: () => { Swal.showLoading(); }
    });

    // Enviar solicitud POST al backend
    const response = await fetch(`/negar-solicitud/${id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json' // Especificar que esperamos JSON
      },
      credentials: 'include', // Mantener cookies para autenticación
      body: JSON.stringify({ comentario })
    });

    const data = await response.json();

    if (response.ok && data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Éxito',
        text: data.message || 'Solicitud negada correctamente',
        confirmButtonText: 'Aceptar'
      });

      // Cerrar el modal
      $('#modalNegar').modal('hide');

      // Actualizar la fila en la tabla dinámicamente
      const $row = $(`tr.solicitud-item[data-id="${id}"]`);
      if ($row.length) {
        $row.find('td:nth-child(12)').html('<span class="badge badge-danger">Negada</span>');
        $row.find('.btn-danger, .btn-success').remove(); // Eliminar botones de acción
      } else {
        console.warn(`Fila con ID ${id} no encontrada en la tabla`);
      }
    } else {
      throw new Error(data.message || 'Error al negar la solicitud');
    }
  } catch (error) {
    console.error('[Frontend] Error al negar la solicitud:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'No se pudo negar la solicitud. Intente de nuevo.',
      confirmButtonText: 'Aceptar'
    });
  }
});
    // Descargar archivo
    function descargarArchivo(url) {
      Swal.fire({
        title: 'Descargando...',
        text: 'Por favor espera mientras se descarga el documento.',
        allowOutsideClick: false,
        didOpen: () => { Swal.showLoading(); }
      });
      window.open(url, '_blank');
      Swal.close();
    }

    // Generar documentos
    function generarDocumento(id) {
      Swal.fire({
        title: 'Generando...',
        text: 'Por favor espera mientras se genera el documento.',
        allowOutsideClick: false,
        didOpen: () => { Swal.showLoading(); }
      });
      fetch(`/descargar-solicitud/${id}`)
        .then(response => response.ok ? response.json() : Promise.reject('Error en la respuesta'))
        .then(data => {
          if (data.success) {
            window.open(data.url, '_blank');
            Swal.fire({ icon: 'success', title: 'Éxito', text: data.message || 'Documento generado correctamente' });
            const btnContainer = document.querySelector(`tr[data-id="${id}"] td:nth-child(10)`);
            if (btnContainer) {
              btnContainer.innerHTML = `<button class="btn btn-success btn-sm descargar-btn" data-url="${data.url}">Descargar Documentos</button>`;
              btnContainer.querySelector('.descargar-btn').addEventListener('click', function() { descargarArchivo(data.url); });
            }
          } else {
            throw new Error(data.error || 'Error al generar el documento');
          }
        })
        .catch(error => {
          Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'No se pudo generar el documento.' });
          console.error('Error al generar:', error);
        });
    }

    $('.descargar-btn').on('click', function() {
      const url = $(this).data('url');
      descargarArchivo(url);
    });

    $('.generar-btn').on('click', function() {
      const id = $(this).data('id');
      generarDocumento(id);
    });

    // Ver Colaboradores
    async function verColaboradores(solicitudId) {
    try {
        // Limpiar datos anteriores
        $('#tablaColaboradores').empty();
        $('#tablaVehiculos').empty();

        // Restablecer filtros
        $('#filtroTipo').val('colaboradores');
        $('#filtroEstado').val('todos');
        
        // Obtener datos del backend
      const response = await fetch(`/api/sst/colaboradores/${solicitudId}`);
        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }
      const data = await response.json();
        console.log('Datos recibidos para solicitud', solicitudId, data);

        // Actualizar información del modal
      $('#colaboradoresId').text(data.id);
      $('#colaboradoresEmpresa').text(data.empresa);
        $('#colaboradoresContratista').text(data.contratista);

        // Mostrar el modal
        $('#colaboradoresModal').modal('show');

        // Configurar visibilidad de los contenedores
          $('#tablaColaboradoresContainer').show();
          $('#tablaVehiculosContainer').hide();
        $('#filtroEstadoContainer').show();
        
        // Cargar datos iniciales
        mostrarColaboradores(solicitudId);
    } catch (error) {
        console.error('Error al cargar colaboradores y vehículos:', error);
      Swal.fire({ 
        icon: 'error', 
        title: 'Error', 
            text: 'No se pudieron cargar los datos: ' + error.message
      });
    }
  }

// Función auxiliar para formatear fechas
function formatearFecha(fecha) {
    return new Date(fecha).toLocaleDateString('es-ES');
}



// Escuchar cambios en el filtro
$('#filtroTipo').on('change', function() {
    const tipo = $(this).val();
    const solicitudId = $('#colaboradoresId').text();
    
    if (tipo === 'colaboradores') {
        $('#tablaColaboradores').show();
        $('#tablaVehiculos').hide();
        mostrarColaboradores(solicitudId);
    } else {
        $('#tablaColaboradores').hide();
        $('#tablaVehiculos').show();
        mostrarVehiculos(solicitudId);
    }
});

    // Definir Plantilla SS

async function definirPlantilla(colaboradorId, solicitudId, plantillaId) {
  try {
    // Limpiar formulario
      $('#colaboradorId').val(colaboradorId);
    $('#ssolicitudId').val(solicitudId);
    $('#plantillaId').val(plantillaId || '');
    
    // Limpiar fechas por defecto
    $('#fechaInicioSS').val('');
    $('#fechaFinSS').val('');
    
    // Actualizar título del modal
    $('#plantillaSSModalLabel').text(`Definir Plantilla de Seguridad Social`);
    
    // Mostrar indicador de carga si se está editando una plantilla existente
    if (plantillaId) {
      Swal.fire({
        title: 'Cargando...',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      // Obtener datos existentes
        const response = await fetch(`/api/sst/plantilla-ss/${colaboradorId}`);
      
      // Cerrar indicador de carga
      Swal.close();
      
      if (!response.ok) {
        throw new Error(`Error HTTP: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.plantilla) {
        // Establecer fechas en el formulario
        $('#fechaInicioSS').val(data.plantilla.fecha_inicio);
        $('#fechaFinSS').val(data.plantilla.fecha_fin);
      }
    }
    
    // Mostrar el modal
    $('#plantillaSSModal').modal('show');
  } catch (error) {
    console.error('Error al cargar datos de plantilla:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'No se pudieron cargar los datos de la plantilla: ' + error.message
    });
  }
}

// Manejador del formulario de plantilla SS
$('#plantillaSSForm').on('submit', async function(e) {
      e.preventDefault();
  
  // Obtener valores del formulario
      const colaboradorId = $('#colaboradorId').val();
  const solicitudId = $('#ssolicitudId').val();
  const fechaInicio = $('#fechaInicioSS').val();
  const fechaFin = $('#fechaFinSS').val();
  
  // Validar fechas
  if (new Date(fechaFin) <= new Date(fechaInicio)) {
    $('#validacionFechasSS').show();
    return;
  }
  
  // Ocultar mensaje de validación
  $('#validacionFechasSS').hide();
  
  try {
    // Mostrar indicador de carga
    Swal.fire({
      title: 'Guardando...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
    
    // Enviar datos al servidor
    const response = await fetch('/api/sst/plantilla-ss', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        colaboradorId,
        solicitudId,
        fechaInicio,
        fechaFin
      })
    });
    
    // Cerrar indicador de carga
    Swal.close();
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Error al guardar la plantilla');
    }
    
        const data = await response.json();
    
    // Mostrar mensaje de éxito
    Swal.fire({
      icon: 'success',
      title: 'Éxito',
      text: data.message,
      timer: 1500
    });
    
    // Cerrar modal y actualizar datos
    $('#plantillaSSModal').modal('hide');
    mostrarColaboradores(solicitudId);
  } catch (error) {
    console.error('Error al guardar plantilla:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'Error al guardar la plantilla'
    });
  }
});

// Validar fechas al cambiar
$('#fechaInicioSS, #fechaFinSS').on('change', function() {
  const fechaInicio = $('#fechaInicioSS').val();
  const fechaFin = $('#fechaFinSS').val();
  
  if (fechaInicio && fechaFin) {
    if (new Date(fechaFin) <= new Date(fechaInicio)) {
      $('#validacionFechasSS').show();
        } else {
      $('#validacionFechasSS').hide();
        }
      }
    });
    
    // Ver Historial de Cursos
    async function verHistorial(colaboradorId) {
      try {
        const response = await fetch(`/api/sst/historial-cursos/${colaboradorId}`);
        const data = await response.json();
        if (!response.ok) throw new Error(data.message || 'Error al obtener historial');

        const tbody = $('#tablaHistorial');
        tbody.empty();
        data.historial.forEach(h => {
          tbody.append(`
            <tr>
              <td>${h.nombre}</td>
              <td>${h.estado}</td>
              <td>${h.puntaje_obtenido}</td>
              <td>${new Date(h.fecha_vencimiento).toLocaleDateString()}</td>
            </tr>
          `);
        });

        $('#historialModal').modal('show');
      } catch (error) {
        Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'No se pudo cargar el historial.' });
      }
    }

    // Variables globales para el chat SST
let currentSolicitudIdSST = null;
let socketSST = null;
let oldestMessageIdSST = null;

// Abrir modal de chat desde los botones
document.querySelectorAll('.open-chat-btn').forEach(btn => {
  btn.addEventListener('click', function() {
    const solicitudId = this.dataset.solicitudId;
    openChatModalSST(solicitudId);
  });
});

// Función para abrir el modal de chat y cargar los mensajes para una solicitud específica
function openChatModalSST(solicitudId) {
  try {
    currentSolicitudId = solicitudId;
    currentChatType = 'sst';
    
    // Limpiar mensajes anteriores
    document.getElementById('chatMessages').innerHTML = `
      <div class="text-center my-4">
        <div class="spinner-border text-primary" role="status">
          <span class="sr-only">Cargando...</span>
        </div>
        <p class="mt-2">Cargando mensajes...</p>
      </div>
    `;
    
    // Abrir el modal de manera asíncrona para evitar conflictos
    setTimeout(() => {
      // Usando jQuery para mostrar el modal de Bootstrap
      $('#chatModal').modal('show');
      
      // Focus en el campo de texto una vez que el modal esté visible
      $('#chatModal').on('shown.bs.modal', function() {
        $('#chatInput').trigger('focus');
      });
    }, 100);
    
    // Obtener los datos del contratista de la solicitud seleccionada
    const row = document.querySelector(`#solicitudesTable tbody tr .open-chat-btn[data-solicitud-id="${solicitudId}"]`)?.closest('tr');
    if (row) {
      const empresa = row.cells[1]?.textContent.trim() || '';
      const contratista = row.cells[2]?.textContent.trim() || '';
      
      // Actualizar título con el nombre del contratista
      const titulo = contratista + (empresa ? ` (${empresa})` : '');
      document.querySelectorAll('.contratista-name').forEach(el => {
        el.textContent = titulo;
      });
      
      // Cambiar el contacto activo a Contratista
      const contactoContratista = document.querySelector('.contact-item[data-type="contratista"]');
      if (contactoContratista) {
        // Remover clase active de todos los contactos
        document.querySelectorAll('.contact-item').forEach(item => {
          item.classList.remove('active');
        });
        // Agregar clase active al contacto seleccionado
        contactoContratista.classList.add('active');
      }
    }
    
    // Cargar contactos
    loadChatContacts();
    
    // Inicializar chat via WebSocket
    initChat();
    
    // Cargar mensajes existentes
    loadChatMessages();
  } catch (error) {
    console.error('Error al abrir el modal de chat:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Hubo un problema al abrir el chat. Por favor intente nuevamente.'
    });
  }
}

// Modificar la función closeChatModalSST para usar el modal de chat de soporte
window.closeChatModalSST = function() {
  // Reutilizar la función existente para cerrar el chat
  closeChatModal();
};

// Modificar la función sendMessageSST para usar el modal de chat de soporte
window.sendMessageSST = function() {
  // Reutilizar la función sendMessage
  sendMessage();
};

// Función para manejar el evento de scroll
function scrollHandlerSST() {
  const chatMessages = document.getElementById('chatMessagesSST');
  
  // Si estamos cerca del principio del scroll (menos de 50px del tope)
  if (chatMessages.scrollTop < 50 && oldestMessageIdSST && !isLoadingMoreSST) {
    loadMoreMessagesSST(currentSolicitudIdSST);
  }
}

// Variable para controlar que no se disparen múltiples cargas simultáneas
let isLoadingMoreSST = false;

// Cargar más mensajes al hacer scroll hacia arriba
async function loadMoreMessagesSST(solicitudId) {
  if (!oldestMessageIdSST || isLoadingMoreSST) return;
  
  isLoadingMoreSST = true;
  
  try {
    const sstUserId = getSSUserId();
    
    // Crear indicador de carga
    const loadingIndicator = document.createElement('div');
    loadingIndicator.className = 'text-center text-gray-500 text-sm py-2';
    loadingIndicator.innerHTML = '<div class="spinner-border spinner-border-sm text-gray-500" role="status"></div> Cargando mensajes anteriores...';
    
    const chatMessages = document.getElementById('chatMessagesSST');
    chatMessages.insertBefore(loadingIndicator, chatMessages.firstChild);
    
    const response = await fetch(`/api/chat/${solicitudId}/sst?limit=20&before=${oldestMessageIdSST}&userId=${sstUserId}`);
    
    if (!response.ok) {
      throw new Error(`Error al cargar mensajes: ${response.status}`);
    }
    
    const messages = await response.json();
    
    // Eliminar el indicador de carga
    loadingIndicator.remove();
    
    if (messages.length > 0) {
      const scrollHeightBefore = chatMessages.scrollHeight;
      const scrollTopBefore = chatMessages.scrollTop;
      
      // Ordenar por fecha para asegurar visualización cronológica
      const sortedMessages = [...messages].sort((a, b) => {
        const dateA = new Date(a.created_at).getTime();
        const dateB = new Date(b.created_at).getTime();
        return dateA - dateB;
      });
      
      // Crear un fragmento para agregar todos los mensajes de una vez (mejor rendimiento)
      const fragment = document.createDocumentFragment();
      
      // Insertar mensajes en el fragmento
      sortedMessages.forEach(message => {
        const messageDiv = document.createElement('div');
        displayMessageSST(message, messageDiv);
        fragment.appendChild(messageDiv);
      });
      
      // Insertar el fragmento al principio del chat
      if (chatMessages.firstChild) {
        chatMessages.insertBefore(fragment, chatMessages.firstChild);
      } else {
        chatMessages.appendChild(fragment);
      }
      
      // Actualizar el ID del mensaje más antiguo
      oldestMessageIdSST = messages.reduce((oldest, current) => {
        return parseInt(current.id) < parseInt(oldest.id) ? current : oldest;
      }, messages[0]).id;
      
      // Mantener la posición relativa del scroll
      chatMessages.scrollTop = scrollTopBefore + (chatMessages.scrollHeight - scrollHeightBefore);
    } else {
      // Si no hay más mensajes, mostrar un mensaje informativo discreto
      const noMoreMsg = document.createElement('div');
      noMoreMsg.className = 'text-center text-gray-500 text-xs py-1';
      noMoreMsg.textContent = 'No hay más mensajes';
      noMoreMsg.style.opacity = '0.7';
      chatMessages.insertBefore(noMoreMsg, chatMessages.firstChild);
      
      // Indicar que no hay más mensajes para cargar
      oldestMessageIdSST = null;
      
      // Eliminar automáticamente el mensaje después de unos segundos
      setTimeout(() => {
        if (noMoreMsg.parentNode) {
          noMoreMsg.style.transition = 'opacity 0.5s';
          noMoreMsg.style.opacity = '0';
          setTimeout(() => {
            if (noMoreMsg.parentNode) {
              noMoreMsg.remove();
            }
          }, 500);
        }
      }, 3000);
    }
  } catch (error) {
    console.error('Error al cargar más mensajes:', error);
    
    // Mostrar mensaje de error discreto
    const errorMsg = document.createElement('div');
    errorMsg.className = 'text-center text-red-500 text-xs py-1';
    errorMsg.textContent = 'Error al cargar mensajes anteriores';
    
    const chatMessages = document.getElementById('chatMessagesSST');
    chatMessages.insertBefore(errorMsg, chatMessages.firstChild);
    
    // Eliminar automáticamente el mensaje después de unos segundos
    setTimeout(() => {
      if (errorMsg.parentNode) {
        errorMsg.remove();
      }
    }, 5000);
  } finally {
    isLoadingMoreSST = false;
  }
}

// Función para mostrar mensaje en el chat SST
function displayMessageSST(message, container = null) {
  const chatMessages = document.getElementById('chatMessagesSST');
  const messageDiv = container || document.createElement('div');
  
  console.log("🔍 Mostrando mensaje:", message);
  
  // IMPORTANTE: Determinar explícitamente si es un mensaje enviado por el usuario actual
  const sstUserId = getSSUserId();
  const isSender = parseInt(message.usuario_id) === parseInt(sstUserId);
  
  // Aplicar clase según el remitente
  messageDiv.className = `chat-message p-3 my-2 rounded-lg ${isSender ? 
    'bg-blue-600 text-white ml-auto' : 
    'bg-gray-200 text-gray-800'} max-w-xs`;
  
  // Extraer correctamente el contenido del mensaje
  let messageContent = '';
  
  // Nueva lógica mejorada para extraer el contenido del mensaje
  if (message.content) {
    if (typeof message.content === 'string') {
      try {
        const parsed = JSON.parse(message.content);
        messageContent = parsed.text || parsed.content || parsed.value || message.content;
      } catch (e) {
        messageContent = message.content;
      }
    } else if (typeof message.content === 'object') {
      messageContent = message.content.text || message.content.content || message.content.value || JSON.stringify(message.content);
    }
  } else if (message.text) {
    messageContent = message.text;
  } else {
    messageContent = "Mensaje sin contenido";
  }
  
  // Manejar la fecha del mensaje
  let messageDate = new Date();
  try {
    messageDate = message.created_at ? new Date(message.created_at) : new Date();
    if (isNaN(messageDate.getTime())) {
      messageDate = new Date();
    }
  } catch (error) {
    console.error('Error al procesar fecha:', error);
  }
  
  // Formatear fecha y hora
  const formattedDate = messageDate.toLocaleDateString('es-ES', {
    day: '2-digit', 
    month: '2-digit', 
    year: 'numeric'
  });
  
  const formattedTime = messageDate.toLocaleTimeString('es-ES', {
    hour: '2-digit',
    minute: '2-digit'
  });
  
  // Determinar el indicador de estado para mensajes enviados
  let statusIcon = '';
  if (isSender) {
    // Convertir message.id a string para evitar el error
    const messageIdStr = String(message.id || '');
    if (messageIdStr === 'error') {
      statusIcon = '<span class="status-icon-error">✗</span>';
    } else if (messageIdStr.startsWith('temp-')) {
      statusIcon = '<span class="status-icon-sent">✓</span>';
    } else if (message.leido) {
      statusIcon = '<span class="status-icon-read">✓✓</span>';
    } else {
      statusIcon = '<span class="status-icon-delivered">✓✓</span>';
    }
  }
  
  // Crear contenido HTML para el mensaje
  messageDiv.innerHTML = `
    <div class="text-sm mb-1">${messageContent}</div>
    <div class="text-xs text-${isSender ? 'white' : 'gray'}-500 text-right">
      ${formattedDate} ${formattedTime} ${statusIcon}
    </div>
  `;
  
  // Almacenar datos del mensaje
  messageDiv.dataset.messageId = message.id || '';
  messageDiv.dataset.userId = message.usuario_id;
  messageDiv.dataset.isSender = isSender;
  
  // Si no es un contenedor existente, agregar al chat
  if (!container) {
    chatMessages.appendChild(messageDiv);
    
    // Auto-scroll si estamos cerca del fondo
    const isNearBottom = chatMessages.scrollHeight - chatMessages.scrollTop - chatMessages.clientHeight < 100;
    if (isNearBottom) {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
  }
}

// Función para actualizar el estado de un mensaje en SST
function updateMessageStatusSST(messageId, status) {
    const statusElement = document.querySelector(`.chat-message[data-message-id="${messageId}"] .status-icon-pending, .chat-message[data-message-id="${messageId}"] .status-icon-sent, .chat-message[data-message-id="${messageId}"] .status-icon-delivered, .chat-message[data-message-id="${messageId}"] .status-icon-read, .chat-message[data-message-id="${messageId}"] .status-icon-error`);
  
    if (!statusElement) return;
  
    statusElement.className = `status-icon-${status} text-xs ml-1 opacity-70`;
    
  if (status === 'error') {
        statusElement.innerHTML = '⚠️';
  } else if (status === 'sent') {
        statusElement.innerHTML = '✓';
  } else if (status === 'delivered') {
        statusElement.innerHTML = '✓✓';
  } else if (status === 'read') {
        statusElement.innerHTML = '✓✓';
        statusElement.style.color = '#2563eb'; // Blue color
    } else {
        statusElement.innerHTML = '⌛';
  }
}

// Enviar mensaje
window.sendMessageSST = function() {
    const input = document.getElementById('chatInputSST');
    const content = input.value.trim();
    if (!content || !currentSolicitudIdSST || !socketSST) return;

    const sstUserId = getSSUserId();
    const tempId = 'temp-' + Date.now();
    const timestamp = new Date().toISOString();
    
    // Mostrar mensaje local inmediatamente
    const localMessage = {
        id: tempId,
        usuario_id: sstUserId,
        content: content,
        created_at: timestamp,
        isSender: true
    };
    
    displayMessageSST(localMessage);
    
    // Enviar mensaje al servidor
    try {
        const message = {
            solicitudId: currentSolicitudIdSST,
            type: 'sst',
            content: content,
            userId: sstUserId,
            tempId: tempId,
            timestamp: timestamp
        };
        
        if (socketSST.readyState === WebSocket.OPEN) {
            socketSST.send(JSON.stringify(message));
            
            // Actualizar estado a enviado
            setTimeout(() => {
                updateMessageStatus(tempId, 'sent');
            }, 100);
            
            // Actualizar estado a entregado
            setTimeout(() => {
                updateMessageStatus(tempId, 'delivered');
            }, 1000);
        } else {
            console.error('[SST] WebSocket no está abierto. Estado:', socketSST.readyState);
            updateMessageStatus(tempId, 'error');
            iniciarSocketSST();
        }
    } catch (error) {
        console.error('[SST] Error al enviar mensaje:', error);
        updateMessageStatus(tempId, 'error');
    }
    
    // Limpiar input y hacer scroll
    input.value = '';
    const chatMessages = document.getElementById('chatMessagesSST');
    chatMessages.scrollTop = chatMessages.scrollHeight;
};

// Obtener el ID del usuario SST actual
function getSSUserId() {
    console.log('⚡ Intentando obtener el ID del usuario SST...');
    
    // Intentar obtener de una variable global primero (más confiable)
    if (window.sstUserId && window.sstUserId !== "undefined") {
        console.log('✓ Se encontró ID en window.sstUserId:', window.sstUserId);
        return window.sstUserId;
    }
    
    // Intentar obtener el ID del usuario del elemento con data attribute
    const userIdElement = document.querySelector('[data-sst-user-id]');
    if (userIdElement && userIdElement.dataset.sstUserId) {
        console.log('✓ Se encontró ID en data-attribute:', userIdElement.dataset.sstUserId);
        return userIdElement.dataset.sstUserId;
    }
    
    // Intentar obtener el ID del usuario de una meta tag
    const metaTag = document.querySelector('meta[name="sst-user-id"]');
    if (metaTag && metaTag.getAttribute('content')) {
        console.log('✓ Se encontró ID en meta tag:', metaTag.getAttribute('content'));
        return metaTag.getAttribute('content');
    }
    
    // Si llegamos aquí, no se pudo obtener el ID
    console.error('❌ ERROR: No se pudo obtener el ID del usuario SST');
    
    // Último recurso: revisar si el ID está en algún otro lugar predecible
    // Por ejemplo, verificar si hay algún elemento con el ID del usuario en su atributo
    const possibleElements = document.querySelectorAll('[data-user-id]');
    if (possibleElements.length > 0) {
        const userId = possibleElements[0].dataset.userId;
        console.log('⚠️ Se encontró un ID alternativo:', userId);
        return userId;
    }
    
    return null;
}

// Actualizar updateUnreadCountSST para cambiar la clase de la notificación
async function updateUnreadCountSST(solicitudId) {
  try {
    const userId = getSstUserId();
    
    if (!userId) {
      console.error('Error al actualizar contador: userId no válido');
      return;
    }
    
    console.log(`Actualizando contadores para solicitud ${solicitudId}`);
    
    
    const response = await fetch(`/api/chat/${solicitudId}/sst/unread?userId=${userId}`);
    if (!response.ok) {
      throw new Error('Error al obtener contador de mensajes no leídos');
    }
    
    const data = await response.json();
    
    // Obtener el botón de chat para esta solicitud
    const chatButton = document.querySelector(`.open-chat-btn[data-solicitud-id="${solicitudId}"]`);
    if (!chatButton) return;
    
    // Asegurar que el botón tiene posición relativa
    chatButton.style.position = 'relative';
    
    // Buscar o crear el badge externo
    let externalBadge = chatButton.querySelector('.notif-badge');
    if (!externalBadge) {
      externalBadge = document.createElement('span');
      externalBadge.className = 'notif-badge';
      externalBadge.style.position = 'absolute';
      externalBadge.style.top = '-8px';
      externalBadge.style.right = '-8px';
      externalBadge.style.backgroundColor = '#e53e3e';
      externalBadge.style.color = 'white';
      externalBadge.style.borderRadius = '9999px';
      externalBadge.style.fontSize = '0.75rem';
      externalBadge.style.padding = '0.15rem 0.4rem';
      externalBadge.style.fontWeight = 'bold';
      externalBadge.style.display = 'flex';
      externalBadge.style.justifyContent = 'center';
      externalBadge.style.alignItems = 'center';
      externalBadge.style.minWidth = '1.2rem';
      externalBadge.style.minHeight = '1.2rem';
      chatButton.appendChild(externalBadge);
    }
    
    // Actualizar el badge externo
    externalBadge.textContent = data.unreadCount;
    
    // Mostrar u ocultar según la cantidad de mensajes no leídos
    if (data.unreadCount > 0) {
      externalBadge.style.display = 'flex';
    } else {
      externalBadge.style.display = 'none';
    }
    
    // Ocultar siempre el badge interno del botón
    const internalBadge = chatButton.querySelector('.unread-count');
    if (internalBadge) {
      internalBadge.style.display = 'none';
    }
    
    // También ocultar cualquier badge antiguo notification-badge
    const oldBadge = chatButton.querySelector('.notification-badge');
    if (oldBadge) {
      oldBadge.style.display = 'none';
    }
  } catch (error) {
    console.error('Error al actualizar contador:', error);
  }
}

// Actualizar los badges de notificación en todos los botones de chat
function updateSSTNotificationBadges() {
  document.querySelectorAll('.open-chat-btn').forEach(btn => {
    const solicitudId = btn.dataset.solicitudId;
    
    // Aplicar estilos para posición relativa al botón
    btn.style.position = 'relative';
    
    // Ocultar el contador interno
    const countBadge = btn.querySelector('.unread-count');
    if (countBadge) {
      countBadge.style.display = 'none';
    }
    
    // Verificar si ya existe el badge externo
    let externalBadge = btn.querySelector('.notif-badge');
    if (!externalBadge) {
      externalBadge = document.createElement('span');
      externalBadge.className = 'notif-badge';
      externalBadge.style.position = 'absolute';
      externalBadge.style.top = '-8px';
      externalBadge.style.right = '-8px';
      externalBadge.style.backgroundColor = '#e53e3e';
      externalBadge.style.color = 'white';
      externalBadge.style.borderRadius = '9999px';
      externalBadge.style.fontSize = '0.75rem';
      externalBadge.style.padding = '0.15rem 0.4rem';
      externalBadge.style.fontWeight = 'bold';
      externalBadge.style.display = 'flex';
      externalBadge.style.justifyContent = 'center';
      externalBadge.style.alignItems = 'center';
      externalBadge.style.minWidth = '1.2rem';
      externalBadge.style.minHeight = '1.2rem';
      btn.appendChild(externalBadge);
      
      // Ocultar inicialmente el badge hasta que sepamos si hay mensajes
      externalBadge.style.display = 'none';
    }
    
    // Ocultar badges antiguos
    const oldBadge = btn.querySelector('.notification-badge');
    if (oldBadge) {
      oldBadge.style.display = 'none';
    }
    
    // Actualizar los contadores después de crear/verificar los badges
    updateUnreadCountSST(solicitudId);
  });
}

// Inicializar badges cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
  // Actualizar la estructura HTML de los botones
  document.querySelectorAll('.open-chat-btn').forEach(btn => {
    // Modificar el texto del botón: eliminar el 0 después de "Conversar"
    if (btn.textContent.includes('Conversar')) {
      btn.textContent = 'Conversar';
    }
    
    // Buscar el span interno de contador
    const internalBadge = btn.querySelector('.unread-count');
    if (internalBadge) {
      internalBadge.style.display = 'none';
    }
    
    // Aplicar posición relativa para el badge externo
    btn.style.position = 'relative';
  });
  
  // Inicializar badges de notificación
  updateSSTNotificationBadges();
  
  // Agregar el intervalo de actualización
  setInterval(function() {
    document.querySelectorAll('.open-chat-btn').forEach(btn => {
      const solicitudId = btn.dataset.solicitudId;
      updateUnreadCountSST(solicitudId);
    });
  }, 5000);
});

// Asegurar que los badges se muestren correctamente después de abrir el chat
window.closeChatModalSST = function() {
  document.getElementById('chatModalSST').classList.add('hidden');
  if (socketSST) {
    socketSST.close();
  }
  
  // Actualizar el contador después de cerrar el chat
  if (currentSolicitudIdSST) {
    updateUnreadCountSST(currentSolicitudIdSST);
  }
  
  currentSolicitudIdSST = null;
  oldestMessageIdSST = null;
};

// Función para marcar mensajes como leídos
async function markMessagesAsReadSST(solicitudId) {
  try {
    const sstUserId = getSstUserId();
    
    if (!sstUserId || sstUserId === 'undefined') {
      console.error('❌ Error al marcar mensajes como leídos: userId no válido');
      return;
    }
    
    console.log(`[SST] Marcando mensajes como leídos para solicitud ${solicitudId}, usuario ${sstUserId}`);
    
    const response = await fetch(`/api/chat/${solicitudId}/sst/mark-read`, { 
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ userId: sstUserId })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('Error al marcar mensajes como leídos:', errorData);
      throw new Error(errorData.message || 'Error al marcar mensajes como leídos');
    }
    
    // Actualizar contador visual - ocultar el badge
    const chatButton = document.querySelector(`.open-chat-btn[data-solicitud-id="${solicitudId}"]`);
    if (chatButton) {
      const externalBadge = chatButton.querySelector('.notification-badge');
      if (externalBadge) {
        externalBadge.style.display = 'none';
        externalBadge.textContent = '0';
      }
    }
  } catch (error) {
    console.error('[SST] Error al marcar mensajes como leídos:', error);
  }
}

// Modificar el HTML del botón de chat para no mostrar el span interno
document.addEventListener('DOMContentLoaded', function() {
  // Actualizar la estructura HTML de los botones
  document.querySelectorAll('.open-chat-btn').forEach(btn => {
    // Modificar el texto del botón: eliminar el 0 después de "Conversar"
    if (btn.textContent.includes('Conversar')) {
      btn.textContent = 'Conversar';
    }
    
    // Buscar el span interno de contador
    const internalBadge = btn.querySelector('.unread-count');
    if (internalBadge) {
      internalBadge.style.display = 'none';
    }
    
    // Aplicar posición relativa para el badge externo
    btn.style.position = 'relative';
  });
  
  // Inicializar badges de notificación
  updateSSTNotificationBadges();
  
  // Agregar el intervalo de actualización
  setInterval(function() {
    document.querySelectorAll('.open-chat-btn').forEach(btn => {
      const solicitudId = btn.dataset.solicitudId;
      updateUnreadCountSST(solicitudId);
    });
  }, 5000);
});

// Cargar los últimos 20 mensajes para SST
async function loadInitialMessagesSST(solicitudId) {
  const chatMessages = document.getElementById('chatMessagesSST');
  
  // Mostrar indicador de carga mientras se obtienen los mensajes
  chatMessages.innerHTML = '<div class="flex justify-center my-4"><div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-600"></div></div>';
  
  try {
    const sstUserId = getSSUserId();
    console.log("Usuario SST ID:", sstUserId);
    
    // Intentar inicializar el chat si es necesario
    try {
      const initResponse = await fetch('/api/chat/iniciar/' + solicitudId + '/sst', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: sstUserId })
      });
      
      if (initResponse.ok) {
        console.log('Chat SST inicializado correctamente');
      }
    } catch (e) {
      console.log('Error al inicializar chat SST (no crítico):', e);
    }
    
    const response = await fetch(`/api/chat/${solicitudId}/sst?limit=20&userId=${sstUserId}`);
    
    if (!response.ok) {
      throw new Error(`Error al cargar mensajes: ${response.status}`);
    }
    
    const messages = await response.json();
    console.log("Mensajes cargados:", messages);
    
    // Limpiar el área de mensajes antes de mostrarlos
    chatMessages.innerHTML = '';
    
    if (messages.length === 0) {
      // Mostrar mensaje cuando no hay historial
      chatMessages.innerHTML = '<div class="text-center text-gray-500 p-4">No hay mensajes en esta conversación. Escribe para comenzar.</div>';
    } else {
      // Ordenar los mensajes por fecha para asegurar que se muestren cronológicamente
      const sortedMessages = [...messages].sort((a, b) => {
        const dateA = new Date(a.created_at).getTime();
        const dateB = new Date(b.created_at).getTime();
        return dateA - dateB;
      });
      
      // Mostrar los mensajes ordenados cronológicamente
      sortedMessages.forEach(message => {
        displayMessageSST(message);
      });
      
      // Identificar el mensaje más antiguo para paginación
      if (messages.length > 0) {
        oldestMessageIdSST = messages.reduce((oldest, current) => {
          return parseInt(current.id) < parseInt(oldest.id) ? current : oldest;
        }, messages[0]).id;
      }
      
      // Asegurar que siempre se desplace al final del chat
      setTimeout(() => {
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }, 100);
    }
  } catch (error) {
    console.error('Error al cargar mensajes iniciales:', error);
    chatMessages.innerHTML = '<div class="text-center text-red-500 p-3">Error al cargar mensajes. <button onclick="loadInitialMessagesSST(\''+solicitudId+'\')" class="underline">Reintentar</button></div>';
  }
}

// Configurar scroll para carga automática de mensajes antiguos
document.addEventListener('DOMContentLoaded', function() {
  const chatMessagesSST = document.getElementById('chatMessagesSST');
  if (chatMessagesSST) {
    chatMessagesSST.addEventListener('scroll', scrollHandlerSST);
  }
});

document.addEventListener('DOMContentLoaded', function() {
    // Corregir el error del toggle de filtros
    const toggleButton = document.getElementById('toggleFilters');
    if (toggleButton) {
    const toggleText = document.getElementById('toggleText');
        const filtrosContent = document.getElementById('filtrosCollapse');
    let filtrosVisible = true;

    toggleButton.addEventListener('click', function() {
        filtrosVisible = !filtrosVisible;
        
        if (filtrosVisible) {
            filtrosContent.style.display = 'block';
                if (toggleText) toggleText.textContent = 'Ocultar filtros';
        } else {
            filtrosContent.style.display = 'none';
                if (toggleText) toggleText.textContent = 'Mostrar filtros';
            }
        });
    }
      
});

// Función para formatear fechas en formato español
function formatearFecha(fecha) {
  if (!fecha) return 'No definido';
  const fechaObj = new Date(fecha);
  return fechaObj.toLocaleDateString('es-ES', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

// Función para mostrar colaboradores
function mostrarColaboradores(solicitudId) {
    if (!solicitudId) {
        console.warn('No se proporcionó ID de solicitud para mostrar colaboradores');
        return;
    }

  const tbody = $('#tablaColaboradores');
  tbody.empty();
    tbody.append('<tr><td colspan="8" class="text-center"><i class="fas fa-spinner fa-spin"></i> Cargando colaboradores...</td></tr>');

    const estadoFiltro = $('#filtroEstado').val();
    console.log('Filtrando colaboradores por estado:', estadoFiltro);

    // Construir URL con parámetros de filtro
    let url = `/api/sst/colaboradores/${solicitudId}`;
    if (estadoFiltro !== 'todos') {
        const estadoBoolean = estadoFiltro === 'habilitados';
        url += `?estado=${estadoBoolean}`;
    }

    fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error HTTP: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            tbody.empty();
            if (data && data.colaboradores && data.colaboradores.length > 0) {
                data.colaboradores.forEach(col => {
                    // Determinar clases y valores para plantilla SS
    const plantillaSS = col.plantillaSS 
                        ? `${formatearFecha(col.plantillaSS.fecha_inicio)} - ${formatearFecha(col.plantillaSS.fecha_fin)}` 
      : 'No definida';

                    // Determinar si la plantilla está vigente
                    let plantillaClase = 'no-definido';
                    if (col.plantillaSS) {
                        const fechaFin = new Date(col.plantillaSS.fecha_fin);
                        plantillaClase = fechaFin > new Date() ? 'vigente' : 'vencido';
                    }
                    
                    // Determinar clase para curso SISO
                    let cursoSisoClase = '';
                    if (col.cursoSiso === 'Vencido') {
                        cursoSisoClase = 'vencido';
                    } else if (col.cursoSiso === 'Aprobado') {
                        cursoSisoClase = 'vigente';
                    } else {
                        cursoSisoClase = 'no-definido';
                    }
                    
                    // Determinar clase para la fila según estado del colaborador
                    const filaClase = col.estado ? 'colaborador-habilitado' : 'colaborador-inhabilitado';
                    
                    const row = `
                        <tr data-estado="${col.estado ? 'habilitado' : 'inhabilitado'}" class="${filaClase}">
        <td>${col.id}</td>
        <td>${col.nombre}</td>
        <td>${col.cedula}</td>
        <td>${col.estado ? 'Habilitado' : 'Inhabilitado'}</td>
                            <td class="${cursoSisoClase}">${col.cursoSiso}</td>
                            <td class="${plantillaClase}">${plantillaSS}</td>
                            <td>
                                <button class="btn btn-sm btn-primary" 
                                        onclick="definirPlantilla(${col.id}, ${solicitudId}, '${plantillaSS === 'No definida' ? '' : col.plantillaSS.id}')">
                                    Definir
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-info" 
                                        onclick="verHistorial(${col.id})">
                                    Ver
                                </button>
                            </td>
      </tr>
                    `;
                    tbody.append(row);
                });
      } else {
                tbody.append('<tr><td colspan="8">No hay colaboradores que coincidan con el filtro</td></tr>');
            }
        })
        .catch(error => {
            console.error('Error al cargar colaboradores:', error);
            tbody.empty();
            tbody.append('<tr><td colspan="8" class="text-danger">Error al cargar los colaboradores: ' + error.message + '</td></tr>');
  });
}

// Función para mostrar vehículos
function mostrarVehiculos(solicitudId) {
    if (!solicitudId) {
        console.warn('No se proporcionó ID de solicitud para mostrar vehículos');
        return;
    }

  const tbody = $('#tablaVehiculos');
  tbody.empty();
    tbody.append('<tr><td colspan="7" class="text-center"><i class="fas fa-spinner fa-spin"></i> Cargando vehículos...</td></tr>');

    fetch(`/api/sst/colaboradores/${solicitudId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error HTTP: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            tbody.empty();
            if (data && data.vehiculos && data.vehiculos.length > 0) {
                data.vehiculos.forEach(vehiculo => {
                    // Determinar clases y valores para SOAT
                    let soatTexto = 'No definido';
                    let soatClase = 'no-definido';
                    if (vehiculo.soat) {
                        soatTexto = `${formatearFecha(vehiculo.soat.fecha_inicio)} - ${formatearFecha(vehiculo.soat.fecha_fin)}`;
                        const fechaFin = new Date(vehiculo.soat.fecha_fin);
                        soatClase = fechaFin > new Date() ? 'vigente' : 'vencido';
                    }
                    
                    // Determinar clases y valores para Tecnomecánica
                    let tecnoTexto = 'No definido';
                    let tecnoClase = 'no-definido';
                    if (vehiculo.tecnomecanica) {
                        tecnoTexto = `${formatearFecha(vehiculo.tecnomecanica.fecha_inicio)} - ${formatearFecha(vehiculo.tecnomecanica.fecha_fin)}`;
                        const fechaFin = new Date(vehiculo.tecnomecanica.fecha_fin);
                        tecnoClase = fechaFin > new Date() ? 'vigente' : 'vencido';
                    }
                    
                    // Determinar textos para los botones de licencias
                    const textoBtnConduccion = vehiculo.licencia_conduccion ? 'Cancelar Aprobación' : 'Aprobar';
                    const textoBtnTransito = vehiculo.licencia_transito ? 'Cancelar Aprobación' : 'Aprobar';
                    
                    // Determinar clases para los botones
                    const claseBtnConduccion = vehiculo.licencia_conduccion ? 'btn-danger' : 'btn-success';
                    const claseBtnTransito = vehiculo.licencia_transito ? 'btn-danger' : 'btn-success';
                    
                    // Determinar clase para la fila según estado del vehículo
                    const filaClase = vehiculo.estado ? 'colaborador-habilitado' : 'colaborador-inhabilitado';
                    
                    const row = `
                        <tr class="${filaClase}">
                            <td>${vehiculo.id}</td>
                            <td>${vehiculo.placa}</td>
                            <td>${vehiculo.estado ? 'Activo' : 'Inactivo'}</td>
                            <td>
                                <span class="${soatClase}">${soatTexto}</span>
                                <button class="btn btn-sm btn-primary ml-2" 
                                        onclick="definirVigencia(${vehiculo.id}, ${solicitudId}, 'soat', '${vehiculo.soat ? vehiculo.soat.id : ''}')">
                                    Definir
                                </button>
                            </td>
                            <td>
                                <span class="${tecnoClase}">${tecnoTexto}</span>
                                <button class="btn btn-sm btn-primary ml-2" 
                                        onclick="definirVigencia(${vehiculo.id}, ${solicitudId}, 'tecnomecanica', '${vehiculo.tecnomecanica ? vehiculo.tecnomecanica.id : ''}')">
                                    Definir
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-sm ${claseBtnConduccion}" 
                                        onclick="alternarEstadoLicencia(${vehiculo.id}, ${solicitudId}, 'conduccion', ${!vehiculo.licencia_conduccion})">
                                    ${textoBtnConduccion}
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-sm ${claseBtnTransito}" 
                                        onclick="alternarEstadoLicencia(${vehiculo.id}, ${solicitudId}, 'transito', ${!vehiculo.licencia_transito})">
                                    ${textoBtnTransito}
                                </button>
                            </td>
      </tr>
                    `;
                    tbody.append(row);
                });
            } else {
                tbody.append('<tr><td colspan="7">No hay vehículos asociados a esta solicitud</td></tr>');
            }
        })
        .catch(error => {
            console.error('Error al cargar vehículos:', error);
            tbody.empty();
            tbody.append('<tr><td colspan="7" class="text-danger">Error al cargar los vehículos: ' + error.message + '</td></tr>');
        });
}

// Función para alternar estado de licencia
function alternarEstadoLicencia(vehiculoId, solicitudId, tipoLicencia, activar) {
  console.log('Alternando licencia:', {vehiculoId, solicitudId, tipoLicencia, activar});
  
  // Verificar que tipoLicencia sea "conduccion" o "transito"
  if (tipoLicencia !== 'conduccion' && tipoLicencia !== 'transito') {
    console.error('Tipo de licencia inválido:', tipoLicencia);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Tipo de licencia inválido'
    });
    return;
  }
  
  // Convertir a formato completo (licencia_conduccion o licencia_transito)
  const tipoCompleto = `licencia_${tipoLicencia}`;
  
  // Llamar a la función que hace la petición al servidor
  toggleLicencia(vehiculoId, solicitudId, tipoCompleto, activar);
}

// Función para enviar la petición al servidor
async function toggleLicencia(vehiculoId, solicitudId, tipoLicencia, activar) {
  try {
    console.log('Enviando petición:', {vehiculoId, solicitudId, tipoLicencia, activar});
    
    const response = await fetch('/api/sst/toggle-licencia', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        vehiculoId,
        solicitudId,
        tipoLicencia,
        activar
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Error al actualizar la licencia');
    }

    const data = await response.json();
    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Éxito',
        text: activar ? 'Licencia aprobada correctamente' : 'Aprobación de licencia cancelada correctamente',
        timer: 1500
      });
      
      // Actualizar la tabla de vehículos
      mostrarVehiculos(solicitudId);
    } else {
      throw new Error(data.message);
    }
  } catch (error) {
    console.error('Error al actualizar licencia:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'Error al actualizar el estado de la licencia'
    });
  }
}

// Función para definir vigencia de documentos de vehículos
async function definirVigencia(vehiculoId, solicitudId, tipoDocumento, documentoId) {
  try {
    // Limpiar formulario
  $('#vehiculoId').val(vehiculoId);
    $('#solicitudId').val(solicitudId);
  $('#tipoDocumento').val(tipoDocumento);
  
    // Actualizar título del modal
    const tipoDocumentoTexto = tipoDocumento === 'soat' ? 'SOAT' : 'Tecnomecánica';
    $('#definirVigenciaModalLabel').text(`Definir Vigencia de ${tipoDocumentoTexto}`);
    
    // Si ya existe un documento (tiene ID), obtener sus datos
    if (documentoId) {
      $('#documentoId').val(documentoId);
      
      // Mostrar indicador de carga
      Swal.fire({
        title: 'Cargando...',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      // Obtener datos existentes
      const response = await fetch(`/api/sst/vehiculo-documento/${vehiculoId}/${tipoDocumento}`);
      
      // Cerrar el indicador de carga
      Swal.close();
      
      if (!response.ok) {
        throw new Error(`Error HTTP: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.documento) {
        // Establecer fechas en el formulario
        $('#fechaInicio').val(data.documento.fecha_inicio);
        $('#fechaFin').val(data.documento.fecha_fin);
      } else {
        // Limpiar fechas si no hay documento
        $('#fechaInicio').val('');
        $('#fechaFin').val('');
        $('#documentoId').val('');
      }
    } else {
      // Es un documento nuevo, limpiar el formulario
      $('#documentoId').val('');
      $('#fechaInicio').val('');
      $('#fechaFin').val('');
    }
    
    // Mostrar el modal
  $('#definirVigenciaModal').modal('show');
  } catch (error) {
    console.error('Error al cargar datos de vigencia:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'No se pudieron cargar los datos del documento: ' + error.message
    });
  }
}

// Función para validar documentos
function validarDocumento(vehiculoId, tipoDocumento) {
  $('#vehiculoIdValidar').val(vehiculoId);
  $('#solicitudIdValidar').val($('#colaboradoresId').text());
  $('#tipoDocumentoValidar').val(tipoDocumento);
  $('#validarDocumentoModal').modal('show');
}

// Manejar formulario de vigencia
$('#vigenciaForm').on('submit', async function(e) {
  e.preventDefault();
  
  // Obtener valores del formulario
  const vehiculoId = $('#vehiculoId').val();
  const solicitudId = $('#solicitudId').val();
  const tipoDocumento = $('#tipoDocumento').val();
  const documentoId = $('#documentoId').val();
  const fechaInicio = $('#fechaInicio').val();
  const fechaFin = $('#fechaFin').val();
  
  // Validar fechas
  if (new Date(fechaFin) <= new Date(fechaInicio)) {
    $('#validacionFechas').show();
    return;
  }
  
  // Ocultar mensaje de validación
  $('#validacionFechas').hide();
  
  try {
    // Mostrar indicador de carga
    Swal.fire({
      title: 'Guardando...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
    
    // Enviar datos al servidor
    const response = await fetch('/api/sst/vehiculo-documento', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        vehiculoId,
        solicitudId,
        tipoDocumento,
        documentoId,
        fechaInicio,
        fechaFin
      })
    });

    // Cerrar indicador de carga
    Swal.close();
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Error al guardar el documento');
    }
    
    const data = await response.json();
    
    // Mostrar mensaje de éxito
    Swal.fire({
      icon: 'success',
      title: 'Éxito',
      text: data.message,
      timer: 1500
    });
    
    // Cerrar modal y actualizar datos
      $('#definirVigenciaModal').modal('hide');
    mostrarVehiculos(solicitudId);
  } catch (error) {
    console.error('Error al guardar documento:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'Error al guardar el documento'
    });
  }
});

// Validar fechas al cambiar
$('#fechaInicio, #fechaFin').on('change', function() {
  const fechaInicio = $('#fechaInicio').val();
  const fechaFin = $('#fechaFin').val();
  
  if (fechaInicio && fechaFin) {
    if (new Date(fechaFin) <= new Date(fechaInicio)) {
      $('#validacionFechas').show();
    } else {
      $('#validacionFechas').hide();
    }
  }
});

// Manejar formulario de validación
$('#validarForm').on('submit', async function(e) {
  e.preventDefault();
  const vehiculoId = $('#vehiculoIdValidar').val();
  const solicitudId = $('#solicitudIdValidar').val();
  const tipoDocumento = $('#tipoDocumentoValidar').val();
  const estado = $('input[name="estadoDocumento"]:checked').val();
  const comentario = $('#comentarioValidacion').val();

  try {
    const response = await fetch('/api/sst/validar-documento', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        vehiculoId,
        solicitudId,
        tipoDocumento,
        estado,
        comentario
      })
    });

    if (response.ok) {
      Swal.fire({ icon: 'success', title: 'Éxito', text: 'Documento validado correctamente.' });
      $('#validarDocumentoModal').modal('hide');
      verColaboradores(solicitudId); // Recargar datos
    } else {
      throw new Error('Error al validar el documento');
    }
  } catch (error) {
    Swal.fire({ icon: 'error', title: 'Error', text: error.message });
  }
});

// Funciones para gestión de documentos de vehículos
async function actualizarDocumentoVehiculo(vehiculoId, solicitudId, tipoDocumento, documentoId, fechaInicio, fechaFin) {
  try {
    const response = await fetch('/api/sst/vehiculo-documento', {
      method: documentoId ? 'PUT' : 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        vehiculoId,
        solicitudId,
        tipoDocumento,
        documentoId,
        fechaInicio,
        fechaFin
      })
    });

    const data = await response.json();
    
    if (data.success) {
      // Actualizar la información en la interfaz
      await cargarDatosDocumento(vehiculoId, tipoDocumento);
      $('#definirVigenciaModal').modal('hide');
      
      // Mostrar mensaje de éxito
      Swal.fire({
        icon: 'success',
        title: 'Éxito',
        text: data.message,
        timer: 1500,
        showConfirmButton: false
      });
    } else {
      throw new Error(data.message || 'Error al actualizar el documento');
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message
    });
  }
}

async function alternarLicencia(vehiculoId, solicitudId, tipoLicencia, activar) {
  try {
    const response = await fetch('/api/sst/vehiculo-licencia', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        vehiculoId,
        solicitudId,
        tipoLicencia,
        activar
      })
    });

    if (!response.ok) {
      throw new Error('Error al actualizar la licencia');
    }

    const result = await response.json();
    if (result.success) {
      Swal.fire({
        icon: 'success',
        title: 'Éxito',
        text: 'Estado de licencia actualizado correctamente'
      });
      verColaboradores(solicitudId); // Recargar datos
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message
    });
  }
}

async function cargarDatosDocumento(vehiculoId, tipoDocumento) {
  try {
    const response = await fetch(`/api/sst/vehiculo-documento/${vehiculoId}/${tipoDocumento}`);
    const data = await response.json();
    
    if (data.documento) {
      const doc = data.documento;
      document.getElementById('documentoId').value = doc.id;
      document.getElementById('fechaInicio').value = doc.fecha_inicio;
      document.getElementById('fechaFin').value = doc.fecha_fin;
      
      // Actualizar el estado en la interfaz
      const estadoElement = document.querySelector(`#estado-${tipoDocumento}-${vehiculoId}`);
      if (estadoElement) {
        estadoElement.textContent = doc.estado_actual;
        estadoElement.className = doc.estado_actual === 'vencido' ? 'text-danger' : 'text-success';
      }
    } else {
      // Limpiar campos si no hay documento
      document.getElementById('documentoId').value = '';
      document.getElementById('fechaInicio').value = '';
      document.getElementById('fechaFin').value = '';
      
      // Actualizar el estado en la interfaz
      const estadoElement = document.querySelector(`#estado-${tipoDocumento}-${vehiculoId}`);
      if (estadoElement) {
        estadoElement.textContent = 'No definido';
        estadoElement.className = 'text-warning';
      }
    }
  } catch (error) {
    console.error('Error al cargar datos del documento:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Error al cargar los datos del documento'
    });
  }
}

// Manejador del formulario de vigencia de documentos
$(document).ready(function() {
    // Manejar el cambio en el filtro de tipo
    $('#filtroTipo').on('change', function() {
        const tipo = $(this).val();
        const solicitudId = $('#colaboradoresId').text();
        
        if (!solicitudId) {
            console.warn('No hay ID de solicitud disponible');
            return;
        }

        // Limpiar tablas primero para evitar duplicados
        $('#tablaColaboradores').empty();
        $('#tablaVehiculos').empty();

        if (tipo === 'colaboradores') {
            $('#tablaColaboradoresContainer').show();
            $('#tablaVehiculosContainer').hide();
            $('#filtroEstadoContainer').show();
            mostrarColaboradores(solicitudId);
        } else if (tipo === 'vehiculos') {
            $('#tablaColaboradoresContainer').hide();
            $('#tablaVehiculosContainer').show();
            $('#filtroEstadoContainer').hide();
            mostrarVehiculos(solicitudId);
        }
    });

    // Manejar el cambio en el filtro de estado de colaboradores
    $('#filtroEstado').on('change', function() {
        const solicitudId = $('#colaboradoresId').text();
        if (solicitudId && $('#filtroTipo').val() === 'colaboradores') {
            // Limpiar tabla primero para evitar duplicados
            $('#tablaColaboradores').empty();
            mostrarColaboradores(solicitudId);
        }
    });

    // Establecer el estado inicial del filtro sin cargar datos
    $('#filtroTipo').val('colaboradores');
    $('#tablaColaboradoresContainer').show();
    $('#tablaVehiculosContainer').hide();
    $('#filtroEstadoContainer').show();
});


// Función para mostrar el modal de vigencia
function mostrarModalVigencia(vehiculoId, solicitudId, tipoDocumento) {
  document.getElementById('vehiculoId').value = vehiculoId;
  document.getElementById('solicitudId').value = solicitudId;
  document.getElementById('tipoDocumento').value = tipoDocumento;
  
  cargarDatosDocumento(vehiculoId, tipoDocumento);
  $('#definirVigenciaModal').modal('show');
}

// Variables para el chat
let socket = null;
let currentSolicitudId = null;
let currentChatType = 'soporte';
let oldestMessageId = null;
let displayedMessages = new Set();
let sentMessages = new Map();
let isLoadingMore = false;

const getSstUserId = () => {
  return window.sstUserId || document.querySelector('[data-sst-user-id]')?.dataset.sstUserId || 
         document.querySelector('meta[name="sst-user-id"]')?.getAttribute('content') || null;
};

window.openSoporteChat = async () => {
  try {
    currentChatType = 'soporte';
    sentMessages.clear();
    displayedMessages.clear();

    const modalElement = document.getElementById('chatModal');
    if (!modalElement) throw new Error('No se encontró el modal de chat');
    modalElement.style.display = 'flex';
    modalElement.classList.remove('hidden');

    const userId = getSstUserId();
    if (!userId) throw new Error('No se pudo obtener ID de usuario');

    // Inicializar chat de soporte
    await fetch('/api/chat/iniciar/global/soporte', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId })
    }).catch(err => console.warn('Error al inicializar chat Soporte:', err));

    // Cargar información del contratista para las solicitudes actuales
    loadChatContacts();

    // Activar el contacto de soporte por defecto
    document.querySelectorAll('.contact-item').forEach(item => {
      item.classList.remove('bg-gray-200');
      if (item.dataset.type === 'soporte') {
        item.classList.add('bg-gray-200');
        document.getElementById('chatCurrentContact').textContent = 'Soporte Técnico';
      }
    });

    if (socket?.readyState === WebSocket.OPEN) socket.close();

    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    socket = new WebSocket(`${protocol}//${window.location.host}/ws`);

    socket.onopen = () => {
      socket.send(JSON.stringify({
        type: 'identify',
        userId,
        role: 'sst',
        solicitudId: 'global'
      }));
    };

    socket.onmessage = (event) => {
      console.log('Received WebSocket message:', event.data);
      const message = JSON.parse(event.data);
      if (message.type === 'identify_confirmation') return;

      if (message.type === 'status_update') {
        const { tempId, status, messageId } = message;
        const existing = document.querySelector(`.chat-message[data-message-id="${tempId}"]`);
        if (existing) {
          existing.dataset.messageId = messageId;
          updateMessageStatus(messageId, status);
          sentMessages.set(tempId, messageId);
          displayedMessages.add(messageId);
        }
        return;
      }

      if (message.type === 'message') {
        if (!displayedMessages.has(message.id)) {
          displayMessage(message);
          if (message.usuario_id !== getSstUserId()) {
            markMessageAsRead(message.id);
          }
        }
        return;
      }
    };

    socket.onerror = (error) => {
      console.error('WebSocket Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error de conexión',
        text: 'No se pudo establecer conexión con el servidor de chat'
      });
    };

    const chatMessages = document.getElementById('chatMessages');
    chatMessages.addEventListener('scroll', scrollHandler);

    const loadedMessages = await loadInitialMessagesWithRetry('global', 'soporte', getSstUserId());
    chatMessages.innerHTML = loadedMessages.length === 0 ? 
      '<div class="text-center text-gray-500 p-4">No hay mensajes. Escribe para comenzar.</div>' : '';
    
    loadedMessages.forEach(displayMessage);
    chatMessages.scrollTop = chatMessages.scrollHeight;

    await markMessagesAsRead('global', 'soporte');
  } catch (error) {
    console.error('Error al abrir el chat:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'No se pudo iniciar el chat: ' + error.message
    });
  }
};

const loadInitialMessagesWithRetry = async (solicitudId, type, userId, retries = 3) => {
  for (let i = 0; i < retries; i++) {
    try {
      const response = await fetch(`/api/chat/${solicitudId}/${type}?limit=30&userId=${userId}`);
      if (response.ok) {
        const messages = await response.json();
        if (messages.length > 0) {
          oldestMessageId = messages.reduce((min, curr) => parseInt(curr.id) < parseInt(min.id) ? curr : min).id;
        } else {
          oldestMessageId = null;
        }
        return messages;
      }
    } catch (err) {
      console.warn(`Intento ${i+1} fallido: ${err}`);
      await new Promise(r => setTimeout(r, 1000));
    }
  }
  throw new Error('No se pudieron cargar los mensajes después de varios intentos');
};

const updateMessageStatus = (messageId, status) => {
  const messageElement = document.querySelector(`.chat-message[data-message-id="${messageId}"]`);
  if (!messageElement) return;

  const statusContainer = messageElement.querySelector('.text-right');
  if (!statusContainer) return;

  const timeText = statusContainer.textContent.trim().split(' ').slice(0, 2).join(' ');
  const statusIcon = status === 'error' ? '<span class="status-icon-error">!</span>' :
                    status === 'sent' ? '<span class="status-icon-sent">✓</span>' :
                    status === 'delivered' ? '<span class="status-icon-delivered">✓✓</span>' :
                    '<span class="status-icon-read">✓✓</span>';

  statusContainer.innerHTML = `${timeText} ${statusIcon}`;
};

const markMessageAsRead = async (messageId) => {
  try {
    await fetch('/api/chat/marcar-leido', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ messageId })
    });
  } catch (error) {
    console.error('Error al marcar mensaje como leído:', error);
  }
};

const markMessagesAsRead = async (solicitudId, type) => {
  const userId = getSstUserId();
  if (!userId) return;

  try {
    await fetch('/api/chat/marcar-todos-leidos', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ solicitudId, tipo: type, userId })
    });
    
    // Actualizar badge de notificaciones
    const badge = document.querySelector(`.notification-badge[data-solicitud-id="${solicitudId}"]`);
    if (badge) {
      badge.textContent = '0';
      badge.style.display = 'none';
    }
  } catch (error) {
    console.error('Error al marcar mensajes como leídos:', error);
  }
};

window.closeChatModal = () => {
  if (socket) {
    socket.close();
    socket = null;
  }

  const chatMessages = document.getElementById('chatMessages');
  if (chatMessages) {
    chatMessages.innerHTML = '';
    chatMessages.removeEventListener('scroll', scrollHandler);
  }

  document.getElementById('chatInput').value = '';
  
  const modalElement = document.getElementById('chatModal');
  modalElement.classList.add('hidden');
  modalElement.style.display = 'none';

  currentSolicitudId = null;
  oldestMessageId = null;
  displayedMessages.clear();
};

const scrollHandler = () => {
  const chatMessages = document.getElementById('chatMessages');
  if (chatMessages.scrollTop < 50 && oldestMessageId && !isLoadingMore) {
    loadMoreMessages(currentSolicitudId || 'global', currentChatType);
  }
};

const loadMoreMessages = async (solicitudId, type) => {
  if (!oldestMessageId || isLoadingMore) return;
  isLoadingMore = true;

  try {
    const chatMessages = document.getElementById('chatMessages');
    const loading = document.createElement('div');
    loading.className = 'text-center text-gray-500 text-sm py-2';
    loading.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-ga-gold inline-block"></div> Cargando...';
    chatMessages.insertBefore(loading, chatMessages.firstChild);

    const response = await fetch(`/api/chat/${solicitudId}/${type}?limit=20&before=${oldestMessageId}&userId=${getSstUserId()}`);
    if (!response.ok) throw new Error('Error al cargar más mensajes');

    const messages = await response.json();
    loading.remove();

    if (messages.length > 0) {
      const scrollHeightBefore = chatMessages.scrollHeight;
      const scrollTopBefore = chatMessages.scrollTop;

      messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at)).forEach(displayMessage);
      oldestMessageId = messages.reduce((min, curr) => parseInt(curr.id) < parseInt(min.id) ? curr : min).id;

      chatMessages.scrollTop = scrollTopBefore + (chatMessages.scrollHeight - scrollHeightBefore);
    } else {
      oldestMessageId = null;
      const noMore = document.createElement('div');
      noMore.className = 'text-center text-gray-500 text-xs py-1';
      noMore.textContent = 'No hay más mensajes';
      chatMessages.insertBefore(noMore, chatMessages.firstChild);
      setTimeout(() => noMore.remove(), 3000);
    }
  } catch (error) {
    console.error('Error al cargar más mensajes:', error);
  } finally {
    isLoadingMore = false;
  }
};

const displayMessage = (message) => {
  if (displayedMessages.has(message.id)) return;

  const chatMessages = document.getElementById('chatMessages');
  const emptyMessage = chatMessages.querySelector('.text-center.text-gray-500');
  if (emptyMessage) chatMessages.innerHTML = '';

  const userId = getSstUserId();
  const isSender = parseInt(message.usuario_id) === parseInt(userId);

  // Clases para el mensaje propio: Fondo dorado más oscuro, texto blanco y margen automático a la izquierda
  // Clases para mensajes recibidos: Fondo gris claro y texto oscuro
  const div = document.createElement('div');
  div.className = `chat-message p-3 my-2 rounded-lg ${isSender ? 'bg-yellow-600 text-white ml-auto' : 'bg-gray-200 text-gray-800'} max-w-xs`;
  div.dataset.messageId = message.id;
  div.dataset.userId = message.usuario_id;

  let content;
  try {
    // Intentar parsear como JSON si es string
    if (typeof message.content === 'string') {
      try {
        const parsed = JSON.parse(message.content);
        content = parsed.text || message.content;
      } catch {
        content = message.content;
      }
    } else {
      content = message.content.text || JSON.stringify(message.content);
    }
  } catch (e) {
    // Si falla el parseo, usar el contenido directamente
    content = message.content;
  }

  const date = new Date(message.created_at || Date.now());
  const time = date.toLocaleString('es-ES', { dateStyle: 'short', timeStyle: 'short' });

  const statusIcon = isSender ? (
    String(message.id).startsWith('temp-') ? '<span class="status-icon-sent">✓</span>' :
    message.leido ? '<span class="status-icon-read">✓✓</span>' : '<span class="status-icon-delivered">✓✓</span>'
  ) : '';

  div.innerHTML = `
    <div class="text-sm mb-1 font-medium">${content}</div>
    <div class="text-xs ${isSender ? 'text-gray-100' : 'text-gray-500'} text-right">${time} ${statusIcon}</div>
  `;

  chatMessages.appendChild(div);
  displayedMessages.add(message.id);

  const isNearBottom = chatMessages.scrollHeight - chatMessages.scrollTop - chatMessages.clientHeight < 100;
  if (isNearBottom) setTimeout(() => chatMessages.scrollTop = chatMessages.scrollHeight, 100);
};

window.sendMessage = () => {
  const input = document.getElementById('chatInput');
  const content = input.value.trim();
  
  if (!content || !currentSolicitudId || !currentChatType || !socket) return;
  
  const userId = getSstUserId();
  if (!userId) {
    Swal.fire({ 
      icon: 'error', 
      title: 'Error', 
      text: 'No se pudo identificar usuario' 
    });
    return;
  }
  
  const tempId = 'temp-' + Date.now();
  const timestamp = new Date().toISOString();

  // Crear objeto de mensaje local
  const localMessage = { 
    id: tempId, 
    usuario_id: userId, 
    content, 
    created_at: timestamp, 
    type: currentChatType
  };
  
  // Mostrar el mensaje en la interfaz
  displayMessage(localMessage);
  sentMessages.set(tempId, tempId);
  displayedMessages.add(tempId);

  // Preparar mensaje para enviar al servidor
  const messageToSend = { 
    solicitudId: currentSolicitudId, 
    type: currentChatType, 
    content, 
    userId, 
    tempId, 
    timestamp 
  };

  if (socket.readyState === WebSocket.OPEN) {
    // Enviar el mensaje
    socket.send(JSON.stringify(messageToSend));
    
    // Actualizar estados del mensaje
    setTimeout(() => updateMessageStatus(tempId, 'sent'), 300);
    setTimeout(() => updateMessageStatus(tempId, 'delivered'), 1000);
  } else {
    // Manejar error de conexión
    updateMessageStatus(tempId, 'error');
    Swal.fire({ 
      icon: 'warning', 
      title: 'Conexión perdida', 
      text: 'Reconectando...' 
    });
    
    // Reintentar conexión
    setTimeout(() => { 
      closeChatModal(); 
      openChatModalSST(currentSolicitudId); 
    }, 2000);
  }

  // Limpiar input
  input.value = '';
};

// Función para cargar y mostrar los contactos en el chat
function loadChatContacts() {
  try {
    // Obtener todas las solicitudes visibles en la tabla
    const solicitudes = [];
    document.querySelectorAll('#solicitudesTable tbody tr').forEach(row => {
      const solicitudId = row.querySelector('.open-chat-btn')?.dataset.solicitudId;
      const empresa = row.cells[1]?.textContent.trim();
      const contratista = row.cells[2]?.textContent.trim();
      
      if (solicitudId && empresa && contratista) {
        solicitudes.push({ id: solicitudId, empresa, contratista });
      }
    });

    // Actualizar la información del contratista en la interfaz si no está ya establecida
    if (solicitudes.length > 0) {
      document.querySelectorAll('.contratista-name').forEach(el => {
        if (!el.textContent || el.textContent === 'Cargando...') {
          el.textContent = solicitudes[0].contratista + ' (' + solicitudes[0].empresa + ')';
        }
      });
    }

    // Asignar eventos a los contactos
    document.querySelectorAll('.contact-item').forEach(item => {
      // Eliminar eventos anteriores para evitar duplicados
      const clone = item.cloneNode(true);
      item.parentNode.replaceChild(clone, item);
      
      clone.addEventListener('click', function() {
        const type = this.dataset.type;
        
        // Resaltar el contacto seleccionado
        document.querySelectorAll('.contact-item').forEach(i => i.classList.remove('bg-gray-200'));
        this.classList.add('bg-gray-200');
        
        // Cambiar el título del chat según el contacto
        if (type === 'contratista') {
          if (currentSolicitudId) {
            // Usar el nombre que ya está en el elemento contratista-name
            const contratistaName = document.querySelector('.contratista-name')?.textContent || 
                                   `Contratista - Solicitud ${currentSolicitudId}`;
            document.getElementById('chatCurrentContact').textContent = contratistaName;
            changeContactType('sst');
          } else {
            Swal.fire({
              icon: 'info',
              title: 'Seleccione una solicitud',
              text: 'Para chatear con un contratista, primero debe seleccionar una solicitud específica.'
            });
          }
        } else if (type === 'soporte') {
          document.getElementById('chatCurrentContact').textContent = 'Soporte Técnico';
          changeContactType('soporte');
        }
      });
    });
  } catch (error) {
    console.error('Error al cargar contactos:', error);
  }
}

// Cambiar el tipo de contacto para el chat
function changeContactType(type) {
  // Limpiar mensajes actuales
  document.getElementById('chatMessages').innerHTML = '';
  displayedMessages.clear();
  
  // Cambiar el tipo de chat
  currentChatType = type;
  
  // Volver a cargar los mensajes según el tipo
  if (type === 'soporte') {
    loadChatMessages('global', 'soporte');
  } else if (type === 'sst' && currentSolicitudId) {
    loadChatMessages(currentSolicitudId, 'sst');
  }
}

// Cargar mensajes del chat para un tipo específico
async function loadChatMessages(solicitudId, tipo) {
  try {
    const userId = getSstUserId();
    if (!userId) throw new Error('No se pudo obtener ID de usuario');
    
    // Mostrar indicador de carga
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.innerHTML = '<div class="flex justify-center my-4"><div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-ga-gold"></div></div>';
    
    // Inicializar chat si es necesario (asegura que existe la conversación)
    await fetch(`/api/chat/iniciar/${solicitudId}/${tipo}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId })
    }).catch(err => console.warn(`Error al inicializar chat ${tipo}:`, err));
    
    // Marcar mensajes como leídos
    await fetch(`/api/chat/marcar-todos-leidos`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ solicitudId, tipo, userId })
    }).catch(err => console.warn('Error al marcar mensajes como leídos:', err));
    
    // Obtener mensajes
    const response = await fetch(`/api/chat/${solicitudId}/${tipo}?limit=30&userId=${userId}`);
    if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
    
    const messages = await response.json();
    console.log('Mensajes cargados:', messages.length);
    
    // Establecer ID del mensaje más antiguo para scroll infinito
    if (messages.length > 0) {
      oldestMessageId = messages.reduce((min, curr) => parseInt(curr.id) < parseInt(min.id) ? curr : min).id;
    } else {
      oldestMessageId = null;
    }
    
    // Mostrar mensajes
    chatMessages.innerHTML = messages.length === 0 ? 
      '<div class="text-center text-gray-500 p-4">No hay mensajes. Escribe para comenzar.</div>' : '';
    
    // Ordenar mensajes por fecha antes de mostrarlos
    messages
      .sort((a, b) => new Date(a.created_at) - new Date(b.created_at))
      .forEach(message => {
        if (!displayedMessages.has(message.id)) {
          displayMessage(message);
          displayedMessages.add(message.id);
        }
      });
    
    // Hacer scroll al final
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    // Configurar listener de scroll
    chatMessages.removeEventListener('scroll', scrollHandler);
    chatMessages.addEventListener('scroll', scrollHandler);
    
  } catch (error) {
    console.error(`Error al cargar mensajes (${tipo}):`, error);
    document.getElementById('chatMessages').innerHTML = 
      `<div class="text-center text-red-500 p-4">Error al cargar mensajes: ${error.message}</div>`;
  }
}

// Filtro de solicitudes
document.getElementById('formFiltro').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  // Obtener los valores de los filtros
  const formData = new FormData(this);
  const params = new URLSearchParams();
  
  // Añadir todos los campos no vacíos a los parámetros
  for (const [key, value] of formData.entries()) {
    if (value.trim() !== '') {
      params.append(key, value);
    }
  }
  
  try {
    // Mostrar indicador de carga
    Swal.fire({
      title: 'Filtrando...',
      text: 'Buscando solicitudes...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
    
    // Realizar la petición
    const response = await fetch(`/api/sst/filtrar-solicitudes?${params.toString()}`);
    
    if (!response.ok) {
      throw new Error(`Error al filtrar: ${response.status}`);
    }
    
    const solicitudes = await response.json();
    
    // Actualizar tabla con resultados
    actualizarTablaSolicitudes(solicitudes);
    
    // Cerrar indicador de carga
    Swal.close();
    
    // Mostrar mensaje de resultados
    Swal.fire({
      icon: 'success',
      title: 'Filtro aplicado',
      text: `Se encontraron ${solicitudes.length} solicitudes`,
      timer: 1500,
      showConfirmButton: false
    });
  } catch (error) {
    console.error('Error al filtrar solicitudes:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: `No se pudo filtrar: ${error.message}`
    });
  }
});

// Limpiar filtros
document.getElementById('limpiarFiltros').addEventListener('click', function() {
  document.getElementById('formFiltro').reset();
  cargarTodasSolicitudes();
});

// Función para cargar todas las solicitudes
async function cargarTodasSolicitudes() {
  try {
    // Mostrar indicador de carga
    Swal.fire({
      title: 'Cargando...',
      text: 'Obteniendo solicitudes...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
    
    const response = await fetch('/api/sst/filtrar-solicitudes');
    
    if (!response.ok) {
      throw new Error(`Error al cargar: ${response.status}`);
    }
    
    const solicitudes = await response.json();
    
    // Actualizar tabla con resultados
    actualizarTablaSolicitudes(solicitudes);
    
    // Cerrar indicador de carga
    Swal.close();
  } catch (error) {
    console.error('Error al cargar solicitudes:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: `No se pudieron cargar las solicitudes: ${error.message}`
    });
  }
}

// Función para inicializar el chat vía WebSocket
function initChat() {
  try {
    // Obtener ID de usuario
    const userId = getSstUserId();
    if (!userId) throw new Error('No se pudo obtener ID de usuario');

    // Inicializar chat para esta solicitud
    fetch(`/api/chat/iniciar/${currentSolicitudId}/${currentChatType}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId })
    }).catch(err => console.warn('Error al inicializar chat:', err));

    // Cerrar WebSocket existente si hay uno
    if (socket && socket.readyState === WebSocket.OPEN) {
      socket.close();
    }

    // Iniciar nuevo WebSocket
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    socket = new WebSocket(`${protocol}//${window.location.host}/ws`);
    
    socket.onopen = function() {
      console.log('🔌 WebSocket conectado');
      
      socket.send(JSON.stringify({
        type: 'identify',
        userId: userId,
        role: 'sst',
        solicitudId: currentSolicitudId
      }));
    };
    
    socket.onmessage = (event) => {
      console.log('Mensaje recibido:', event.data);
      const message = JSON.parse(event.data);
      
      if (message.type === 'identify_confirmation') return;
      
      if (message.type === 'status_update') {
        const { tempId, status, messageId } = message;
        const existing = document.querySelector(`.chat-message[data-message-id="${tempId}"]`);
        if (existing) {
          existing.dataset.messageId = messageId;
          updateMessageStatus(messageId, status);
          sentMessages.set(tempId, messageId);
          displayedMessages.add(messageId);
        }
        return;
      }

      if (message.id && message.solicitudId) {
        const isSender = parseInt(message.usuario_id) === parseInt(userId);
        if (isSender && sentMessages.has(message.tempId || String(message.id))) return;
        if (displayedMessages.has(message.id)) return;

        const normalizedMessage = {
          id: message.id,
          usuario_id: message.usuario_id,
          content: message.content,
          created_at: message.created_at,
          type: message.type || 'sst',
          leido: message.leido || false
        };

        if (message.solicitudId === currentSolicitudId && message.type === currentChatType) {
          displayMessage(normalizedMessage);
          displayedMessages.add(message.id);
          if (!isSender) markMessagesAsRead(currentSolicitudId, currentChatType);
        } else {
          updateUnreadCountSST(message.solicitudId);
        }
      }
    };
    
    socket.onerror = (error) => {
      console.error('Error en WebSocket:', error);
    };
    
    socket.onclose = () => {
      console.log('WebSocket cerrado');
    };
  } catch (error) {
    console.error('Error al inicializar chat:', error);
  }
}

// Función para cargar los mensajes existentes
function loadChatMessages() {
  if (!currentSolicitudId || !currentChatType) {
    const chatLoading = document.getElementById('chatLoading');
    if (chatLoading) {
      chatLoading.style.display = 'none';
    }
    return;
  }

  const userId = getSstUserId();
  if (!userId) {
    const chatLoading = document.getElementById('chatLoading');
    if (chatLoading) {
      chatLoading.style.display = 'none';
    }
    return;
  }

  // Verificar si existe el elemento chatLoading
  const chatLoading = document.getElementById('chatLoading');
  if (chatLoading) {
    chatLoading.style.display = 'block';
  } else {
    // Si no existe, mostramos un indicador de carga en el área de mensajes
    document.getElementById('chatMessages').innerHTML = `
      <div class="text-center my-4 text-gray-500">
        <div class="spinner-border text-primary" role="status">
          <span class="sr-only">Cargando...</span>
        </div>
        <p class="mt-2">Cargando mensajes...</p>
      </div>
    `;
  }
  
  // Limpiar mensajes anteriores (hacemos esto solo si no estamos mostrando el indicador de carga en el mismo contenedor)
  if (chatLoading) {
    document.getElementById('chatMessages').innerHTML = '';
  }
  
  sentMessages.clear();
  displayedMessages.clear();

  fetch(`/api/chat/mensajes/${currentSolicitudId}/${currentChatType}?userId=${userId}`)
    .then(response => {
      if (!response.ok) throw new Error('No se pudieron cargar los mensajes');
      return response.json();
    })
    .then(data => {
      // Ordenar mensajes por fecha (más antiguos primero)
      const messages = data.sort((a, b) => 
        new Date(a.created_at).getTime() - new Date(b.created_at).getTime()
      );
      
      // Mostrar mensajes
      messages.forEach(msg => {
        displayMessage(msg);
        displayedMessages.add(msg.id);
      });
      
      // Marcar mensajes como leídos
      markMessagesAsRead(currentSolicitudId, currentChatType);
      
      // Ocultar indicador de carga
      if (chatLoading) {
        chatLoading.style.display = 'none';
      }
      
      // Scroll al último mensaje
      const chatContainer = document.getElementById('chatMessages');
      chatContainer.scrollTop = chatContainer.scrollHeight;
    })
    .catch(error => {
      console.error('Error al cargar mensajes:', error);
      
      if (chatLoading) {
        chatLoading.style.display = 'none';
      }
      
      document.getElementById('chatMessages').innerHTML = `
        <div class="text-center my-4 text-gray-500">
          <p>Error al cargar mensajes: ${error.message}</p>
          <button class="btn btn-sm btn-outline-secondary mt-2" onclick="loadChatMessages()">
            Reintentar
          </button>
        </div>
      `;
    });
}
 
  </script>
</body>
</html>
