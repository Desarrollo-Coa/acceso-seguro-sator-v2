<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

  <style>
    .vencido { color: #ff0000; }  

    nav{
      display: flex;
      gap: 20px;

    }
  </style>
</head>
<body>
  <nav class="flex   items-center bg-gray-800 text-white p-4" id="nav">
    <a class="text-lg font-semibold" href="#">Vista SST -   <a href="/capacitacion/listado">Gestionar Capacitaciones</a>      </a>
  
    <a class="text-lg" href="/logout">Cerrar sesión</a>
  </nav>

  <div class="container mt-5">
    <h1>Solicitudes</h1>
    <div class="mb-3">
      <label for="filtroId" class="form-label">Filtrar por ID:</label>
      <input type="text" class="form-control" id="filtroId" placeholder="Ingrese el ID de la solicitud">
    </div>

    <div class="table-responsive">
      <table class="table table-bordered">
        <thead>
          <tr>
            <th>ID</th>
            <th>Empresa</th>
            <th>NIT</th>
            <th>Inicio de Obra</th>
            <th>Fin de Obra</th>
            <th>Días Solicitados</th>
            <th>Lugar</th>
            <th>Labor</th>
            <th>Interventor</th>
            <th>Documentos</th>
            <th>Colaboradores</th> <!-- Nueva columna -->
            <th>Acción</th>
            <th>Mensajes</th>
          </tr>
        </thead>
        <tbody id="tablaSolicitudes">
          <% solicitud.forEach(solicitud => { %>
              <tr class="solicitud-item" data-id="<%= solicitud.id %>">
                  <td><%= solicitud.id %></td>
                  <td><%= solicitud.empresa %></td>
                  <td><%= solicitud.nit %></td>
                  <td><%= solicitud.inicio_obra %></td>
                  <td><%= solicitud.fin_obra %></td>
                  <td><%= solicitud.dias_trabajo %></td>
                  <td><%= solicitud.lugar %></td>
                  <td><%= solicitud.labor %></td>
                  <td><%= solicitud.interventor %></td>
                  <td>
                    <% const doc = solicitud_url_download.find(d => d.solicitud_id === solicitud.id); %>
                    <% if (doc) { %>
                      <button class="btn btn-success btn-sm descargar-btn" data-url="<%= doc.url %>">Descargar Documentos</button>
                    <% } else { %>
                      <button class="btn btn-info btn-sm generar-btn" data-id="<%= solicitud.id %>">Generar Documentos</button>
                    <% } %>
                  </td>
                  <td>
                    <button class="btn btn-info btn-sm" onclick="verColaboradores('<%= solicitud.id %>')">Ver Colaboradores</button>
                  </td>
                  <td>
                    <% if (solicitud.estado === 'pendiente') { %>
                      <form action="/aprobar-solicitud/<%= solicitud.id %>" method="POST" style="display:inline;">
                        <button type="submit" class="btn btn-success btn-sm" id="aprobarBtn-<%= solicitud.id %>">Aprobar</button>
                      </form>
                      <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#modalNegar" data-id="<%= solicitud.id %>" data-empresa="<%= solicitud.empresa %>" data-nit="<%= solicitud.nit %>">
                        Negar
                      </button>
                    <% } else { %>
                      <span class="badge <%= ['negada'].includes(solicitud.estado) ? 'badge-danger' : 'badge-success' %>">
                        <%= ['negada'].includes(solicitud.estado) ? 'Negada' : 'Aprobado' %>
                      </span>
                    <% } %>
                  </td>
                  <td>
              
                    <!-- Botón Conversar añadido -->
                    <button class="btn btn-primary btn-sm ml-2 open-chat-btn" data-solicitud-id="<%= solicitud.id %>">
                      Conversar <span class="badge badge-light unread-count" data-solicitud-id="<%= solicitud.id %>">0</span>
                    </button>
                  </td>
              </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Modal para Negar Solicitud -->
  <div class="modal fade" id="modalNegar" tabindex="-1" role="dialog" aria-labelledby="modalNegarLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modalNegarLabel">Negar Solicitud</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="negarForm">
            <div class="form-group">
              <label for="empresa">Empresa:</label>
              <input type="text" class="form-control" id="empresa" disabled>
            </div>
            <div class="form-group">
              <label for="nit">NIT:</label>
              <input type="text" class="form-control" id="nit" disabled>
            </div>
            <div class="form-group">
              <label for="comentario">Comentario:</label>
              <textarea class="form-control" id="comentario" name="comentario" rows="4"></textarea>
            </div>
            <button type="submit" class="btn btn-danger">Negar Solicitud</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para Ver Colaboradores -->
  <div class="modal fade" id="colaboradoresModal" tabindex="-1" role="dialog" aria-labelledby="colaboradoresModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="colaboradoresModalLabel">Colaboradores de la Solicitud</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <p><strong>ID de la Solicitud:</strong> <span id="colaboradoresId"></span></p>
          <p><strong>Empresa:</strong> <span id="colaboradoresEmpresa"></span></p>
          <p><strong>Contratista:</strong> <span id="colaboradoresContratista"></span></p>
          <div class="mb-3">
            <label for="filtroEstado" class="form-label">Filtrar por Estado:</label>
            <select class="form-select" id="filtroEstado">
              <option value="todos">Todos</option>
              <option value="habilitados">Habilitados</option>
              <option value="inhabilitados">Inhabilitados</option>
            </select>
          </div>
          <div class="table-responsive">
            <table class="table table-bordered">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Nombre</th>
                  <th>Cédula</th>
                  <th>Estado</th>
                  <th>Curso SISO</th>
                  <th>Plantilla SS</th>
                  <th>Definir Plantilla SS</th>
                  <th>Historial</th>
                </tr>
              </thead>
              <tbody id="tablaColaboradores"></tbody>
            </table>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de Chat para SST -->
<div id="chatModalSST" class="fixed inset-0 z-50 hidden bg-gray-900 bg-opacity-50 flex justify-center items-center">
  <div class="bg-white w-full max-w-4xl h-3/4 rounded-lg shadow-lg overflow-hidden flex flex-col">
    <!-- Header del chat -->
    <div class="bg-gray-800 text-white px-4 py-3 flex justify-between items-center">
      <h5 class="text-lg font-semibold">Chat SST - Solicitud <span id="chatSolicitudIdSST"></span></h5>
      <button type="button" onclick="closeChatModalSST()" class="text-white hover:text-yellow-500">
        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <!-- Cuerpo del chat -->
    <div class="flex-1 p-4 overflow-y-auto" id="chatMessagesSST"></div>
    <!-- Input para enviar mensajes -->
    <div class="border-t border-gray-200 p-4">
      <div class="flex space-x-2">
        <textarea id="chatInputSST" class="flex-1 p-2 border border-gray-300 rounded-md resize-none" rows="2" placeholder="Escribe un mensaje..."></textarea>
        <button onclick="sendMessageSST()" class="bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-yellow-500">Enviar</button>
      </div>
    </div>
  </div>
</div>

  
  <!-- Modal para Definir Plantilla SS -->
  <div class="modal fade" id="definirPlantillaModal" tabindex="-1" role="dialog" aria-labelledby="definirPlantillaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="definirPlantillaModalLabel">Definir Plantilla de Seguridad Social</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="plantillaForm">
            <input type="hidden" id="colaboradorId">
            <input type="hidden" id="solicitudId">
            <input type="hidden" id="plantillaId">
            <div class="mb-3">
              <label for="fechaInicio" class="form-label">Fecha de Inicio:</label>
              <input type="date" class="form-control" id="fechaInicio" required>
            </div>
            <div class="mb-3">
              <label for="fechaFin" class="form-label">Fecha de Fin:</label>
              <input type="date" class="form-control" id="fechaFin" required>
            </div>
            <button type="submit" class="btn btn-primary">Guardar</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para Historial de Cursos -->
  <div class="modal fade" id="historialModal" tabindex="-1" role="dialog" aria-labelledby="historialModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="historialModalLabel">Historial de Cursos</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <table class="table table-bordered">
            <thead>
              <tr>
                <th>Curso</th>
                <th>Estado</th>
                <th>Puntaje</th>
                <th>Fecha de Vencimiento</th>
              </tr>
            </thead>
            <tbody id="tablaHistorial"></tbody>
          </table>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
  <script>
    // Filtrar por ID
    $('#filtroId').on('input', function() {
      var idFiltro = $(this).val().toLowerCase();
      $('#tablaSolicitudes .solicitud-item').each(function() {
        var solicitudId = $(this).data('id').toString();
        if (solicitudId.indexOf(idFiltro) !== -1) {
          $(this).show();
        } else {
          $(this).hide();
        }
      });
    });

    // Modal para negar solicitud
    $('#modalNegar').on('show.bs.modal', function(event) {
      var button = $(event.relatedTarget);
      var id = button.data('id');
      var empresa = button.data('empresa');
      var nit = button.data('nit');
      var modal = $(this);
      modal.find('#empresa').val(empresa);
      modal.find('#nit').val(nit);
      modal.find('#negarForm').attr('action', '/negar-solicitud/' + id);
    });

    // Descargar archivo
    function descargarArchivo(url) {
      Swal.fire({
        title: 'Descargando...',
        text: 'Por favor espera mientras se descarga el documento.',
        allowOutsideClick: false,
        didOpen: () => { Swal.showLoading(); }
      });
      window.open(url, '_blank');
      Swal.close();
    }

    // Generar documentos
    function generarDocumento(id) {
      Swal.fire({
        title: 'Generando...',
        text: 'Por favor espera mientras se genera el documento.',
        allowOutsideClick: false,
        didOpen: () => { Swal.showLoading(); }
      });
      fetch(`/descargar-solicitud/${id}`)
        .then(response => response.ok ? response.json() : Promise.reject('Error en la respuesta'))
        .then(data => {
          if (data.success) {
            window.open(data.url, '_blank');
            Swal.fire({ icon: 'success', title: 'Éxito', text: data.message || 'Documento generado correctamente' });
            const btnContainer = document.querySelector(`tr[data-id="${id}"] td:nth-child(10)`);
            if (btnContainer) {
              btnContainer.innerHTML = `<button class="btn btn-success btn-sm descargar-btn" data-url="${data.url}">Descargar Documentos</button>`;
              btnContainer.querySelector('.descargar-btn').addEventListener('click', function() { descargarArchivo(data.url); });
            }
          } else {
            throw new Error(data.error || 'Error al generar el documento');
          }
        })
        .catch(error => {
          Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'No se pudo generar el documento.' });
          console.error('Error al generar:', error);
        });
    }

    $('.descargar-btn').on('click', function() {
      const url = $(this).data('url');
      descargarArchivo(url);
    });

    $('.generar-btn').on('click', function() {
      const id = $(this).data('id');
      generarDocumento(id);
    });

    // Ver Colaboradores
    async function verColaboradores(solicitudId) {
    try {
      const response = await fetch(`/api/sst/colaboradores/${solicitudId}`);
      const data = await response.json();
      if (!response.ok) throw new Error(data.message || 'Error al obtener colaboradores');

      // Depuración: Verifica los datos recibidos del backend
      console.log('Datos recibidos del backend:', data);

      // Rellenar información del modal
      $('#colaboradoresId').text(data.id);
      $('#colaboradoresEmpresa').text(data.empresa);
      $('#colaboradoresContratista').text(data.contratista || 'N/A');

      // Llenar la tabla de colaboradores
      const tbody = $('#tablaColaboradores');
      tbody.empty();

      data.colaboradores.forEach(col => {
        // Plantilla SS: Vigente, Vencido o No definida
        const plantillaSS = col.plantillaSS 
          ? (new Date(col.plantillaSS.fecha_fin) > new Date() ? 'Vigente' : 'Vencido') 
          : 'No definida';

        // Curso SISO: Usa "No" si es null o undefined
        const cursoSisoEstado = col.cursoSiso || 'No';
        const cursoSisoClass = cursoSisoEstado === 'Vencido' ? 'vencido' : '';

        // Agregar fila a la tabla
        tbody.append(`
          <tr data-estado="${col.estado ? 'habilitado' : 'inhabilitado'}">
            <td>${col.id}</td>
            <td>${col.nombre}</td>
            <td>${col.cedula}</td>
            <td>${col.estado ? 'Habilitado' : 'Inhabilitado'}</td>
            <td class="${cursoSisoClass}">${cursoSisoEstado}</td>
            <td>${plantillaSS}</td>
            <td><button class="btn btn-primary btn-sm" onclick="definirPlantilla(${col.id}, ${solicitudId})">Definir</button></td>
            <td><button class="btn btn-info btn-sm" onclick="verHistorial(${col.id})">Ver</button></td>
          </tr>
        `);
      });

      // Filtro por estado (Habilitados/Inhabilitados)
      $('#filtroEstado').off('change').on('change', function() {
        const filtro = $(this).val();
        $('#tablaColaboradores tr').each(function() {
          const estado = $(this).data('estado');
          if (filtro === 'todos' || 
              (filtro === 'habilitados' && estado === 'habilitado') || 
              (filtro === 'inhabilitados' && estado === 'inhabilitado')) {
            $(this).show();
          } else {
            $(this).hide();
          }
        });
      });

      // Mostrar el modal
      $('#colaboradoresModal').modal('show');
    } catch (error) {
      Swal.fire({ 
        icon: 'error', 
        title: 'Error', 
        text: error.message || 'No se pudieron cargar los colaboradores.' 
      });
    }
  }
    // Definir Plantilla SS

async function definirPlantilla(colaboradorId, solicitudId) {
      $('#colaboradorId').val(colaboradorId);
      $('#solicitudId').val(solicitudId);
      $('#plantillaId').val('');
      $('#fechaInicio').val('').removeClass('vencido');
      $('#fechaFin').val('').removeClass('vencido');

      try {
        const response = await fetch(`/api/sst/plantilla-ss/${colaboradorId}`);
        const data = await response.json();
        console.log('Datos recibidos de la plantilla:', data); // Depuración

        if (response.ok && data.plantilla) {
          $('#plantillaId').val(data.plantilla.id);
          $('#fechaInicio').val(data.plantilla.fecha_inicio);
          $('#fechaFin').val(data.plantilla.fecha_fin);

          const fechaFin = new Date(data.plantilla.fecha_fin);
          const hoy = new Date();
          if (fechaFin <= hoy) {
            $('#fechaFin').addClass('vencido');
          }
        }
      } catch (error) {
        console.error('Error al cargar plantilla existente:', error);
        Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo cargar la plantilla existente.' });
      }

      $('#definirPlantillaModal').modal('show');
    }

    $('#plantillaForm').on('submit', async function(e) {
      e.preventDefault();
      const colaboradorId = $('#colaboradorId').val();
      const solicitudId = $('#solicitudId').val();
      const plantillaId = $('#plantillaId').val();
      const fechaInicio = $('#fechaInicio').val();
      const fechaFin = $('#fechaFin').val();

      const method = plantillaId ? 'PUT' : 'POST';
      const url = plantillaId ? `/api/sst/plantilla-ss/${plantillaId}` : '/api/sst/plantilla-ss';

      try {
        const response = await fetch(url, {
          method,
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ colaboradorId, solicitudId, fechaInicio, fechaFin })
        });
        const data = await response.json();
        if (response.ok) {
          Swal.fire({ icon: 'success', title: 'Éxito', text: 'Plantilla guardada correctamente.' });
          $('#definirPlantillaModal').modal('hide');
          verColaboradores(solicitudId); // Refrescar la tabla
        } else {
          throw new Error(data.message || 'Error al guardar la plantilla.');
        }
      } catch (error) {
        Swal.fire({ icon: 'error', title: 'Error', text: error.message });
      }
    });
    
    // Ver Historial de Cursos
    async function verHistorial(colaboradorId) {
      try {
        const response = await fetch(`/api/sst/historial-cursos/${colaboradorId}`);
        const data = await response.json();
        if (!response.ok) throw new Error(data.message || 'Error al obtener historial');

        const tbody = $('#tablaHistorial');
        tbody.empty();
        data.historial.forEach(h => {
          tbody.append(`
            <tr>
              <td>${h.nombre}</td>
              <td>${h.estado}</td>
              <td>${h.puntaje_obtenido}</td>
              <td>${new Date(h.fecha_vencimiento).toLocaleDateString()}</td>
            </tr>
          `);
        });

        $('#historialModal').modal('show');
      } catch (error) {
        Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'No se pudo cargar el historial.' });
      }
    }



    // Variables globales para el chat SST
let currentSolicitudIdSST = null;
let socketSST = null;
let oldestMessageIdSST = null;

// Abrir modal de chat desde los botones
document.querySelectorAll('.open-chat-btn').forEach(btn => {
  btn.addEventListener('click', function() {
    const solicitudId = this.dataset.solicitudId;
    openChatModalSST(solicitudId);
  });
});

// Abrir modal de chat
async function openChatModalSST(solicitudId) {
  currentSolicitudIdSST = solicitudId;
  document.getElementById('chatSolicitudIdSST').textContent = solicitudId;
  document.getElementById('chatModalSST').classList.remove('hidden');

  // Iniciar WebSocket con protocolo seguro cuando es necesario
  if (!socketSST || socketSST.readyState !== WebSocket.OPEN) {
    // Detectar si estamos en HTTPS para usar WSS o WS
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.host}/ws/chat/sst`;
    
    console.log(`[SST] Conectando a WebSocket: ${wsUrl}`);
    socketSST = new WebSocket(wsUrl);
    
    socketSST.onopen = function() {
      console.log('[SST] WebSocket conectado correctamente');
    };
    
    socketSST.onmessage = function(event) {
      const message = JSON.parse(event.data);
      console.log("[SST] Mensaje recibido desde WebSocket:", message);
      
      // Solo procesar mensajes para la solicitud actual y de tipo SST
      if (message.solicitudId === currentSolicitudIdSST && message.type === 'sst') {
        // Mostrar el mensaje en el chat
        displayMessageSST(message);
        
        // Importante: Solo notificar si el mensaje NO fue enviado por este usuario
        // y si la ventana no está visible
        const sstUserId = getSSUserId();
        if (parseInt(message.usuario_id) !== parseInt(sstUserId) && document.hidden) {
          console.log("[SST] Enviando notificación de nuevo mensaje recibido");
          notifyNewMessageSST(message);
        }
      }
      
      // Actualizar el contador de mensajes no leídos para esta solicitud
      // pero solo si la solicitud no está abierta actualmente
      if (message.solicitudId !== currentSolicitudIdSST || document.hidden) {
        updateUnreadCountSST(message.solicitudId);
      }
    };
    
    socketSST.onclose = function() {
      console.log('WebSocket SST cerrado');
    };
    
    socketSST.onerror = function(error) {
      console.error('Error en WebSocket SST:', error);
    };
  }

  // Cargar los últimos 20 mensajes
  await loadInitialMessagesSST(solicitudId);
  
  // Marcar mensajes como leídos
  await markMessagesAsReadSST(solicitudId);

  // Configurar scroll para carga progresiva
  const chatMessages = document.getElementById('chatMessagesSST');
  chatMessages.addEventListener('scroll', () => {
    if (chatMessages.scrollTop === 0 && oldestMessageIdSST) {
      loadMoreMessagesSST(solicitudId);
    }
  });
  
  // Marcar mensajes como leídos al abrir
  await fetch(`/api/chat/${solicitudId}/sst/mark-read`, { method: 'POST' });
  updateUnreadCountSST(solicitudId);
}

// Modificar la función para manejar notificaciones

function notifyNewMessageSST(message) {
  if (!("Notification" in window)) {
    console.log("Este navegador no soporta notificaciones");
    return;
  }
  
  if (Notification.permission === "granted") {
    // Buscar información de la solicitud para incluir en la notificación
    const solicitudRow = document.querySelector(`tr[data-id="${message.solicitudId}"]`);
    let empresa = "Empresa no identificada";
    
    if (solicitudRow) {
      const empresaCell = solicitudRow.querySelector('td:nth-child(2)');
      if (empresaCell) {
        empresa = empresaCell.textContent.trim();
      }
    }
    
    const notification = new Notification(`Nuevo mensaje de ${empresa}`, {
      body: `Solicitud #${message.solicitudId}: ${message.content}`,
      icon: '/img/logo.png'
    });
    
    notification.onclick = function() {
      window.focus();
      openChatModalSST(message.solicitudId);
    };
  } else if (Notification.permission !== "denied") {
    Notification.requestPermission().then(permission => {
      if (permission === "granted") {
        notifyNewMessageSST(message);
      }
    });
  }
}

// Función para marcar mensajes como leídos
async function markMessagesAsReadSST(solicitudId) {
  try {
    const sstUserId = getSSUserId(); // Obtener ID de usuario SST
    
    console.log(`[SST] Marcando mensajes como leídos para solicitud ${solicitudId}, usuario ${sstUserId}`);
    
    const response = await fetch(`/api/chat/${solicitudId}/sst/mark-read`, { 
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ userId: sstUserId }) // Incluir userId en el cuerpo
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('Error al marcar mensajes como leídos:', errorData);
      throw new Error(errorData.message || 'Error al marcar mensajes como leídos');
    }
    
    // Actualizar contador visual
    updateUnreadCountSST(solicitudId);
  } catch (error) {
    console.error('[SST] Error al marcar mensajes como leídos:', error);
  }
}

// Cerrar modal de chat
window.closeChatModalSST = function() {
  document.getElementById('chatModalSST').classList.add('hidden');
  if (socketSST) {
    socketSST.close();
  }
  currentSolicitudIdSST = null;
  oldestMessageIdSST = null;
};

// Cargar los últimos 20 mensajes
async function loadInitialMessagesSST(solicitudId) {
  const chatMessages = document.getElementById('chatMessagesSST');
  chatMessages.innerHTML = ''; // Limpiar mensajes existentes
  
  try {
    const sstUserId = getSSUserId();
    console.log("Usuario SST ID:", sstUserId);
    
    const response = await fetch(`/api/chat/${solicitudId}/sst?limit=20&userId=${sstUserId}`);
    
    if (!response.ok) {
      throw new Error(`Error al cargar mensajes: ${response.status}`);
    }
    
    const messages = await response.json();
    console.log("Mensajes cargados:", messages);
    
    // Invertimos los mensajes para mostrar en orden cronológico (más antiguos primero)
    const orderedMessages = [...messages].reverse();
    
    for (const message of orderedMessages) {
      // No sobrescribimos la propiedad isSender que viene del servidor
      displayMessageSST(message);
    }
    
    if (messages.length > 0) {
      oldestMessageIdSST = messages[0].id;
    }
    
    // Scroll al final
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
  } catch (error) {
    console.error('Error al cargar mensajes iniciales:', error);
    chatMessages.innerHTML = '<div class="text-center p-3 text-red-500">Error al cargar mensajes. Por favor intente nuevamente.</div>';
  }
}

// Cargar más mensajes al hacer scroll hacia arriba
async function loadMoreMessagesSST(solicitudId) {
  if (!oldestMessageIdSST) return;
  
  try {
    const sstUserId = getSSUserId();
    const response = await fetch(`/api/chat/${solicitudId}/sst?limit=20&before=${oldestMessageIdSST}&userId=${sstUserId}`);
    
    if (!response.ok) {
      throw new Error(`Error al cargar mensajes: ${response.status}`);
    }
    
    const messages = await response.json();
    
    if (messages.length > 0) {
      const chatMessages = document.getElementById('chatMessagesSST');
      const scrollHeightBefore = chatMessages.scrollHeight;
      const scrollTopBefore = chatMessages.scrollTop;
      
      // Mostrar mensajes en orden cronológico
      const orderedMessages = [...messages].reverse();
      
      for (const message of orderedMessages) {
        // No sobrescribimos isSender
        displayMessageSST(message);
      }
      
      oldestMessageIdSST = messages[0].id;
      
      // Mantener la posición del scroll
      chatMessages.scrollTop = scrollTopBefore + (chatMessages.scrollHeight - scrollHeightBefore);
    } else {
      oldestMessageIdSST = null; // No hay más mensajes
    }
  } catch (error) {
    console.error('Error al cargar más mensajes:', error);
  }
}

// Corregir la función displayMessageSST 
function displayMessageSST(message) {
  const chatMessages = document.getElementById('chatMessagesSST');
  const messageDiv = document.createElement('div');
  
  console.log("Mostrando mensaje:", message);
  
  // IMPORTANTE: Determinar explícitamente si es un mensaje enviado por el usuario actual
  const sstUserId = getSSUserId();
  const isSender = parseInt(message.usuario_id) === parseInt(sstUserId);
  console.log(`El mensaje es de: ${message.usuario_id}, Usuario SST: ${sstUserId}, isSender: ${isSender}`);
  
  // Aplicar clase según el remitente
  messageDiv.className = `p-3 my-2 rounded-lg ${isSender ? 
    'bg-blue-600 text-white ml-auto' : 
    'bg-gray-200 text-gray-800'} max-w-xs`;
  
  // Extraer correctamente el contenido del mensaje
  let messageContent = '';
  
  if (typeof message.content === 'string') {
    try {
      // Intentar analizar si es un JSON
      const jsonContent = JSON.parse(message.content);
      messageContent = jsonContent.text || jsonContent.value || JSON.stringify(jsonContent);
    } catch (e) {
      // Si no es un JSON válido, usar el string directamente
      messageContent = message.content;
    }
  } else if (message.content && message.content.text) {
    messageContent = message.content.text;
  } else if (message.content && typeof message.content === 'object') {
    messageContent = message.content.text || message.content.value || JSON.stringify(message.content);
  } else {
    messageContent = String(message.content || "Mensaje sin contenido");
  }
  
  // Incluir hora del mensaje
  const messageTime = new Date(message.created_at).toLocaleTimeString('es-ES', {
    hour: '2-digit',
    minute: '2-digit'
  });
  
  // Crear contenido HTML para el mensaje
  messageDiv.innerHTML = `
    <div class="text-sm mb-1">${messageContent}</div>
    <div class="text-xs text-${isSender ? 'white' : 'gray'}-500 text-right">${messageTime}</div>
  `;
  
  // Almacenar el ID del usuario para referencia futura
  messageDiv.dataset.userId = message.usuario_id;
  messageDiv.dataset.isSender = isSender;
  
  // Insertar en el orden correcto 
  if (chatMessages.firstChild) {
    chatMessages.appendChild(messageDiv); // Añadir al final para mantener orden cronológico
  } else {
    chatMessages.appendChild(messageDiv);
  }
  
  // Auto-scroll si estamos cerca del fondo
  const isNearBottom = chatMessages.scrollHeight - chatMessages.scrollTop - chatMessages.clientHeight < 100;
  if (isNearBottom) {
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }
}

// Enviar mensaje
window.sendMessageSST = function() {
  const input = document.getElementById('chatInputSST');
  const content = input.value.trim();
  if (!content || !currentSolicitudIdSST || !socketSST) return;

  const sstUserId = getSSUserId();
  
  // Crear el mensaje a enviar
  const message = {
    solicitudId: currentSolicitudIdSST,
    type: 'sst',
    content: content,
    userId: sstUserId
  };

  console.log("[SST] Enviando mensaje:", message);
  
  // Enviar el mensaje al servidor
  socketSST.send(JSON.stringify(message));
  
  // Crear representación local del mensaje enviado
  const localMessage = {
    id: 'temp-' + Date.now(),
    usuario_id: sstUserId, // Importante: usar el ID real
    content: content,
    created_at: new Date().toISOString()
  };
  
  // Aplicar explícitamente isSender = true al mensaje local
  // para asegurar que se muestre correctamente como enviado
  localMessage.isSender = true;
  
  // Mostrar mensaje inmediatamente en la interfaz
  displayMessageSST(localMessage);
  
  // Limpiar el input y hacer scroll al final
  input.value = '';
  const chatMessages = document.getElementById('chatMessagesSST');
  chatMessages.scrollTop = chatMessages.scrollHeight;
};

// Actualizar contador de mensajes no leídos para SST
async function updateUnreadCountSST(solicitudId) {
  try {
    // Obtener el ID del usuario SST actual
    const sstUserId = getSSUserId();
    console.log(`[SST] Actualizando contadores para solicitud ${solicitudId}, usuario SST: ${sstUserId}`);
    
    const response = await fetch(`/api/chat/${solicitudId}/sst/unread?userId=${sstUserId}`);
    if (!response.ok) {
      throw new Error('Error al obtener contador de mensajes no leídos');
    }
    
    const data = await response.json();
    console.log(`[SST] Contador recibido para solicitud ${solicitudId}:`, data);
    
    // Actualizar el contador visual solo para el usuario SST
    const badge = document.querySelector(`.unread-count[data-solicitud-id="${solicitudId}"]`);
    if (badge) {
      // Solo mostrar el contador si hay mensajes no leídos
      if (data.unreadCount > 0) {
        badge.textContent = data.unreadCount;
        badge.classList.remove('hidden');
      } else {
        badge.textContent = '0';
        badge.classList.add('hidden');
      }
    }
  } catch (error) {
    console.error('[SST] Error al actualizar contador:', error);
  }
}

// Obtener el ID del usuario SST actual
function getSSUserId() {
  // Como sabemos que el ID del usuario SST es 3 (según los logs)
  // Este valor debe coincidir con tu usuario SST en la base de datos
  const sstUserId = 3;
  
  console.log("Usuario SST ID:", sstUserId);
  return sstUserId;
}

// Inicializar contadores al cargar la página
document.addEventListener('DOMContentLoaded', async () => {
  const solicitudIds = Array.from(document.querySelectorAll('.open-chat-btn')).map(btn => btn.dataset.solicitudId);
  for (const id of solicitudIds) {
    await updateUnreadCountSST(id);
  }
});

// Reemplazar el código actual del formulario de negar
$('#negarForm').on('submit', async function(e) {
  e.preventDefault();
  
  const solicitudId = $(this).attr('action').split('/').pop();
  const comentario = $('#comentario').val();
  
  if (!comentario) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Por favor ingrese un comentario'
    });
    return;
  }
  
  try {
    Swal.fire({
      title: 'Procesando...',
      text: 'Por favor espere mientras se procesa la solicitud',
      allowOutsideClick: false,
      didOpen: () => { Swal.showLoading(); }
    });
    
    const response = await fetch(`/negar-solicitud/${solicitudId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ comentario })
    });
    
    const data = await response.json();
    
    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Éxito',
        text: 'La solicitud ha sido negada correctamente'
      }).then(() => {
        $('#modalNegar').modal('hide');
        // Actualizar la UI para reflejar el cambio
        const btnContainer = $(`tr[data-id="${solicitudId}"] td:nth-child(11)`);
        btnContainer.html('<span class="badge badge-danger">Negada</span>');
      });
    } else {
      throw new Error(data.message || 'Error al negar la solicitud');
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'No se pudo negar la solicitud'
    });
  }
});
  </script>
</body>
</html>