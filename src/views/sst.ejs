<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

  <style>
    .vencido { color: #ff0000; }  

    nav {
      display: flex;
      gap: 20px;
    }

    .notification-badge {
      position: absolute;
      top: -8px;
      right: -8px;
      background-color: red;
      color: white;
      border-radius: 50%;
      width: 18px;
      height: 18px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 11px;
      font-weight: bold;
    }
    
    .status-icon-sent { color: #d1d1d1; }
    .status-icon-delivered { color: #d1d1d1; }
    .status-icon-read { color: #53bdeb; }
    .status-icon-error { color: #f44336; }
    .chat-message { position: relative; }

    /* Estilos para optimizar diseño y tabla fija */
    body {
      background-color: #f4f6f9;
      font-family: 'Arial', sans-serif;
    }

    .container {
      max-width: 1400px;
    }

    h1 {
      font-size: 2rem;
      color: #2d3748;
      margin-bottom: 1.5rem;
    }

    .table-container {
      max-height: 500px;
      overflow-y: auto;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      background-color: #fff;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .table thead th {
      position: sticky;
      top: 0;
      background-color: #2d3748;
      color: #fff;
      z-index: 10;
      padding: 12px;
      border-bottom: 2px solid #4a5568;
    }

    .table tbody tr:hover {
      background-color: #edf2f7;
    }

    .btn-sm {
      padding: 6px 12px;
      font-size: 0.875rem;
    }

    /* Estilos para el formulario de filtros */
    .filter-form {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      margin-bottom: 20px;
    }

    .filter-form .form-group {
      margin-bottom: 15px;
    }

    .filter-form label {
      font-weight: 600;
      color: #4a5568;
    }

    .filter-form input,
    .filter-form select {
      border-radius: 4px;
      border: 1px solid #e2e8f0;
      padding: 8px;
      width: 100%;
    }

    .filter-form button {
      background-color: #2d3748;
      color: #fff;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    .filter-form button:hover {
      background-color: #4a5568;
    }
  </style>

  <script>
    // Guardar el ID del usuario SST para todo el sitio
    window.sstUserId = "<%= userId %>";
    
    console.log('✅ ID de usuario SST inicializado:', window.sstUserId);
    
    if (!window.sstUserId || window.sstUserId === 'undefined') {
      console.error('❌ ERROR: No se pudo obtener el ID de usuario SST');
    }
  </script>
</head>
<body>
  <nav class="flex items-center bg-gray-800 text-white p-4" id="nav">
    <a class="text-lg font-semibold" href="#">Vista SST - <a href="/capacitacion/listado">Gestionar Capacitaciones</a></a>
    <a class="text-lg" href="/logout">Cerrar sesión</a>
  </nav>

  <div class="container mt-5">
    <h1>Solicitudes</h1>

    <!-- Botón para mostrar/ocultar filtros -->
    <button id="toggleFilters" class="btn btn-secondary mb-3">
        <span id="toggleText">Ocultar filtros</span>
    </button>

    <!-- Formulario de filtros -->
    <div class="filter-form" id="filtrosCollapse">
      <form id="filterForm">
        <div class="row">
          <div class="col-md-3 form-group">
            <label for="filtroId">ID Solicitud</label>
            <input type="text" class="form-control" id="filtroId" placeholder="Ingrese el ID">
          </div>
          <div class="col-md-3 form-group">
            <label for="filtroEmpresa">Empresa</label>
            <input type="text" class="form-control" id="filtroEmpresa" placeholder="Nombre de la empresa">
          </div>
          <div class="col-md-3 form-group">
            <label for="filtroNit">NIT</label>
            <input type="text" class="form-control" id="filtroNit" placeholder="NIT de la empresa">
          </div>
          <div class="col-md-3 form-group">
            <label for="filtroEstadoSolicitud">Estado</label>
            <select class="form-control" id="filtroEstadoSolicitud">
              <option value="">Todos</option>
              <option value="pendiente">Pendiente</option>
              <option value="aprobada">Aprobado</option>
              <option value="negada">Negada</option>
            </select>
          </div>
        </div>
        <div class="row">
          <div class="col-md-3 form-group">
            <label for="filtroFechaInicio">Inicio de Obra (desde)</label>
            <input type="date" class="form-control" id="filtroFechaInicio">
          </div>
          <div class="col-md-3 form-group">
            <label for="filtroFechaFin">Fin de Obra (hasta)</label>
            <input type="date" class="form-control" id="filtroFechaFin">
          </div>
          <div class="col-md-3 form-group">
            <label for="filtroLugar">Lugar</label>
            <input type="text" class="form-control" id="filtroLugar" placeholder="Lugar de la obra">
          </div>
          <div class="col-md-3 form-group d-flex align-items-end">
            <button type="submit" class="w-100">Filtrar</button>
          </div>
        </div>
      </form>
    </div>

    <div class="table-container">
      <table class="table table-bordered">
        <thead>
          <tr>
            <th>ID</th>
            <th>Empresa</th>
            <th>NIT</th>
            <th>Inicio de Obra</th>
            <th>Fin de Obra</th>
            <th>Días Solicitados</th>
            <th>Lugar</th>
            <th>Labor</th>
            <th>Interventor</th>
            <th>Documentos</th>
            <th>Colaboradores</th>
            <th>Acción</th>
            <th>Mensajes</th>
          </tr>
        </thead>
        <tbody id="tablaSolicitudes">
          <% solicitud.forEach(solicitud => { %>
              <tr class="solicitud-item" data-id="<%= solicitud.id %>">
                  <td><%= solicitud.id %></td>
                  <td><%= solicitud.empresa %></td>
                  <td><%= solicitud.nit %></td>
                  <td><%= solicitud.inicio_obra %></td>
                  <td><%= solicitud.fin_obra %></td>
                  <td><%= solicitud.dias_trabajo %></td>
                  <td><%= solicitud.lugar %></td>
                  <td><%= solicitud.labor %></td>
                  <td><%= solicitud.interventor %></td>
                  <td>
                    <% const doc = solicitud_url_download.find(d => d.solicitud_id === solicitud.id); %>
                    <% if (doc) { %>
                      <button class="btn btn-success btn-sm descargar-btn" data-url="<%= doc.url %>">Descargar Documentos</button>
                    <% } else { %>
                      <button class="btn btn-info btn-sm generar-btn" data-id="<%= solicitud.id %>">Generar Documentos</button>
                    <% } %>
                  </td>
                  <td>
                    <button class="btn btn-info btn-sm" onclick="verColaboradores('<%= solicitud.id %>')">Ver Colaboradores</button>
                  </td>
                  <td>
                    <% if (solicitud.estado === 'pendiente') { %>
                      <form action="/aprobar-solicitud/<%= solicitud.id %>" method="POST" style="display:inline;">
                        <button type="submit" class="btn btn-success btn-sm" id="aprobarBtn-<%= solicitud.id %>">Aprobar</button>
                      </form>
                      <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#modalNegar" data-id="<%= solicitud.id %>" data-empresa="<%= solicitud.empresa %>" data-nit="<%= solicitud.nit %>">
                        Negar
                      </button>
                    <% } else { %>
                      <span class="badge <%= ['negada'].includes(solicitud.estado) ? 'badge-danger' : 'badge-success' %>">
                        <%= ['negada'].includes(solicitud.estado) ? 'Negada' : 'Aprobado' %>
                      </span>
                    <% } %>
                  </td>
                  <td>
                    <button class="btn btn-primary btn-sm ml-2 open-chat-btn" data-solicitud-id="<%= solicitud.id %>">
                      Conversar <span class="badge badge-light unread-count" data-solicitud-id="<%= solicitud.id %>">0</span>
                    </button>
                  </td>
              </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Modal para Negar Solicitud -->
  <div class="modal fade" id="modalNegar" tabindex="-1" role="dialog" aria-labelledby="modalNegarLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modalNegarLabel">Negar Solicitud</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="negarForm">
            <div class="form-group">
              <label for="empresa">Empresa:</label>
              <input type="text" class="form-control" id="empresa" disabled>
            </div>
            <div class="form-group">
              <label for="nit">NIT:</label>
              <input type="text" class="form-control" id="nit" disabled>
            </div>
            <div class="form-group">
              <label for="comentario">Comentario:</label>
              <textarea class="form-control" id="comentario" name="comentario" rows="4"></textarea>
            </div>
            <button type="submit" class="btn btn-danger">Negar Solicitud</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para Ver Colaboradores -->
  <div class="modal fade" id="colaboradoresModal" tabindex="-1" role="dialog" aria-labelledby="colaboradoresModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="colaboradoresModalLabel">Colaboradores de la Solicitud</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <p><strong>ID de la Solicitud:</strong> <span id="colaboradoresId"></span></p>
          <p><strong>Empresa:</strong> <span id="colaboradoresEmpresa"></span></p>
          <p><strong>Contratista:</strong> <span id="colaboradoresContratista"></span></p>
          <div class="mb-3">
            <label for="filtroEstado" class="form-label">Filtrar por Estado:</label>
            <select class="form-select" id="filtroEstado">
              <option value="todos">Todos</option>
              <option value="habilitados">Habilitados</option>
              <option value="inhabilitados">Inhabilitados</option>
            </select>
          </div>
          <div class="table-responsive">
            <table class="table table-bordered">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Nombre</th>
                  <th>Cédula</th>
                  <th>Estado</th>
                  <th>Curso SISO</th>
                  <th>Plantilla SS</th>
                  <th>Definir Plantilla SS</th>
                  <th>Historial</th>
                </tr>
              </thead>
              <tbody id="tablaColaboradores"></tbody>
            </table>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de Chat para SST -->
  <div id="chatModalSST" class="fixed inset-0 z-50 hidden bg-gray-900 bg-opacity-50 flex justify-center items-center">
    <div class="bg-white w-full max-w-4xl h-3/4 rounded-lg shadow-lg overflow-hidden flex flex-col">
      <div class="bg-gray-800 text-white px-4 py-3 flex justify-between items-center">
        <h5 class="text-lg font-semibold">Chat SST - Solicitud <span id="chatSolicitudIdSST"></span></h5>
        <button type="button" onclick="closeChatModalSST()" class="text-white hover:text-yellow-500">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="flex-1 p-4 overflow-y-auto" id="chatMessagesSST"></div>
      <div class="border-t border-gray-200 p-4">
        <div class="flex space-x-2">
          <textarea id="chatInputSST" class="flex-1 p-2 border border-gray-300 rounded-md resize-none" rows="2" placeholder="Escribe un mensaje..."></textarea>
          <button onclick="sendMessageSST()" class="bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-yellow-500">Enviar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para Definir Plantilla SS -->
  <div class="modal fade" id="definirPlantillaModal" tabindex="-1" role="dialog" aria-labelledby="definirPlantillaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="definirPlantillaModalLabel">Definir Plantilla de Seguridad Social</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="plantillaForm">
            <input type="hidden" id="colaboradorId">
            <input type="hidden" id="solicitudId">
            <input type="hidden" id="plantillaId">
            <div class="mb-3">
              <label for="fechaInicio" class="form-label">Fecha de Inicio:</label>
              <input type="date" class="form-control" id="fechaInicio" required>
            </div>
            <div class="mb-3">
              <label for="fechaFin" class="form-label">Fecha de Fin:</label>
              <input type="date" class="form-control" id="fechaFin" required>
            </div>
            <button type="submit" class="btn btn-primary">Guardar</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para Historial de Cursos -->
  <div class="modal fade" id="historialModal" tabindex="-1" role="dialog" aria-labelledby="historialModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="historialModalLabel">Historial de Cursos</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <table class="table table-bordered">
            <thead>
              <tr>
                <th>Curso</th>
                <th>Estado</th>
                <th>Puntaje</th>
                <th>Fecha de Vencimiento</th>
              </tr>
            </thead>
            <tbody id="tablaHistorial"></tbody>
          </table>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
  <script>
    // Nueva función para filtrar usando la API del interventor
 
    $('#filterForm').on('submit', async function(e) {
  e.preventDefault();

  const filtros = {
    id: $('#filtroId').val(),
    empresa: $('#filtroEmpresa').val(),
    nit: $('#filtroNit').val(),
    estado: $('#filtroEstadoSolicitud').val(),
    fechaInicio: $('#filtroFechaInicio').val(),
    fechaFin: $('#filtroFechaFin').val(),
    lugar: $('#filtroLugar').val()
  };

  console.log('Enviando filtros:', filtros);

  try {
    Swal.fire({
      title: 'Cargando...',
      text: 'Buscando solicitudes',
      allowOutsideClick: false,
      didOpen: () => { Swal.showLoading(); }
    });

    // CORRECCIÓN: Cambiamos a POST para coincidir con la definición en routes/sst.routes.js
    const response = await fetch('/api/filtrar-solicitudes-sst', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include', // Mantener cookies para la autenticación
      body: JSON.stringify(filtros) // Enviar filtros en el cuerpo JSON
    });

    console.log('Respuesta recibida:', response.status, response.statusText);
    
    const contentType = response.headers.get('content-type');
    console.log('Tipo de contenido:', contentType);

    if (contentType && contentType.includes('text/html')) {
      console.error('Recibida respuesta HTML en lugar de JSON.');
      
      // Intentar obtener el HTML para depuración
      const htmlText = await response.text();
      console.log('Primeros 200 caracteres del HTML recibido:', htmlText.substring(0, 200));
      
      Swal.fire({
        icon: 'error',
        title: 'Error de comunicación',
        text: 'Se recibió una respuesta inesperada del servidor.',
        footer: 'Por favor, contacta al administrador si el problema persiste.',
        confirmButtonText: 'Intentar de nuevo'
      }).then((result) => {
        if (result.isConfirmed) {
          // Simplemente cerrar el diálogo sin recargar
          Swal.close();
        }
      });
      return;
    }

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Error al filtrar solicitudes');
    }

    const solicitudes = await response.json();
    Swal.close();
    actualizarTablaSolicitudes(solicitudes);

  } catch (error) {
    console.error('[SST] Error al filtrar solicitudes:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'No se pudieron filtrar las solicitudes.'
    });
  }
});
    // Función para actualizar la tabla con los datos filtrados

    function actualizarTablaSolicitudes(solicitudes) {
    const tbody = $('#tablaSolicitudes');
    tbody.empty();

    if (solicitudes.length === 0) {
        Swal.fire({
            icon: 'info',
            title: 'Sin resultados',
            text: 'No se encontraron solicitudes con los criterios especificados'
        });
        return;
    }

    solicitudes.forEach(solicitud => {
        const estadoClass = solicitud.solicitud_estado === 'negada' ? 'badge-danger' : 'badge-success';
        const estadoTexto = solicitud.solicitud_estado === 'negada' ? 'Negada' : 'Aprobado';

        const row = `
          <tr class="solicitud-item" data-id="${solicitud.solicitud_id}">
            <td>${solicitud.solicitud_id}</td>
            <td>${solicitud.empresa}</td>
            <td>${solicitud.nit}</td>
            <td>${solicitud.inicio_obra}</td>
            <td>${solicitud.fin_obra}</td>
            <td>${solicitud.dias_trabajo || '-'}</td>
            <td>${solicitud.lugar}</td>
            <td>${solicitud.labor || '-'}</td>
            <td>${solicitud.interventor}</td>
            <td>
              ${solicitud.url_documento ? 
                `<button class="btn btn-success btn-sm descargar-btn" data-url="${solicitud.url_documento}">Descargar Documentos</button>` : 
                `<button class="btn btn-info btn-sm generar-btn" data-id="${solicitud.solicitud_id}">Generar Documentos</button>`}
            </td>
            <td>
              <button class="btn btn-info btn-sm" onclick="verColaboradores('${solicitud.solicitud_id}')">Ver Colaboradores</button>
            </td>
            <td>
              ${solicitud.solicitud_estado === 'pendiente' ? `
                <form action="/aprobar-solicitud/${solicitud.solicitud_id}" method="POST" style="display:inline;">
                  <button type="submit" class="btn btn-success btn-sm" id="aprobarBtn-${solicitud.solicitud_id}">Aprobar</button>
                </form>
                <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#modalNegar" 
                        data-id="${solicitud.solicitud_id}" data-empresa="${solicitud.empresa}" data-nit="${solicitud.nit}">
                  Negar
                </button>
              ` : `<span class="badge ${estadoClass}">${estadoTexto}</span>`}
            </td>
            <td>
              <button class="btn btn-primary btn-sm ml-2 open-chat-btn" data-solicitud-id="${solicitud.solicitud_id}">
                Conversar <span class="badge badge-light unread-count" data-solicitud-id="${solicitud.solicitud_id}">0</span>
              </button>
            </td>
          </tr>
        `;
        tbody.append(row);
    });

    // Reasignar eventos a los botones dinámicos
    $('.descargar-btn').off('click').on('click', function() {
        const url = $(this).data('url');
        descargarArchivo(url);
    });

    $('.generar-btn').off('click').on('click', function() {
        const id = $(this).data('id');
        generarDocumento(id);
    });

    // Reasignar eventos de chat
    $('.open-chat-btn').off('click').on('click', function() {
        const solicitudId = $(this).data('solicitud-id');
        openChatModalSST(solicitudId);
    });

    // Reinicializar los badges de notificación
    updateSSTNotificationBadges();
}

    // Modal para negar solicitud
    $('#modalNegar').on('show.bs.modal', function(event) {
      var button = $(event.relatedTarget);
      var id = button.data('id');
      var empresa = button.data('empresa');
      var nit = button.data('nit');
      var modal = $(this);
      modal.find('#empresa').val(empresa);
      modal.find('#nit').val(nit);
      modal.find('#negarForm').attr('action', '/negar-solicitud/' + id);
    });

    // Descargar archivo
    function descargarArchivo(url) {
      Swal.fire({
        title: 'Descargando...',
        text: 'Por favor espera mientras se descarga el documento.',
        allowOutsideClick: false,
        didOpen: () => { Swal.showLoading(); }
      });
      window.open(url, '_blank');
      Swal.close();
    }

    // Generar documentos
    function generarDocumento(id) {
      Swal.fire({
        title: 'Generando...',
        text: 'Por favor espera mientras se genera el documento.',
        allowOutsideClick: false,
        didOpen: () => { Swal.showLoading(); }
      });
      fetch(`/descargar-solicitud/${id}`)
        .then(response => response.ok ? response.json() : Promise.reject('Error en la respuesta'))
        .then(data => {
          if (data.success) {
            window.open(data.url, '_blank');
            Swal.fire({ icon: 'success', title: 'Éxito', text: data.message || 'Documento generado correctamente' });
            const btnContainer = document.querySelector(`tr[data-id="${id}"] td:nth-child(10)`);
            if (btnContainer) {
              btnContainer.innerHTML = `<button class="btn btn-success btn-sm descargar-btn" data-url="${data.url}">Descargar Documentos</button>`;
              btnContainer.querySelector('.descargar-btn').addEventListener('click', function() { descargarArchivo(data.url); });
            }
          } else {
            throw new Error(data.error || 'Error al generar el documento');
          }
        })
        .catch(error => {
          Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'No se pudo generar el documento.' });
          console.error('Error al generar:', error);
        });
    }

    $('.descargar-btn').on('click', function() {
      const url = $(this).data('url');
      descargarArchivo(url);
    });

    $('.generar-btn').on('click', function() {
      const id = $(this).data('id');
      generarDocumento(id);
    });

    // Ver Colaboradores
    async function verColaboradores(solicitudId) {
    try {
      const response = await fetch(`/api/sst/colaboradores/${solicitudId}`);
      const data = await response.json();
      if (!response.ok) throw new Error(data.message || 'Error al obtener colaboradores');

      // Depuración: Verifica los datos recibidos del backend
      console.log('Datos recibidos del backend:', data);

      // Rellenar información del modal
      $('#colaboradoresId').text(data.id);
      $('#colaboradoresEmpresa').text(data.empresa);
      $('#colaboradoresContratista').text(data.contratista || 'N/A');

      // Llenar la tabla de colaboradores
      const tbody = $('#tablaColaboradores');
      tbody.empty();

      data.colaboradores.forEach(col => {
        // Plantilla SS: Vigente, Vencido o No definida
        const plantillaSS = col.plantillaSS 
          ? (new Date(col.plantillaSS.fecha_fin) > new Date() ? 'Vigente' : 'Vencido') 
          : 'No definida';

        // Curso SISO: Usa "No" si es null o undefined
        const cursoSisoEstado = col.cursoSiso || 'No';
        const cursoSisoClass = cursoSisoEstado === 'Vencido' ? 'vencido' : '';

        // Agregar fila a la tabla
        tbody.append(`
          <tr data-estado="${col.estado ? 'habilitado' : 'inhabilitado'}">
            <td>${col.id}</td>
            <td>${col.nombre}</td>
            <td>${col.cedula}</td>
            <td>${col.estado ? 'Habilitado' : 'Inhabilitado'}</td>
            <td class="${cursoSisoClass}">${cursoSisoEstado}</td>
            <td>${plantillaSS}</td>
            <td><button class="btn btn-primary btn-sm" onclick="definirPlantilla(${col.id}, ${solicitudId})">Definir</button></td>
            <td><button class="btn btn-info btn-sm" onclick="verHistorial(${col.id})">Ver</button></td>
          </tr>
        `);
      });

      // Filtro por estado (Habilitados/Inhabilitados)
      $('#filtroEstado').off('change').on('change', function() {
        const filtro = $(this).val();
        $('#tablaColaboradores tr').each(function() {
          const estado = $(this).data('estado');
          if (filtro === 'todos' || 
              (filtro === 'habilitados' && estado === 'habilitado') || 
              (filtro === 'inhabilitados' && estado === 'inhabilitado')) {
            $(this).show();
          } else {
            $(this).hide();
          }
        });
      });

      // Mostrar el modal
      $('#colaboradoresModal').modal('show');
    } catch (error) {
      Swal.fire({ 
        icon: 'error', 
        title: 'Error', 
        text: error.message || 'No se pudieron cargar los colaboradores.' 
      });
    }
  }
    // Definir Plantilla SS

async function definirPlantilla(colaboradorId, solicitudId) {
      $('#colaboradorId').val(colaboradorId);
      $('#solicitudId').val(solicitudId);
      $('#plantillaId').val('');
      $('#fechaInicio').val('').removeClass('vencido');
      $('#fechaFin').val('').removeClass('vencido');

      try {
        const response = await fetch(`/api/sst/plantilla-ss/${colaboradorId}`);
        const data = await response.json();
        console.log('Datos recibidos de la plantilla:', data); // Depuración

        if (response.ok && data.plantilla) {
          $('#plantillaId').val(data.plantilla.id);
          $('#fechaInicio').val(data.plantilla.fecha_inicio);
          $('#fechaFin').val(data.plantilla.fecha_fin);

          const fechaFin = new Date(data.plantilla.fecha_fin);
          const hoy = new Date();
          if (fechaFin <= hoy) {
            $('#fechaFin').addClass('vencido');
          }
        }
      } catch (error) {
        console.error('Error al cargar plantilla existente:', error);
        Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo cargar la plantilla existente.' });
      }

      $('#definirPlantillaModal').modal('show');
    }

    $('#plantillaForm').on('submit', async function(e) {
      e.preventDefault();
      const colaboradorId = $('#colaboradorId').val();
      const solicitudId = $('#solicitudId').val();
      const plantillaId = $('#plantillaId').val();
      const fechaInicio = $('#fechaInicio').val();
      const fechaFin = $('#fechaFin').val();

      const method = plantillaId ? 'PUT' : 'POST';
      const url = plantillaId ? `/api/sst/plantilla-ss/${plantillaId}` : '/api/sst/plantilla-ss';

      try {
        const response = await fetch(url, {
          method,
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ colaboradorId, solicitudId, fechaInicio, fechaFin })
        });
        const data = await response.json();
        if (response.ok) {
          Swal.fire({ icon: 'success', title: 'Éxito', text: 'Plantilla guardada correctamente.' });
          $('#definirPlantillaModal').modal('hide');
          verColaboradores(solicitudId); // Refrescar la tabla
        } else {
          throw new Error(data.message || 'Error al guardar la plantilla.');
        }
      } catch (error) {
        Swal.fire({ icon: 'error', title: 'Error', text: error.message });
      }
    });
    
    // Ver Historial de Cursos
    async function verHistorial(colaboradorId) {
      try {
        const response = await fetch(`/api/sst/historial-cursos/${colaboradorId}`);
        const data = await response.json();
        if (!response.ok) throw new Error(data.message || 'Error al obtener historial');

        const tbody = $('#tablaHistorial');
        tbody.empty();
        data.historial.forEach(h => {
          tbody.append(`
            <tr>
              <td>${h.nombre}</td>
              <td>${h.estado}</td>
              <td>${h.puntaje_obtenido}</td>
              <td>${new Date(h.fecha_vencimiento).toLocaleDateString()}</td>
            </tr>
          `);
        });

        $('#historialModal').modal('show');
      } catch (error) {
        Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'No se pudo cargar el historial.' });
      }
    }

    // Variables globales para el chat SST
let currentSolicitudIdSST = null;
let socketSST = null;
let oldestMessageIdSST = null;

// Abrir modal de chat desde los botones
document.querySelectorAll('.open-chat-btn').forEach(btn => {
  btn.addEventListener('click', function() {
    const solicitudId = this.dataset.solicitudId;
    openChatModalSST(solicitudId);
  });
});

// Abrir modal de chat
async function openChatModalSST(solicitudId) {
  try {
    currentSolicitudIdSST = solicitudId;
    document.getElementById('chatSolicitudIdSST').textContent = solicitudId;
    document.getElementById('chatModalSST').classList.remove('hidden');

    // Cerrar WebSocket existente si hay uno
    if (socketSST && socketSST.readyState === WebSocket.OPEN) {
      socketSST.close();
    }

    // Iniciar nuevo WebSocket
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.host}/ws/chat/sst`;
    
    socketSST = new WebSocket(wsUrl);
    
    socketSST.onopen = function() {
      console.log('🔌 WebSocket SST conectado');
      
      // Obtener ID de usuario, con verificación
      const sstUserId = getSSUserId();
      
      if (!sstUserId || sstUserId === 'undefined') {
        console.error('❌ ERROR: ID de usuario no válido al identificarse:', sstUserId);
        Swal.fire({
          icon: 'error',
          title: 'Error de conexión',
          text: 'No se pudo establecer su identidad. Por favor recargue la página.'
        });
        return;
      }
      
      // Identificar al cliente CON USUARIO ID
      console.log('🔑 Enviando identificación con usuario:', sstUserId);
      
      socketSST.send(JSON.stringify({
        type: 'identify',
        userId: sstUserId,
        role: 'sst',
        solicitudId: solicitudId
      }));
    };
    
    socketSST.onmessage = function(event) {
      try {
        const message = JSON.parse(event.data);
        console.log("[SST] Mensaje recibido desde WebSocket:", message);
        
        if (message.type === 'identify_confirmation') return;
        
        if (message.type === 'status_update') {
          const { tempId, status, messageId } = message;
          
          // Primero buscar por tempId
          let existingMessage = document.querySelector(`.chat-message[data-message-id="${tempId}"]`);
          
          // Si no encontramos por tempId y tenemos messageId, buscar por messageId
          if (!existingMessage && messageId) {
            existingMessage = document.querySelector(`.chat-message[data-message-id="${messageId}"]`);
          }
          
          if (existingMessage) {
            // Si tenemos un messageId, actualizar el data-message-id
            if (messageId) {
              existingMessage.dataset.messageId = messageId;
            }
            
            // Actualizar el estado del mensaje
            updateMessageStatusSST(messageId || tempId, status);
            
            // Guardar la relación tempId -> messageId
            if (tempId && messageId) {
              sentMessages.set(tempId, messageId);
            }
            
            // Registrar que el mensaje ya está en pantalla
            if (messageId) {
              displayedMessages.add(messageId);
            }
          }
          return;
        }

        // Si es un mensaje de error
        if (message.type === 'error') {
            console.error('[SST] Error del servidor:', message.error);
            return;
        }
        
        // Solo procesar mensajes para la solicitud actual y que NO sean del remitente actual
        const sstUserId = getSSUserId();
        if (message.solicitudId === currentSolicitudIdSST && 
            parseInt(message.usuario_id) !== parseInt(sstUserId)) {
            
            // Normalizar el mensaje para displayMessageSST
            const messageToDisplay = {
                id: message.id,
                usuario_id: message.usuario_id,
                content: message.content,
                created_at: message.created_at,
                leido: message.leido,
                isSender: false // Siempre falso porque son mensajes recibidos
            };
            
            // Mostrar el mensaje en el chat
            displayMessageSST(messageToDisplay);
            
            // Notificar si es necesario
            if (document.hidden) {
                notifyNewMessageSST(messageToDisplay);
            }
            
            // Actualizar contador
            updateUnreadCountSST(message.solicitudId);
        }
      } catch (error) {
        console.error('[SST] Error al procesar mensaje del WebSocket:', error);
      }
    };
    
    socketSST.onclose = function() {
      console.log('WebSocket SST cerrado');
    };
    
    socketSST.onerror = function(error) {
      console.error('Error en WebSocket SST:', error);
    };

    // Mostrar indicador de carga inicial
    const chatMessages = document.getElementById('chatMessagesSST');
    chatMessages.innerHTML = '<div class="flex justify-center my-4"><div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-600"></div></div>';

    // Cargar los últimos 20 mensajes
    await loadInitialMessagesSST(solicitudId);
    
    // Marcar mensajes como leídos
    await markMessagesAsReadSST(solicitudId);

    // Asegurar que se realice el scroll al final
    setTimeout(() => {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 200);
    
    // Configurar listener de scroll
    chatMessages.removeEventListener('scroll', scrollHandlerSST);
    chatMessages.addEventListener('scroll', scrollHandlerSST);
    
    // Actualizar contadores
    updateUnreadCountSST(solicitudId);
  } catch (error) {
    console.error('[SST] Error al abrir chat:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'No se pudo cargar el chat. Por favor intente nuevamente.'
    });
  }
}

// Función para manejar el evento de scroll
function scrollHandlerSST() {
  const chatMessages = document.getElementById('chatMessagesSST');
  
  // Si estamos cerca del principio del scroll (menos de 50px del tope)
  if (chatMessages.scrollTop < 50 && oldestMessageIdSST && !isLoadingMoreSST) {
    loadMoreMessagesSST(currentSolicitudIdSST);
  }
}

// Variable para controlar que no se disparen múltiples cargas simultáneas
let isLoadingMoreSST = false;

// Cargar más mensajes al hacer scroll hacia arriba
async function loadMoreMessagesSST(solicitudId) {
  if (!oldestMessageIdSST || isLoadingMoreSST) return;
  
  isLoadingMoreSST = true;
  
  try {
    const sstUserId = getSSUserId();
    
    // Crear indicador de carga
    const loadingIndicator = document.createElement('div');
    loadingIndicator.className = 'text-center text-gray-500 text-sm py-2';
    loadingIndicator.innerHTML = '<div class="spinner-border spinner-border-sm text-gray-500" role="status"></div> Cargando mensajes anteriores...';
    
    const chatMessages = document.getElementById('chatMessagesSST');
    chatMessages.insertBefore(loadingIndicator, chatMessages.firstChild);
    
    const response = await fetch(`/api/chat/${solicitudId}/sst?limit=20&before=${oldestMessageIdSST}&userId=${sstUserId}`);
    
    if (!response.ok) {
      throw new Error(`Error al cargar mensajes: ${response.status}`);
    }
    
    const messages = await response.json();
    
    // Eliminar el indicador de carga
    loadingIndicator.remove();
    
    if (messages.length > 0) {
      const scrollHeightBefore = chatMessages.scrollHeight;
      const scrollTopBefore = chatMessages.scrollTop;
      
      // Ordenar por fecha para asegurar visualización cronológica
      const sortedMessages = [...messages].sort((a, b) => {
        const dateA = new Date(a.created_at).getTime();
        const dateB = new Date(b.created_at).getTime();
        return dateA - dateB;
      });
      
      // Crear un fragmento para agregar todos los mensajes de una vez (mejor rendimiento)
      const fragment = document.createDocumentFragment();
      
      // Insertar mensajes en el fragmento
      sortedMessages.forEach(message => {
        const messageDiv = document.createElement('div');
        displayMessageSST(message, messageDiv);
        fragment.appendChild(messageDiv);
      });
      
      // Insertar el fragmento al principio del chat
      if (chatMessages.firstChild) {
        chatMessages.insertBefore(fragment, chatMessages.firstChild);
      } else {
        chatMessages.appendChild(fragment);
      }
      
      // Actualizar el ID del mensaje más antiguo
      oldestMessageIdSST = messages.reduce((oldest, current) => {
        return parseInt(current.id) < parseInt(oldest.id) ? current : oldest;
      }, messages[0]).id;
      
      // Mantener la posición relativa del scroll
      chatMessages.scrollTop = scrollTopBefore + (chatMessages.scrollHeight - scrollHeightBefore);
    } else {
      // Si no hay más mensajes, mostrar un mensaje informativo discreto
      const noMoreMsg = document.createElement('div');
      noMoreMsg.className = 'text-center text-gray-500 text-xs py-1';
      noMoreMsg.textContent = 'No hay más mensajes';
      noMoreMsg.style.opacity = '0.7';
      chatMessages.insertBefore(noMoreMsg, chatMessages.firstChild);
      
      // Indicar que no hay más mensajes para cargar
      oldestMessageIdSST = null;
      
      // Eliminar automáticamente el mensaje después de unos segundos
      setTimeout(() => {
        if (noMoreMsg.parentNode) {
          noMoreMsg.style.transition = 'opacity 0.5s';
          noMoreMsg.style.opacity = '0';
          setTimeout(() => {
            if (noMoreMsg.parentNode) {
              noMoreMsg.remove();
            }
          }, 500);
        }
      }, 3000);
    }
  } catch (error) {
    console.error('Error al cargar más mensajes:', error);
    
    // Mostrar mensaje de error discreto
    const errorMsg = document.createElement('div');
    errorMsg.className = 'text-center text-red-500 text-xs py-1';
    errorMsg.textContent = 'Error al cargar mensajes anteriores';
    
    const chatMessages = document.getElementById('chatMessagesSST');
    chatMessages.insertBefore(errorMsg, chatMessages.firstChild);
    
    // Eliminar automáticamente el mensaje después de unos segundos
    setTimeout(() => {
      if (errorMsg.parentNode) {
        errorMsg.remove();
      }
    }, 5000);
  } finally {
    isLoadingMoreSST = false;
  }
}

// Función para mostrar mensaje en el chat SST
function displayMessageSST(message, container = null) {
  const chatMessages = document.getElementById('chatMessagesSST');
  const messageDiv = container || document.createElement('div');
  
  console.log("🔍 Mostrando mensaje:", message);
  
  // IMPORTANTE: Determinar explícitamente si es un mensaje enviado por el usuario actual
  const sstUserId = getSSUserId();
  const isSender = parseInt(message.usuario_id) === parseInt(sstUserId);
  
  // Aplicar clase según el remitente
  messageDiv.className = `chat-message p-3 my-2 rounded-lg ${isSender ? 
    'bg-blue-600 text-white ml-auto' : 
    'bg-gray-200 text-gray-800'} max-w-xs`;
  
  // Extraer correctamente el contenido del mensaje
  let messageContent = '';
  
  // Nueva lógica mejorada para extraer el contenido del mensaje
  if (message.content) {
    if (typeof message.content === 'string') {
      try {
        const parsed = JSON.parse(message.content);
        messageContent = parsed.text || parsed.content || parsed.value || message.content;
      } catch (e) {
        messageContent = message.content;
      }
    } else if (typeof message.content === 'object') {
      messageContent = message.content.text || message.content.content || message.content.value || JSON.stringify(message.content);
    }
  } else if (message.text) {
    messageContent = message.text;
  } else {
    messageContent = "Mensaje sin contenido";
  }
  
  // Manejar la fecha del mensaje
  let messageDate = new Date();
  try {
    messageDate = message.created_at ? new Date(message.created_at) : new Date();
    if (isNaN(messageDate.getTime())) {
      messageDate = new Date();
    }
  } catch (error) {
    console.error('Error al procesar fecha:', error);
  }
  
  // Formatear fecha y hora
  const formattedDate = messageDate.toLocaleDateString('es-ES', {
    day: '2-digit', 
    month: '2-digit', 
    year: 'numeric'
  });
  
  const formattedTime = messageDate.toLocaleTimeString('es-ES', {
    hour: '2-digit',
    minute: '2-digit'
  });
  
  // Determinar el indicador de estado para mensajes enviados
  let statusIcon = '';
  if (isSender) {
    // Convertir message.id a string para evitar el error
    const messageIdStr = String(message.id || '');
    if (messageIdStr === 'error') {
      statusIcon = '<span class="status-icon-error">✗</span>';
    } else if (messageIdStr.startsWith('temp-')) {
      statusIcon = '<span class="status-icon-sent">✓</span>';
    } else if (message.leido) {
      statusIcon = '<span class="status-icon-read">✓✓</span>';
    } else {
      statusIcon = '<span class="status-icon-delivered">✓✓</span>';
    }
  }
  
  // Crear contenido HTML para el mensaje
  messageDiv.innerHTML = `
    <div class="text-sm mb-1">${messageContent}</div>
    <div class="text-xs text-${isSender ? 'white' : 'gray'}-500 text-right">
      ${formattedDate} ${formattedTime} ${statusIcon}
    </div>
  `;
  
  // Almacenar datos del mensaje
  messageDiv.dataset.messageId = message.id || '';
  messageDiv.dataset.userId = message.usuario_id;
  messageDiv.dataset.isSender = isSender;
  
  // Si no es un contenedor existente, agregar al chat
  if (!container) {
    chatMessages.appendChild(messageDiv);
    
    // Auto-scroll si estamos cerca del fondo
    const isNearBottom = chatMessages.scrollHeight - chatMessages.scrollTop - chatMessages.clientHeight < 100;
    if (isNearBottom) {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
  }
}

// Función para actualizar el estado de un mensaje en SST
function updateMessageStatusSST(messageId, status) {
  const messageElement = document.querySelector(`.chat-message[data-message-id="${messageId}"]`);
  if (!messageElement) return;
  
  const statusContainer = messageElement.querySelector('.text-right');
  if (!statusContainer) return;
  
  let statusIcon = '';
  if (status === 'error') {
    statusIcon = '<span class="status-icon-error">✗</span>';
  } else if (status === 'sent') {
    statusIcon = '<span class="status-icon-sent">✓</span>';
  } else if (status === 'delivered') {
    statusIcon = '<span class="status-icon-delivered">✓✓</span>';
  } else if (status === 'read') {
    statusIcon = '<span class="status-icon-read">✓✓</span>';
  }
  
  // Extraer la fecha/hora y reemplazar el indicador manteniendo la fecha y hora
  const timeText = statusContainer.textContent.trim().split(' ').slice(0, -1).join(' ');
  statusContainer.innerHTML = `${timeText} ${statusIcon}`;
}

// Enviar mensaje
window.sendMessageSST = function() {
    const input = document.getElementById('chatInputSST');
    const content = input.value.trim();
    if (!content || !currentSolicitudIdSST || !socketSST) return;

    const sstUserId = getSSUserId();
    const tempId = 'temp-' + Date.now();
    const timestamp = new Date().toISOString();
    
    // Mostrar mensaje local inmediatamente
    const localMessage = {
        id: tempId,
        usuario_id: sstUserId,
        content: content,
        created_at: timestamp,
        isSender: true
    };
    
    displayMessageSST(localMessage);
    
    // Enviar mensaje al servidor
    try {
        const message = {
            solicitudId: currentSolicitudIdSST,
            type: 'sst',
            content: content,
            userId: sstUserId,
            tempId: tempId,
            timestamp: timestamp
        };
        
        if (socketSST.readyState === WebSocket.OPEN) {
            socketSST.send(JSON.stringify(message));
            
            // Actualizar estado a enviado
            setTimeout(() => {
                updateMessageStatusSST(tempId, 'sent');
            }, 100);
            
            // Actualizar estado a entregado
            setTimeout(() => {
                updateMessageStatusSST(tempId, 'delivered');
            }, 1000);
        } else {
            console.error('[SST] WebSocket no está abierto. Estado:', socketSST.readyState);
            updateMessageStatusSST(tempId, 'error');
            iniciarSocketSST();
        }
    } catch (error) {
        console.error('[SST] Error al enviar mensaje:', error);
        updateMessageStatusSST(tempId, 'error');
    }
    
    // Limpiar input y hacer scroll
    input.value = '';
    const chatMessages = document.getElementById('chatMessagesSST');
    chatMessages.scrollTop = chatMessages.scrollHeight;
};

// Obtener el ID del usuario SST actual
function getSSUserId() {
    // Intentar obtener el ID de la variable global
    if (window.sstUserId && window.sstUserId !== 'undefined') {
        return window.sstUserId;
    }
    
    // Intentar obtener de un atributo data en algún elemento
    const userIdElement = document.querySelector('[data-sst-user-id]');
    if (userIdElement && userIdElement.dataset.sstUserId) {
        return userIdElement.dataset.sstUserId;
    }
    
    // Intentar obtener de un meta tag
    const metaTag = document.querySelector('meta[name="sst-user-id"]');
    if (metaTag && metaTag.getAttribute('content')) {
        return metaTag.getAttribute('content');
    }
    
    console.error('❌ No se pudo obtener un ID de usuario SST válido');
    return null;
}

// Modificar updateUnreadCountSST para usar solo el badge externo (rojo)
async function updateUnreadCountSST(solicitudId) {
  try {
    const sstUserId = getSSUserId();
    
    if (!sstUserId || sstUserId === 'undefined') {
      console.error('❌ Error al actualizar contador: userId no válido');
      return;
    }
    
    console.log(`[SST] Actualizando contadores para solicitud ${solicitudId}, usuario SST: ${sstUserId}`);
    
    const response = await fetch(`/api/chat/${solicitudId}/sst/unread?userId=${sstUserId}`);
    if (!response.ok) {
      throw new Error('Error al obtener contador de mensajes no leídos');
    }
    
    const data = await response.json();
    console.log(`[SST] Contador recibido para solicitud ${solicitudId}:`, data);
    
    // Obtener el botón de chat para esta solicitud
    const chatButton = document.querySelector(`.open-chat-btn[data-solicitud-id="${solicitudId}"]`);
    if (!chatButton) return;
    
    // Asegurar que el botón tiene posición relativa
    chatButton.style.position = 'relative';
    
    // Buscar o crear el badge externo
    let externalBadge = chatButton.querySelector('.notification-badge');
    if (!externalBadge) {
      externalBadge = document.createElement('span');
      externalBadge.className = 'notification-badge';
      chatButton.appendChild(externalBadge);
    }
    
    // Actualizar el badge externo
    externalBadge.textContent = data.unreadCount;
    
    // Mostrar u ocultar según la cantidad de mensajes no leídos
    if (data.unreadCount > 0) {
      externalBadge.style.display = 'flex';
    } else {
      externalBadge.style.display = 'none';
    }
    
    // Ocultar siempre el badge interno del botón
    const internalBadge = chatButton.querySelector('.unread-count');
    if (internalBadge) {
      internalBadge.style.display = 'none';
    }
    
  } catch (error) {
    console.error('[SST] Error al actualizar contador:', error);
  }
}

// Modificar la función para mostrar notificaciones fuera del botón en SST
function updateSSTNotificationBadges() {
  document.querySelectorAll('.open-chat-btn').forEach(btn => {
    const solicitudId = btn.dataset.solicitudId;
    
    // Aplicar estilos para posición relativa al botón
    btn.style.position = 'relative';
    
    // Ocultar el contador interno
    const countBadge = btn.querySelector('.unread-count');
    if (countBadge) {
      countBadge.style.display = 'none';
    }
    
    // Verificar si ya existe el badge externo
    let externalBadge = btn.querySelector('.notification-badge');
    if (!externalBadge) {
      externalBadge = document.createElement('span');
      externalBadge.className = 'notification-badge';
      btn.appendChild(externalBadge);
      
      // Ocultar inicialmente el badge hasta que sepamos si hay mensajes
      externalBadge.style.display = 'none';
    }
    
    // Actualizar los contadores después de crear/verificar los badges
    updateUnreadCountSST(solicitudId);
  });
}

// Asegurar que los badges se muestren correctamente después de abrir el chat
window.closeChatModalSST = function() {
  document.getElementById('chatModalSST').classList.add('hidden');
  if (socketSST) {
    socketSST.close();
  }
  
  // Actualizar el contador después de cerrar el chat
  if (currentSolicitudIdSST) {
    updateUnreadCountSST(currentSolicitudIdSST);
  }
  
  currentSolicitudIdSST = null;
  oldestMessageIdSST = null;
};

// Función para marcar mensajes como leídos
async function markMessagesAsReadSST(solicitudId) {
  try {
    const sstUserId = getSSUserId();
    
    if (!sstUserId || sstUserId === 'undefined') {
      console.error('❌ Error al marcar mensajes como leídos: userId no válido');
      return;
    }
    
    console.log(`[SST] Marcando mensajes como leídos para solicitud ${solicitudId}, usuario ${sstUserId}`);
    
    const response = await fetch(`/api/chat/${solicitudId}/sst/mark-read`, { 
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ userId: sstUserId })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('Error al marcar mensajes como leídos:', errorData);
      throw new Error(errorData.message || 'Error al marcar mensajes como leídos');
    }
    
    // Actualizar contador visual - ocultar el badge
    const chatButton = document.querySelector(`.open-chat-btn[data-solicitud-id="${solicitudId}"]`);
    if (chatButton) {
      const externalBadge = chatButton.querySelector('.notification-badge');
      if (externalBadge) {
        externalBadge.style.display = 'none';
        externalBadge.textContent = '0';
      }
    }
  } catch (error) {
    console.error('[SST] Error al marcar mensajes como leídos:', error);
  }
}

// Modificar el HTML del botón de chat para no mostrar el span interno
document.addEventListener('DOMContentLoaded', function() {
  // Actualizar la estructura HTML de los botones
  document.querySelectorAll('.open-chat-btn').forEach(btn => {
    // Buscar el span interno de contador
    const internalBadge = btn.querySelector('.unread-count');
    if (internalBadge) {
      internalBadge.style.display = 'none';
    }
    
    // Aplicar posición relativa para el badge externo
    btn.style.position = 'relative';
  });
  
  // Inicializar badges de notificación
  updateSSTNotificationBadges();
  
  // Agregar el intervalo de actualización
  setInterval(function() {
    document.querySelectorAll('.open-chat-btn').forEach(btn => {
      const solicitudId = btn.dataset.solicitudId;
      updateUnreadCountSST(solicitudId);
    });
  }, 5000);
});

// Cargar los últimos 20 mensajes para SST
async function loadInitialMessagesSST(solicitudId) {
  const chatMessages = document.getElementById('chatMessagesSST');
  
  // Mostrar indicador de carga mientras se obtienen los mensajes
  chatMessages.innerHTML = '<div class="flex justify-center my-4"><div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-600"></div></div>';
  
  try {
    const sstUserId = getSSUserId();
    console.log("Usuario SST ID:", sstUserId);
    
    // Intentar inicializar el chat si es necesario
    try {
      const initResponse = await fetch('/api/chat/iniciar/' + solicitudId + '/sst', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: sstUserId })
      });
      
      if (initResponse.ok) {
        console.log('Chat SST inicializado correctamente');
      }
    } catch (e) {
      console.log('Error al inicializar chat SST (no crítico):', e);
    }
    
    const response = await fetch(`/api/chat/${solicitudId}/sst?limit=20&userId=${sstUserId}`);
    
    if (!response.ok) {
      throw new Error(`Error al cargar mensajes: ${response.status}`);
    }
    
    const messages = await response.json();
    console.log("Mensajes cargados:", messages);
    
    // Limpiar el área de mensajes antes de mostrarlos
    chatMessages.innerHTML = '';
    
    if (messages.length === 0) {
      // Mostrar mensaje cuando no hay historial
      chatMessages.innerHTML = '<div class="text-center text-gray-500 p-4">No hay mensajes en esta conversación. Escribe para comenzar.</div>';
    } else {
      // Ordenar los mensajes por fecha para asegurar que se muestren cronológicamente
      const sortedMessages = [...messages].sort((a, b) => {
        const dateA = new Date(a.created_at).getTime();
        const dateB = new Date(b.created_at).getTime();
        return dateA - dateB;
      });
      
      // Mostrar los mensajes ordenados cronológicamente
      sortedMessages.forEach(message => {
        displayMessageSST(message);
      });
      
      // Identificar el mensaje más antiguo para paginación
      if (messages.length > 0) {
        oldestMessageIdSST = messages.reduce((oldest, current) => {
          return parseInt(current.id) < parseInt(oldest.id) ? current : oldest;
        }, messages[0]).id;
      }
      
      // Asegurar que siempre se desplace al final del chat
      setTimeout(() => {
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }, 100);
    }
  } catch (error) {
    console.error('Error al cargar mensajes iniciales:', error);
    chatMessages.innerHTML = '<div class="text-center text-red-500 p-3">Error al cargar mensajes. <button onclick="loadInitialMessagesSST(\''+solicitudId+'\')" class="underline">Reintentar</button></div>';
  }
}

// Configurar scroll para carga automática de mensajes antiguos
document.addEventListener('DOMContentLoaded', function() {
  const chatMessagesSST = document.getElementById('chatMessagesSST');
  if (chatMessagesSST) {
    chatMessagesSST.addEventListener('scroll', scrollHandlerSST);
  }
});

document.addEventListener('DOMContentLoaded', function() {
    const filtrosContent = document.getElementById('filtrosCollapse');
    const toggleButton = document.getElementById('toggleFilters');
    const toggleText = document.getElementById('toggleText');
    let filtrosVisible = true;

    toggleButton.addEventListener('click', function() {
        filtrosVisible = !filtrosVisible;
        
        if (filtrosVisible) {
            filtrosContent.style.display = 'block';
            toggleText.textContent = 'Ocultar filtros';
        } else {
            filtrosContent.style.display = 'none';
            toggleText.textContent = 'Mostrar filtros';
        }
    });
});
  </script>
</body>
</html>