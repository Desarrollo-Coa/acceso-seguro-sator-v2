<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
 
  <style>
    :root {
      --primary-color: #2c3e50;
      --secondary-color: #34495e;
      --accent-color: #3498db;
    }
    
    body {
      background-color: #f8f9fa;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .navbar {
      background-color: var(--primary-color) !important;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .container-interventor {
      max-width: 100%;
      margin: 20px auto;
      padding: 0 20px;
    }

    .page-title {
      color: var(--primary-color);
      font-size: 2rem;
      font-weight: 600;
      margin-bottom: 2rem;
      text-align: center;
    }

    .filters-section {
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      padding: 20px;
      margin-bottom: 2rem;
    }

    .filters-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .filters-title {
      color: var(--secondary-color);
      font-size: 1.2rem;
      font-weight: 500;
      margin: 0;
    }

    .filter-group {
      margin-bottom: 1.5rem;
    }

    .filter-group-title {
      color: var(--secondary-color);
      font-size: 1rem;
      font-weight: 500;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 2px solid #eee;
    }

    .form-control {
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 8px 12px;
      transition: border-color 0.3s ease;
    }

    .form-control:focus {
      border-color: var(--accent-color);
      box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
    }

    .btn-primary {
      background-color: var(--accent-color);
      border-color: var(--accent-color);
      padding: 8px 20px;
      border-radius: 5px;
      transition: all 0.3s ease;
    }

    .btn-primary:hover {
      background-color: #2980b9;
      border-color: #2980b9;
      transform: translateY(-1px);
    }

    .table-container {
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      padding: 20px;
      margin-top: 2rem;
      width: 100%;
    }

    .table-responsive {
      height: calc(100vh - 400px);
      overflow-y: auto;
      width: 100%;
    }

    .table {
      margin-bottom: 0;
      width: 100%;
    }

    .table thead th {
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 12px;
      font-weight: 500;
      white-space: nowrap;
    }

    .table tbody td {
      padding: 12px;
      vertical-align: middle;
      white-space: nowrap;
    }

    .badge {
      padding: 6px 10px;
      font-weight: 500;
      border-radius: 4px;
    }

    .btn-sm {
      padding: 5px 10px;
      font-size: 0.875rem;
      border-radius: 4px;
    }

    .modal-content {
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .modal-header {
      background-color: var(--primary-color);
      color: white;
      border-radius: 10px 10px 0 0;
    }

    .modal-title {
      font-weight: 500;
    }

    .close {
      color: white;
    }

    .stats-button {
      background-color: var(--secondary-color);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      margin-bottom: 1rem;
      transition: all 0.3s ease;
    }

    .stats-button:hover {
      background-color: var(--primary-color);
      transform: translateY(-1px);
    }

    .notification-badge {
      position: absolute;
      top: -8px;
      right: -8px;
      background-color: red;
      color: white;
      border-radius: 50%;
      width: 18px;
      height: 18px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 11px;
      font-weight: bold;
    }

    .status-icon-sent,
    .status-icon-delivered,
    .status-icon-read,
    .status-icon-error {
      margin-left: 4px;
    }

    .status-icon-sent,
    .status-icon-delivered {
      color: #d1d1d1;
    }

    .status-icon-read {
      color: #53bdeb;
    }

    .status-icon-error {
      color: #f44336;
    }

    .chat-message {
      position: relative;
    }

    .filters-content {
      transition: max-height 0.3s ease-out;
      max-height: 1000px;
      overflow: hidden;
    }

    .filters-content.hidden {
      max-height: 0;
      padding-top: 0;
      padding-bottom: 0;
      margin-top: 0;
      margin-bottom: 0;
      border: none;
    }
  </style>
  <!-- Agregar en el <head> después de los otros CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark">
    <div class="container">
      <a class="navbar-brand" href="#">Interventor ST - <%= username %></a>
      <a class="text-lg text-white " href="/logout">Cerrar sesión</a>
 
    </div>
  </nav>

  <div class="container-interventor">
    <h1 class="page-title">Solicitud Ingreso Contratistas</h1>

    <div class="filters-section">
      <div class="filters-header">
        <h2 class="filters-title">Filtros de Búsqueda</h2>
        <button class="btn btn-secondary" type="button" id="toggleFilters">
          <i class="fas fa-filter"></i> <span id="toggleText">Ocultar Filtros</span>
        </button>
      </div>

      <div id="filtrosCollapse" class="filters-content">
        <form id="filtrosForm">
          <div class="filter-group">
            <h3 class="filter-group-title">Información Principal</h3>
            <div class="row">
              <div class="col-md-3">
                <label for="filtroId">ID Solicitud</label>
                <input type="text" class="form-control" id="filtroId" placeholder="ID">
              </div>
              <div class="col-md-3">
                <label for="filtroIdColaborador">ID Colaborador</label>
                <input type="text" class="form-control" id="filtroIdColaborador" placeholder="ID Colaborador">
              </div>
              <div class="col-md-3">
                <label for="filtroCedula">Cédula Colaborador</label>
                <input type="text" class="form-control" id="filtroCedula" placeholder="Cédula">
              </div>
              <div class="col-md-3">
                <label for="filtroInterventor">Interventor</label>
                <input type="text" class="form-control" id="filtroInterventor" placeholder="Interventor">
              </div>
            </div>
          </div>

          <div class="filter-group">
            <h3 class="filter-group-title">Estado y Fechas</h3>
            <div class="row">
              <div class="col-md-3">
                <label for="filtroEstado">Estado</label>
                <select class="form-control" id="filtroEstado">
                  <option value="">Todos los estados</option>
                  <option value="aprobada">Pendiente Ingreso</option>
                  <option value="en labor">En Labor</option>
                  <option value="labor detenida">Labor Detenida</option>
                  <option value="pendiente">Pendiente</option>
                </select>
              </div>
              <div class="col-md-3">
                <label for="filtroFechaInicio">Fecha Inicio</label>
                <input type="date" class="form-control" id="filtroFechaInicio">
              </div>
              <div class="col-md-3">
                <label for="filtroFechaFin">Fecha Fin</label>
                <input type="date" class="form-control" id="filtroFechaFin">
              </div>
              <div class="col-md-3">
                <label for="filtroVigencia">Vigencia</label>
                <select class="form-control" id="filtroVigencia">
                  <option value="">Todas</option>
                  <option value="Vigente">Vigente</option>
                  <option value="Vencida">Vencida</option>
                </select>
              </div>
            </div>
          </div>

          <div class="filter-group">
            <h3 class="filter-group-title">Información Empresarial</h3>
            <div class="row">
              <div class="col-md-4">
                <label for="filtroNit">NIT</label>
                <input type="text" class="form-control" id="filtroNit" placeholder="NIT">
              </div>
              <div class="col-md-4">
                <label for="filtroEmpresa">Empresa</label>
                <input type="text" class="form-control" id="filtroEmpresa" placeholder="Empresa">
              </div>
              <div class="col-md-4">
                <label for="filtroLugar">Lugar</label>
                <select class="form-control" id="filtroLugar">
                  <option value="">Todos los lugares</option>
                  <% lugares.forEach(lugar => { %>
                    <option value="<%= lugar.id %>"><%= lugar.nombre_lugar %></option>
                  <% }); %>
                </select>
              </div>
            </div>
          </div>

          <div class="row mt-3">
            <div class="col-12 text-right">
              <button type="button" class="btn btn-primary" id="filtrarBtn">
                <i class="fas fa-search"></i> Filtrar
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <button class="stats-button" type="button" data-bs-toggle="modal" data-bs-target="#tablasModal">
      <i class="fas fa-chart-bar"></i> Mostrar Datos Estadísticos
    </button>

    <div class="table-container">
      <div class="table-responsive">
        <table class="table table-bordered table-hover" id="tablaSolicitudes">
          <thead>
            <tr>
              <th>Id</th>
              <th>Empresa</th>
              <th>NIT</th>
              <th>Inicio de Obra</th>
              <th>Fin de Obra</th>
              <th>Lugar</th>
              <th>Labor</th>
              <th>Estado</th>
              <th>Interventor</th>
              <th>Vigencia</th>
              <th>Acción</th>
              <% if (username === "COA") { %>
                <th>Eliminar</th>
              <% } %>
              <th>Detalles</th> 
                <th>H. de Ingresos</th> 
              <th>Chat</th>
            </tr>
          </thead>
          <tbody>
            <% if (acciones.length > 0) { %>
              <% acciones.forEach(accion => { %>
                <tr>
                  <td class="solicitud-id"><%= accion.solicitud_id %></td>
                  <td><%= accion.empresa %></td>
                  <td><%= accion.nit %></td>
                  <td><%= accion.inicio_obra %></td>
                  <td><%= accion.fin_obra %></td>
                  <td><%= accion.lugar %></td>
                  <td><%= accion.labor %></td>
                  <td>
                    <% if (accion.solicitud_estado === 'aprobada' && accion.solicitud_estado_interventor === 'pendiente') { %>
                      <span class="badge bg-success">Aprobado por SST</span>
                    <% } else if (accion.solicitud_estado === 'aprobada' && accion.solicitud_estado_interventor === 'aprobada') { %>
                      <span class="badge bg-info">Pendiente Ingreso</span>
                    <% } else if (accion.solicitud_estado === 'pendiente') { %>
                      <span class="badge bg-warning">Pendiente</span>
                    <% } else if (accion.solicitud_estado === 'negada') { %>
                      <span class="badge bg-danger">Negada</span>
                    <% } else if (accion.solicitud_estado === 'en labor') { %>
                      <span class="badge bg-primary">En Labor</span>
                    <% } else if (accion.solicitud_estado === 'labor detenida') { %>
                      <span class="badge bg-secondary">Labor Detenida</span>
                    <% } else { %>
                      <span class="badge bg-secondary"><%= accion.solicitud_estado %></span>
                    <% } %>
                  </td>
                  <td><%= accion.interventor %></td>
                  <td><%= accion.estado_vigencia %></td>
                  <td>
                    <% if (accion.accion === 'pendiente' && accion.estado_vigencia === 'Vigente') { %>
                      <% if (accion.puede_aprobar === 'Aprobar') { %>
                        <button class="btn btn-success btn-sm" id="aprobarBtn-<%= accion.solicitud_id %>">Aprobar</button>
                      <% } else { %>
                        <span class="badge bg-warning">Pendiente de Aprobación</span>
                      <% } %>
                    <% } else if (accion.accion === 'pendiente' && accion.estado_vigencia === 'Vencida') { %>
                      <span class="badge bg-danger">No Aprobada - Vencida</span>
                    <% } else if (accion.accion === 'aprobada' && (accion.solicitud_estado === 'en labor' || accion.solicitud_estado === 'aprobada') && accion.estado_vigencia === 'Vigente') { %>
                      <button class="btn btn-danger btn-sm" onclick="manejarLabor(<%= accion.solicitud_id %>, this, 'detener')">Detener Labor</button>
                    <% } else if (accion.accion === 'aprobada' && accion.solicitud_estado === 'en labor' && accion.estado_vigencia === 'Vencida') { %>
                      <span class="badge bg-danger">En Labor - Vencida</span>
                    <% } else if (accion.accion === 'aprobada' && accion.solicitud_estado === 'labor detenida' && accion.estado_vigencia === 'Vigente') { %>
                      <button class="btn btn-success btn-sm" onclick="manejarLabor(<%= accion.solicitud_id %>, this, 'reanudar')">Reanudar Labor</button>
                    <% } else if (accion.accion === 'aprobada' && accion.solicitud_estado === 'labor detenida' && accion.estado_vigencia === 'Vencida') { %>
                      <span class="badge bg-danger">Labor Detenida - Vencida</span>
                    <% } else if (accion.accion === 'aprobada' && accion.solicitud_estado === 'aprobada' && accion.estado_vigencia === 'Vencida') { %>
                      <span class="badge bg-danger">Aprobada - Vencida</span>
                    <% } else if (accion.accion === 'negada') { %>
                      <span class="badge bg-danger">Negada<%= accion.estado_vigencia === 'Vencida' ? ' - Vencida' : '' %></span>
                    <% } else { %>
                      <span class="badge bg-secondary">Estado Desconocido</span>
                    <% } %>
                  </td>
                  <% if (username === "COA") { %>
                    <td>
                      <button class="btn btn-danger btn-sm eliminar-solicitud" data-solicitud-id="<%= accion.solicitud_id %>">Eliminar</button>
                    </td>
                  <% } %>
                  <td>
                    <button class="btn btn-info btn-sm" id="verDETALLES-<%= accion.solicitud_id %>">Ver</button>
                    <button class="btn btn-primary btn-sm ver-colaboradores" data-solicitud-id="<%= accion.solicitud_id %>">Colaboradores</button>
                  </td>
                  <td>
                    <button class="btn btn-info btn-sm ver-historial" data-solicitud-id="<%= accion.solicitud_id %>">Ver Historial</button>
                  </td>
                  <td>
                    <button class="btn btn-primary btn-sm ml-2 open-chat-btn-interventor" data-solicitud-id="<%= accion.solicitud_id %>">
                      Conversar  
                    </button>
                  </td>
                </tr>
              <% }); %>
            <% } else { %>
              <tr>
                <td colspan="<%= username === 'COA' ? 14 : 13 %>" class="text-center">No hay acciones para revisar.</td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <div class="modal fade" id="historialModal" tabindex="-1" role="dialog" aria-labelledby="historialModalLabel">
    <div class="modal-dialog modal-xl" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="historialModalLabel">Historial de Ingresos y Salidas</h5>
          <button type="button" class="close" data-bs-dismiss="modal" aria-label="Cerrar"><span aria-hidden="true">×</span></button>
        </div>
        <div class="modal-body">
          <div class="table-responsive" style="max-height: 70vh;">
            <table class="table table-striped table-hover">
              <thead class="sticky-top bg-white">
                <tr>
                  <th>Tipo</th>
                  <th>Nombre/Placa</th>
                  <th>Cédula/Matrícula</th>
                  <th>Empresa</th>
                  <th>Lugar</th>
                  <th>Usuario Registro</th>
                  <th>Movimiento</th>
                  <th>H. Registro</th>
                  <th>Fecha/Hora</th>
                  <th>Estado</th>
                </tr>
              </thead>
              <tbody id="historialTableBody"></tbody>
            </table>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-success" id="descargarUnicoExcel">Descargar Historial Único (Excel)</button>
          <button type="button" class="btn btn-primary" id="descargarGlobalExcel">Descargar Historial Global (Excel)</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="tablasModal" tabindex="-1" aria-labelledby="tablasModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="tablasModalLabel">Datos Estadísticos</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="row">
            <div class="col-md-4">
              <div class="mb-2">
                <h6>Solicitudes por Puesto</h6>
                <div class="d-flex gap-2">
                  <select class="form-select" id="yearSolicitudes">
                    <option value="">Todos los años</option>
                  </select>
                  <select class="form-select" id="monthSolicitudes">
                    <option value="">Todos los meses</option>
                    <option value="1">Enero</option>
                    <option value="2">Febrero</option>
                    <option value="3">Marzo</option>
                    <option value="4">Abril</option>
                    <option value="5">Mayo</option>
                    <option value="6">Junio</option>
                    <option value="7">Julio</option>
                    <option value="8">Agosto</option>
                    <option value="9">Septiembre</option>
                    <option value="10">Octubre</option>
                    <option value="11">Noviembre</option>
                    <option value="12">Diciembre</option>
                  </select>
                </div>
              </div>
              <table class="table table-bordered" id="solicitudesPorPuestoTable">
                <thead>
                  <tr>
                    <th>Lugar</th>
                    <th>Cantidad</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
            <div class="col-md-4">
              <div class="mb-2">
                <h6>Colaboradores por Contratista</h6>
                <div class="d-flex gap-2">
                  <select class="form-select" id="yearColaboradores">
                    <option value="">Todos los años</option>
                  </select>
                  <select class="form-select" id="monthColaboradores">
                    <option value="">Todos los meses</option>
                    <option value="1">Enero</option>
                    <option value="2">Febrero</option>
                    <option value="3">Marzo</option>
                    <option value="4">Abril</option>
                    <option value="5">Mayo</option>
                    <option value="6">Junio</option>
                    <option value="7">Julio</option>
                    <option value="8">Agosto</option>
                    <option value="9">Septiembre</option>
                    <option value="10">Octubre</option>
                    <option value="11">Noviembre</option>
                    <option value="12">Diciembre</option>
                  </select>
                </div>
              </div>
              <table class="table table-bordered" id="colaboradoresPorContratistaTable">
                <thead>
                  <tr>
                    <th>Contratista</th>
                    <th>Cantidad</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
            <div class="col-md-4">
              <div class="mb-2">
                <h6>Solicitudes por Interventor</h6>
                <div class="d-flex gap-2">
                  <select class="form-select" id="yearInterventores">
                    <option value="">Todos los años</option>
                  </select>
                  <select class="form-select" id="monthInterventores">
                    <option value="">Todos los meses</option>
                    <option value="1">Enero</option>
                    <option value="2">Febrero</option>
                    <option value="3">Marzo</option>
                    <option value="4">Abril</option>
                    <option value="5">Mayo</option>
                    <option value="6">Junio</option>
                    <option value="7">Julio</option>
                    <option value="8">Agosto</option>
                    <option value="9">Septiembre</option>
                    <option value="10">Octubre</option>
                    <option value="11">Noviembre</option>
                    <option value="12">Diciembre</option>
                  </select>
                </div>
              </div>
              <table class="table table-bordered" id="solicitudesPorInterventorTable">
                <thead>
                  <tr>
                    <th>Interventor</th>
                    <th>Cantidad</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="modalVerQR" tabindex="-1" role="dialog" aria-labelledby="modalVerQRLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content shadow-lg rounded">
        <div class="modal-header">
          <h5 class="modal-title" id="modalVerQRLabel">Ver QR</h5>
          <button type="button" class="close" data-bs-dismiss="modal" aria-label="Cerrar"><span aria-hidden="true">×</span></button>
        </div>
        <div class="modal-body text-center">
          <div id="qr-container"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="modalVerDetalles" tabindex="-1" role="dialog" aria-labelledby="modalVerDetallesLabel">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
      <div class="modal-content shadow-lg rounded">
        <div class="modal-header">
          <h5 class="modal-title" id="modalVerDetallesLabel">Detalles de la Solicitud</h5>
          <button type="button" class="close" data-bs-dismiss="modal" aria-label="Cerrar"><span aria-hidden="true">×</span></button>
        </div>
        <div class="modal-body" id="detalles-container"></div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="modalVerFoto" tabindex="-1" role="dialog" aria-labelledby="modalVerFotoLabel">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
      <div class="modal-content shadow-lg rounded">
        <div class="modal-header">
          <h5 class="modal-title" id="modalVerFotoLabel">Foto Ampliada</h5>
          <button type="button" class="close" data-bs-dismiss="modal" aria-label="Cerrar"><span aria-hidden="true">×</span></button>
        </div>
        <div class="modal-body text-center">
          <img id="fotoAmpliada" src="" alt="Foto Ampliada" class="img-fluid">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="modalColaboradores" tabindex="-1" role="dialog" aria-labelledby="modalColaboradoresLabel">
    <div class="modal-dialog modal-xl" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modalColaboradoresLabel">Colaboradores de la Solicitud</h5>
          <button type="button" class="close" data-bs-dismiss="modal" aria-label="Cerrar"><span aria-hidden="true">×</span></button>
        </div>
        <div class="modal-body">
          <p><strong>ID de la Solicitud:</strong> <span id="modalSolicitudId"></span></p>
          <p><strong>Empresa:</strong> <span id="modalEmpresa"></span></p>
          <div class="mb-3">
            <label for="filtroModalEstado" class="form-label">Filtrar por Estado:</label>
            <select class="form-select" id="filtroModalEstado">
              <option value="todos">Todos</option>
              <option value="habilitados">Habilitados</option>
              <option value="inhabilitados">Inhabilitados</option>
            </select>
          </div>
          <div class="table-responsive">
            <table class="table table-bordered">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Nombre</th>
                  <th>Cédula</th>
                  <th>Estado</th>
                  <th>Capacitación SATOR</th>
                  <th>Plantilla SS</th>
                  <th>Acciones</th>
                  <th>Historial</th>
                </tr>
              </thead>
              <tbody id="tablaModalColaboradores"></tbody>
            </table>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de Chat para Interventor -->
  <div id="chatModalInterventor" class="fixed inset-0 z-50 hidden bg-gray-900 bg-opacity-50 flex justify-center items-center">
    <div class="bg-white w-full max-w-4xl h-3/4 rounded-lg shadow-lg overflow-hidden flex flex-col">
      <!-- Header del chat -->
      <div class="bg-gray-800 text-white px-4 py-3 flex justify-between items-center">
        <h5 class="text-lg font-semibold">Chat Interventor - Solicitud <span id="chatSolicitudIdInterventor"></span></h5>
        <button type="button" onclick="closeChatModalInterventor()" class="text-white hover:text-yellow-500">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <!-- Cuerpo del chat -->
      <div class="flex-1 p-4 overflow-y-auto bg-gray-50" id="chatMessagesInterventor"></div>
      <!-- Input para enviar mensajes -->
      <div class="border-t border-gray-200 p-4 bg-white">
        <div class="flex space-x-2">
          <textarea 
            id="chatInputInterventor" 
            class="flex-1 p-2 border border-gray-300 rounded-md resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
            rows="2" 
            placeholder="Escribe un mensaje..."></textarea>
          <button 
            onclick="sendMessageInterventor()" 
            class="bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-yellow-500 transition-colors">
            Enviar
          </button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.bundle.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">


  <script>
    // ===== Configuración inicial y permisos de notificaciones =====
    document.addEventListener('DOMContentLoaded', () => {
      // Permisos de notificaciones se solicitarán al abrir el chat, no aquí
    });
  
    // ===== Variables globales =====
    const USERNAME = '<%= username %>'; // Nombre de usuario del interventor o COA
    let currentSolicitudIdInterventor = null; // ID de la solicitud actual en el chat
    let socketInterventor = null; // Conexión WebSocket para el chat
    let oldestMessageIdInterventor = null; // ID del mensaje más antiguo cargado
    const displayedMessagesInterventor = new Set(); // Conjunto para evitar mensajes duplicados
  
    // ===== Inicialización de jQuery =====
    $(document).ready(() => {
      reasignarEventos(); // Asignar eventos iniciales a los botones
    });
  
    // ===== Funciones de manejo de acciones =====
    /**
     * Maneja la aprobación de una solicitud con confirmación y recarga la página si tiene éxito.
     * @param {HTMLElement} btn - Botón que desencadena la acción.
     */
    async function manejarAprobar(btn) {
      const solicitudId = btn.id.replace('aprobarBtn-', '');
      const confirmacion = await Swal.fire({
        title: '¿Estás seguro?',
        text: 'Esta acción aprobará la solicitud.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sí, aprobar',
        cancelButtonText: 'Cancelar',
      });
  
      if (!confirmacion.isConfirmed) return;
  
      try {
        const response = await fetch('/aprobar-solicitud-interventor', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ solicitudId }),
        });
  
        if (response.ok) {
          await Swal.fire('¡Éxito!', 'La solicitud ha sido aprobada.', 'success');
          window.location.reload();
        } else {
          throw new Error('Error al aprobar la solicitud');
        }
      } catch (error) {
        console.error('[ERROR] Error al aprobar:', error);
        Swal.fire('Error', 'Ocurrió un error al realizar la solicitud.', 'error');
      }
    }
  
    /**
     * Muestra el QR de una solicitud en un modal.
     * @param {HTMLElement} btn - Botón que desencadena la acción.
     */
    async function manejarVerQR(btn) {
      const solicitudId = btn.id.replace('verQR-', '');
      try {
        const response = await fetch(`/generar-qr/${solicitudId}`);
        if (response.ok) {
          const qrData = await response.json();
          document.getElementById('qr-container').innerHTML = `<img src="${qrData.qrUrl}" alt="QR Code" class="img-fluid">`;
          $('#modalVerQR').modal('show');
        } else {
          throw new Error('No se pudo obtener el QR');
        }
      } catch (error) {
        console.error('[ERROR] Error al obtener el QR:', error);
        Swal.fire('Error', 'Hubo un error al obtener el QR.', 'error');
      }
    }
  
    /**
     * Muestra los detalles de una solicitud en un modal con formato personalizado.
     * @param {HTMLElement} btn - Botón que desencadena la acción.
     */
    async function manejarVerDetalles(btn) {
      const solicitudId = btn.id.replace('verDETALLES-', '');
      try {
        const response = await fetch(`/obtener-detalles-solicitud/${solicitudId}`);
        if (!response.ok) throw new Error('No se pudieron obtener los detalles');
  
        const detalles = await response.json();
        const detallesContainer = document.getElementById('detalles-container');
        detallesContainer.innerHTML = `
          <style>
            .modal-body { font-family: Arial, sans-serif; padding: 20px; }
            .header { text-align: center; margin-bottom: 20px; }
            .header img { width: 100px; }
            .header h1 { margin: 0; font-size: 24px; }
            .header p { margin: 0; font-size: 14px; color: #666; }
            .section { margin-bottom: 20px; }
            .section h2 { font-size: 18px; border-bottom: 2px solid #000; padding-bottom: 5px; }
            .section p { margin: 5px 0; }
            .table { width: 100%; border-collapse: collapse; margin-top: 10px; }
            .table th, .table td { border: 1px solid #000; padding: 8px; text-align: left; }
            .table th { background-color: #f2f2f2; }
            .table img { width: 100px; height: 100px; object-fit: cover; border: 1px solid #ccc; border-radius: 8px; cursor: pointer; }
            .modal-custom { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); justify-content: center; align-items: center; }
            .modal-content-custom { background-color: #fff; padding: 20px; border-radius: 10px; text-align: center; max-width: 600px; width: 90%; }
            .modal-content-custom img.foto-large { width: 400px; height: 400px; object-fit: contain; margin-bottom: 20px; }
            .modal-content-custom h3 { font-size: 24px; margin: 10px 0; }
            .modal-content-custom p { font-size: 18px; margin: 5px 0; }
            .close-btn-custom { position: absolute; top: 10px; right: 20px; font-size: 30px; cursor: pointer; color: #333; }
          </style>
          <div class="header">
            <img src="${detalles.logoBase64}" alt="Logo">
            <h1>Informe de Solicitud</h1>
            <p>Sistema Gestor de Ingreso Contratistas</p>
            <p>Documento generado el día: ${detalles.fecha}</p>
          </div>
          <div class="section">
            <h2>Detalles de la Solicitud</h2>
            <p><strong>ID de la Solicitud:</strong> ${detalles.solicitud.id || '❌'}</p>
            <p><strong>Empresa:</strong> ${detalles.solicitud.empresa || '❌'}</p>
            <p><strong>NIT:</strong> ${detalles.solicitud.nit || '❌'}</p>
            <p><strong>Lugar:</strong> ${detalles.solicitud.lugar || '❌'}</p>
            <p><strong>Labor:</strong> ${detalles.solicitud.labor || '❌'}</p>
            <p><strong>Contratista:</strong> ${detalles.contractorName || '❌'}</p>
            <p><strong>Interventor:</strong> ${detalles.interventorName || '❌'}</p>
            <p><strong>Fechas:</strong> ${detalles.solicitud.inicio_obra || '❌'} - ${detalles.solicitud.fin_obra || '❌'}</p>
            <p><strong>ARL:</strong> ${detalles.solicitud.arl_documento ? '✅' : '❌'}</p>
            <p><strong>Planilla de Pago Seguridad Social:</strong> ${detalles.solicitud.pasocial_documento ? '✅' : '❌'}</p>
          </div>
          <div class="section">
            <h2>Colaboradores</h2>
            <table class="table">
              <thead>
                <tr>
                  <th>ID Colaborador</th>
                  <th>Cédula</th>
                  <th>Nombre</th>
                  <th>Fotos</th>
                </tr>
              </thead>
              <tbody>
                ${detalles.colaboradores.map(colaborador => `
                  <tr>
                    <td>${colaborador.id || '❌'}</td>
                    <td>${colaborador.cedula || '❌'}</td>
                    <td>${colaborador.nombre || '❌'}</td>
                    <td>
                      ${colaborador.foto 
                        ? `<img src="${colaborador.foto}" alt="Foto del colaborador" class="foto-img" data-foto="${colaborador.foto}" data-nombre="${colaborador.nombre}" data-id="${colaborador.id}">` 
                        : '❌ Sin foto'}
                      <br>
                      ${colaborador.cedulaFoto 
                        ? `<img src="${colaborador.cedulaFoto}" alt="Foto de la cédula" class="foto-img" data-foto="${colaborador.cedulaFoto}" data-nombre="${colaborador.nombre}" data-id="${colaborador.id}">` 
                        : '❌ Sin cédula'}
                    </td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
          <div id="fotoModalCustom" class="modal-custom">
            <div class="modal-content-custom">
              <span class="close-btn-custom" onclick="closeModalCustom()">×</span>
              <img id="modalFotoCustom" class="foto-large" src="" alt="Foto ampliada">
              <h3 id="modalNombreCustom"></h3>
              <p><strong>ID Colaborador:</strong> <span id="modalIdCustom"></span></p>
            </div>
          </div>
        `;
  
        const modal = document.getElementById('modalVerDetalles');
        modal.removeAttribute('aria-hidden');
        $('#modalVerDetalles').modal('show');
  
        $('#modalVerDetalles').on('hidden.bs.modal', () => {
          modal.setAttribute('aria-hidden', 'true');
          btn.focus();
        });
  
        document.querySelectorAll('.foto-img').forEach(img => {
          img.addEventListener('click', () => {
            const fotoSrc = img.getAttribute('data-foto');
            const nombre = img.getAttribute('data-nombre');
            const id = img.getAttribute('data-id');
            openModalCustom(fotoSrc, nombre, id);
          });
        });
      } catch (error) {
        console.error('[ERROR] Error al obtener los detalles:', error);
        Swal.fire('Error', 'Hubo un error al obtener los detalles de la solicitud.', 'error');
      }
    }
  
    /**
     * Abre un modal personalizado para mostrar una foto ampliada.
     * @param {string} fotoSrc - URL de la foto.
     * @param {string} nombre - Nombre del colaborador.
     * @param {string} id - ID del colaborador.
     */
    function openModalCustom(fotoSrc, nombre, id) {
      const modal = document.getElementById('fotoModalCustom');
      document.getElementById('modalFotoCustom').src = fotoSrc;
      document.getElementById('modalNombreCustom').textContent = nombre || 'Sin nombre';
      document.getElementById('modalIdCustom').textContent = id || 'Sin ID';
      modal.style.display = 'flex';
    }
  
    /**
     * Cierra el modal personalizado de fotos.
     */
    function closeModalCustom() {
      document.getElementById('fotoModalCustom').style.display = 'none';
    }
  
    // Cerrar el modal al hacer clic fuera
    document.addEventListener('click', e => {
      const modal = document.getElementById('fotoModalCustom');
      if (e.target === modal) closeModalCustom();
    });
  
    /**
     * Maneja la detención o reanudación de una labor con confirmación.
     * @param {string} solicitudId - ID de la solicitud.
     * @param {HTMLElement} button - Botón que desencadena la acción.
     * @param {string} accion - 'detener' o 'reanudar'.
     */
    async function manejarLabor(solicitudId, button, accion) {
      const mensajeConfirmacion = accion === 'detener' ? '¿Está seguro de que desea detener la labor?' : '¿Está seguro de que desea reanudar la labor?';
      const result = await Swal.fire({
        title: 'Confirmar acción',
        text: mensajeConfirmacion,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Sí, continuar',
        cancelButtonText: 'Cancelar',
      });
  
      if (!result.isConfirmed) return;
  
      button.disabled = true;
      button.innerHTML = accion === 'detener' ? 'Detener Labor' : 'Reanudar Labor';
  
      try {
        const endpoint = accion === 'detener' ? `/solicitudes/${solicitudId}/detener-labor` : `/solicitudes/${solicitudId}/reanudar-labor`;
        const response = await fetch(endpoint, { method: 'PUT', headers: { 'Content-Type': 'application/json' } });
  
        if (response.ok) {
          document.location.reload();
        } else {
          const errorData = await response.json();
          throw new Error(errorData.message || 'No se pudo procesar la solicitud');
        }
      } catch (err) {
        console.error('[ERROR] Error al manejar la labor:', err);
        Swal.fire('Error', 'Ocurrió un error al procesar la solicitud.', 'error');
      } finally {
        button.disabled = false;
        button.innerHTML = accion === 'detener' ? 'Detener Labor' : 'Reanudar Labor';
      }
    }
  
    // ===== Filtros y descargas =====
    /**
     * Filtra las solicitudes según los criterios del formulario y actualiza la tabla.
     */
    document.getElementById('filtrarBtn').addEventListener('click', async () => {
      const filtros = {
        id: document.getElementById('filtroId').value.trim(),
        idColaborador: document.getElementById('filtroIdColaborador').value.trim(),
        cedula: document.getElementById('filtroCedula').value.trim(),
        interventor: document.getElementById('filtroInterventor').value.trim(),
        estado: document.getElementById('filtroEstado').value,
        fechaInicio: document.getElementById('filtroFechaInicio').value,
        fechaFin: document.getElementById('filtroFechaFin').value,
        nit: document.getElementById('filtroNit').value.trim(),
        empresa: document.getElementById('filtroEmpresa').value.trim(),
        lugar: document.getElementById('filtroLugar').value,
        vigencia: document.getElementById('filtroVigencia').value,
      };
  
      try {
        const response = await fetch('/filtrar-solicitudes', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(filtros),
        });
  
        if (response.ok) {
          let solicitudesFiltradas = await response.json();
          if (filtros.vigencia) {
            solicitudesFiltradas = solicitudesFiltradas.filter(accion => accion.estado_vigencia === filtros.vigencia);
          }
          actualizarTabla(solicitudesFiltradas);
          iniciarActualizacionContadores();
        } else {
          throw new Error('No se pudieron filtrar las solicitudes');
        }
      } catch (error) {
        console.error('[ERROR] Error al filtrar:', error);
        Swal.fire('Error', 'Hubo un error al realizar el filtrado.', 'error');
      }
    });
  
    /**
     * Descarga un Excel único para una solicitud específica.
     */
    document.getElementById('descargarUnicoExcel').addEventListener('click', () => {
      const solicitudId = document.querySelector('#historialModal').dataset.solicitudId;
      if (solicitudId) {
        window.location.href = `/descargar-excel-unico/${solicitudId}`;
      } else {
        Swal.fire('Error', 'No se encontró el ID de la solicitud.', 'error');
      }
    });
  
    /**
     * Descarga un Excel global con todas las solicitudes.
     */
    document.getElementById('descargarGlobalExcel').addEventListener('click', () => {
      window.location.href = '/descargar-excel-global';
    });
  
    /**
     * Muestra el historial de una solicitud en un modal.
     * @param {HTMLElement} btn - Botón que desencadena la acción.
     */
     function manejarVerHistorial(btn) {
  const solicitudId = btn.getAttribute('data-solicitud-id');
  fetch(`/obtener-historial/${solicitudId}`)
    .then(response => response.json())
    .then(data => {
      console.log('Historial Data:', data); // Debug the response
      const tableBody = document.getElementById('historialTableBody');
      tableBody.innerHTML = '';
      
      // Mostrar mensaje cuando no hay datos
      if (!data || data.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="10" class="text-center">No hay registros para mostrar.</td></tr>';
      } else {
        data.forEach(registro => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${registro.tipo_registro || 'N/A'}</td>
            <td>${registro.nombre || 'N/A'}</td>
            <td>${registro.identificacion || 'N/A'}</td>
            <td>${registro.empresa || 'N/A'}</td>
            <td>${registro.lugar || 'N/A'}</td>
            <td>${registro.usuario_registro || 'N/A'}</td>
            <td>${registro.tipo || 'N/A'}</td>
            <td>${registro.registro_hecho || 'N/A'}</td>
            <td>${registro.fecha_hora || 'N/A'}</td>
            <td><span class="badge ${registro.estado_actual === 'Ingreso' ? 'bg-success' : 'bg-danger'}">${registro.estado_actual || 'N/A'}</span></td>
          `;
          tableBody.appendChild(row);
        });
      }

      // Mostrar el modal independientemente de si hay datos o no
      const modal = document.getElementById('historialModal');
      modal.dataset.solicitudId = solicitudId;
      modal.removeAttribute('aria-hidden');
      $('#historialModal').modal('show');

      $('#historialModal').on('hidden.bs.modal', () => {
        modal.setAttribute('aria-hidden', 'true');
        btn.focus();
      });
    })
    .catch(error => {
      console.error('[ERROR] Error al obtener el historial:', error);
      Swal.fire('Error', 'No se pudo obtener el historial.', 'error');
    });
}
     /**
     * Actualiza la tabla de solicitudes con los datos filtrados o iniciales.
     * @param {Array} acciones - Lista de solicitudes a mostrar.
     */
    function actualizarTabla(acciones) {
      const tbody = document.querySelector('#tablaSolicitudes tbody');
      tbody.innerHTML = '';
  
      if (acciones.length > 0) {
        acciones.forEach(accion => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td class="solicitud-id">${accion.solicitud_id}</td>
            <td>${accion.empresa}</td>
            <td>${accion.nit}</td>
            <td>${accion.inicio_obra}</td>
            <td>${accion.fin_obra}</td>
            <td>${accion.lugar}</td>
            <td>${accion.labor}</td>
            <td>
              ${accion.solicitud_estado === 'aprobada' && accion.solicitud_estado_interventor === 'pendiente' ?
                `<span class="badge bg-success">Aprobado por SST</span>` :
                (accion.solicitud_estado === 'aprobada' && accion.solicitud_estado_interventor === 'aprobada' ?
                  `<span class="badge bg-info">Pendiente Ingreso</span>` :
                  (accion.solicitud_estado === 'pendiente' ?
                    `<span class="badge bg-warning">Pendiente</span>` :
                    (accion.solicitud_estado === 'negada' ?
                      `<span class="badge bg-danger">Negada</span>` :
                      (accion.solicitud_estado === 'en labor' ?
                        `<span class="badge bg-primary">En Labor</span>` :
                        (accion.solicitud_estado === 'labor detenida' ?
                          `<span class="badge bg-secondary">Labor Detenida</span>` :
                          `<span class="badge bg-secondary">${accion.solicitud_estado}</span>`)))))
              }
            </td>
            <td>${accion.interventor}</td>
            <td>${accion.estado_vigencia}</td>
            <td>
              ${accion.accion === 'pendiente' && accion.estado_vigencia === 'Vigente' ?
                (accion.puede_aprobar === 'Aprobar' ?
                  `<button class="btn btn-success btn-sm" id="aprobarBtn-${accion.solicitud_id}">Aprobar</button>` :
                  `<span class="badge bg-warning">Pendiente de Aprobación</span>`) :
                (accion.accion === 'pendiente' && accion.estado_vigencia === 'Vencida' ?
                  `<span class="badge bg-danger">No Aprobada - Vencida</span>` :
                  (accion.accion === 'aprobada' && (accion.solicitud_estado === 'en labor' || accion.solicitud_estado === 'aprobada') && accion.estado_vigencia === 'Vigente' ?
                    `<button class="btn btn-danger btn-sm" onclick="manejarLabor(${accion.solicitud_id}, this, 'detener')">Detener Labor</button>` :
                    (accion.accion === 'aprobada' && accion.solicitud_estado === 'en labor' && accion.estado_vigencia === 'Vencida' ?
                      `<span class="badge bg-danger">En Labor - Vencida</span>` :
                      (accion.accion === 'aprobada' && accion.solicitud_estado === 'labor detenida' && accion.estado_vigencia === 'Vigente' ?
                        `<button class="btn btn-success btn-sm" onclick="manejarLabor(${accion.solicitud_id}, this, 'reanudar')">Reanudar Labor</button>` :
                        (accion.accion === 'aprobada' && accion.solicitud_estado === 'labor detenida' && accion.estado_vigencia === 'Vencida' ?
                          `<span class="badge bg-danger">Labor Detenida - Vencida</span>` :
                          (accion.accion === 'aprobada' && accion.solicitud_estado === 'aprobada' && accion.estado_vigencia === 'Vencida' ?
                            `<span class="badge bg-danger">Aprobada - Vencida</span>` :
                            (accion.accion === 'negada' ?
                              `<span class="badge bg-danger">Negada${accion.estado_vigencia === 'Vencida' ? ' - Vencida' : ''}</span>` :
                              `<span class="badge bg-secondary">Estado Desconocido</span>`)))))))
              }
            </td>
            ${USERNAME === 'COA' ? `
              <td>
                <button class="btn btn-danger btn-sm eliminar-solicitud" data-solicitud-id="${accion.solicitud_id}">Eliminar</button>
              </td>` : ''}
            <td>
              <button class="btn btn-info btn-sm" id="verDETALLES-${accion.solicitud_id}">Ver</button>
              <button class="btn btn-primary btn-sm ver-colaboradores" data-solicitud-id="${accion.solicitud_id}">Colaboradores</button>
            </td>
            <td>
              <button class="btn btn-info btn-sm ver-historial" data-solicitud-id="${accion.solicitud_id}">Ver Historial</button>
            </td>
            <td>
              <button class="btn btn-primary btn-sm ml-2 open-chat-btn-interventor" data-solicitud-id="${accion.solicitud_id}">
                Conversar <span class="badge bg-danger text-white unread-count" data-solicitud-id="${accion.solicitud_id}">0</span>
              </button>
            </td>
          `;
          tbody.appendChild(row);
        });
      } else {
        tbody.innerHTML = `<tr><td colspan="${USERNAME === 'COA' ? 14 : 13}" class="text-center">No hay acciones para revisar.</td></tr>`;
      }
  
      reasignarEventos();
  
      document.querySelectorAll('.open-chat-btn-interventor').forEach(btn => {
        const newBtn = btn.cloneNode(true);
        btn.replaceWith(newBtn);
        newBtn.addEventListener('click', () => openChatModalInterventor(newBtn.dataset.solicitudId));
        updateUnreadCountInterventor(newBtn.dataset.solicitudId);
      });
    }
  
    /**
     * Reasigna eventos a los botones después de actualizar la tabla.
     */
    function reasignarEventos() {
      document.querySelectorAll('[id^="aprobarBtn-"]').forEach(btn => {
        btn.addEventListener('click', () => manejarAprobar(btn));
      });
      document.querySelectorAll('[id^="verQR-"]').forEach(btn => {
        btn.addEventListener('click', () => manejarVerQR(btn));
      });
      document.querySelectorAll('[id^="verDETALLES-"]').forEach(btn => {
        btn.addEventListener('click', () => manejarVerDetalles(btn));
      });
      document.querySelectorAll('.ver-historial').forEach(btn => {
        btn.addEventListener('click', () => manejarVerHistorial(btn));
      });
      document.querySelectorAll('.eliminar-solicitud').forEach(btn => {
        btn.addEventListener('click', () => {
          const solicitudId = btn.getAttribute('data-solicitud-id');
          Swal.fire({
            title: '¿Estás seguro?',
            text: 'Esta acción eliminará la solicitud y todos los archivos asociados. No se puede deshacer.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar',
          }).then(result => {
            if (result.isConfirmed) {
              $.ajax({
                url: '/eliminar-solicitud',
                method: 'POST',
                data: { solicitud_id: solicitudId },
                success: () => {
                  Swal.fire('Eliminado!', 'La solicitud ha sido eliminada correctamente.', 'success').then(() => {
                    window.location.reload();
                  });
                },
                error: xhr => {
                  Swal.fire('Error!', 'No se pudo eliminar la solicitud: ' + xhr.responseText, 'error');
                },
              });
            }
          });
        });
      });
      document.querySelectorAll('.ver-colaboradores').forEach(btn => {
        btn.addEventListener('click', () => manejarVerColaboradores(btn));
      });
    }
  
    /**
     * Llena los selectores de año en el modal de estadísticas.
     */
    function llenarSelectoresAño() {
      const currentYear = new Date().getFullYear();
      const startYear = 2020;
      const selectores = ['yearSolicitudes', 'yearColaboradores', 'yearInterventores'];
  
      selectores.forEach(selectorId => {
        const select = document.getElementById(selectorId);
        select.innerHTML = ''; // Limpiar opciones previas
        for (let year = currentYear; year >= startYear; year--) {
          const option = document.createElement('option');
          option.value = year;
          option.text = year;
          select.appendChild(option);
        }
      });
    }
  
    /**
     * Carga los datos de las tablas estadísticas según los filtros seleccionados.
     */
    async function cargarDatosTablas() {
      try {
        const params = new URLSearchParams({
          yearSolicitudes: document.getElementById('yearSolicitudes').value,
          monthSolicitudes: document.getElementById('monthSolicitudes').value,
          yearColaboradores: document.getElementById('yearColaboradores').value,
          monthColaboradores: document.getElementById('monthColaboradores').value,
          yearInterventores: document.getElementById('yearInterventores').value,
          monthInterventores: document.getElementById('monthInterventores').value,
        }).toString();
  
        const response = await fetch(`/obtener-datos-tablas${params ? '?' + params : ''}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
        });
  
        if (!response.ok) throw new Error('Error al obtener datos');
        const datos = await response.json();
  
        const solicitudesBody = document.querySelector('#solicitudesPorPuestoTable tbody');
        solicitudesBody.innerHTML = datos.solicitudesPorPuesto.map(item => `
          <tr><td>${item.lugar}</td><td>${item.cantidad}</td></tr>
        `).join('');
  
        const colaboradoresBody = document.querySelector('#colaboradoresPorContratistaTable tbody');
        colaboradoresBody.innerHTML = datos.colaboradoresPorContratista.map(item => `
          <tr><td>${item.contratista}</td><td>${item.cantidad}</td></tr>
        `).join('');
  
        const interventoresBody = document.querySelector('#solicitudesPorInterventorTable tbody');
        interventoresBody.innerHTML = datos.solicitudesPorInterventor.map(item => `
          <tr><td>${item.interventor}</td><td>${item.cantidad}</td></tr>
        `).join('');
      } catch (error) {
        console.error('[ERROR] Error al cargar datos de tablas:', error);
        Swal.fire('Error', 'No se pudieron cargar los datos estadísticos.', 'error');
      }
    }
  
    $('#tablasModal').on('shown.bs.modal', () => {
      llenarSelectoresAño();
      cargarDatosTablas();
      $('#yearSolicitudes, #monthSolicitudes, #yearColaboradores, #monthColaboradores, #yearInterventores, #monthInterventores').on('change', cargarDatosTablas);
    });
  
    /**
     * Muestra y gestiona los colaboradores de una solicitud en un modal.
     * @param {HTMLElement} btn - Botón que desencadena la acción.
     */
     function manejarVerColaboradores(btn) {
  const solicitudId = btn.getAttribute('data-solicitud-id');
  fetch(`/obtener-colaboradores-todos/${solicitudId}`)
    .then(response => response.json())
    .then(data => {
      document.getElementById('modalSolicitudId').textContent = solicitudId;
      document.getElementById('modalEmpresa').textContent = data.solicitud?.empresa || '';
     
      const tbody = document.getElementById('tablaModalColaboradores');
      tbody.innerHTML = (data.colaboradores && data.colaboradores.length > 0)
        ? data.colaboradores.map(col => {
            const capacitacion = col.capacitacion || 'No definido';
            let plantillaSS = 'No definida';
            if (col.plantilla_ss && col.plantilla_ss !== 'No definida') {
              try {
                const [, fechaFin] = col.plantilla_ss.split(' - ');
                const [day, month, year] = fechaFin.split('/');
                const fechaFinDate = new Date(`${year}-${month}-${day}`);
                plantillaSS = fechaFinDate > new Date() ? 'Vigente' : 'Vencido';
              } catch (error) {
                console.error(`Error parseando plantilla_ss para colaborador ${col.id}:`, error);
                plantillaSS = 'No definida';
              }
            }
            const accionBtn = col.estado
              ? `<button class="btn btn-danger btn-sm accion-colaborador" data-colaborador-id="${col.id}" data-nuevo-estado="false">Deshabilitar</button>`
              : `<button class="btn btn-success btn-sm accion-colaborador" data-colaborador-id="${col.id}" data-nuevo-estado="true">Restaurar</button>`;
            return `
              <tr data-colaborador-id="${col.id}" data-estado="${col.estado ? 'habilitado' : 'inhabilitado'}">
                <td>${col.id}</td>
                <td>${col.nombre}</td>
                <td>${col.cedula}</td>
                <td class="estado-colaborador">${col.estado ? 'Habilitado' : 'Inhabilitado'}</td>
                <td>${capacitacion}</td>
                <td>${plantillaSS}</td>
                <td class="acciones-colaborador">${accionBtn}</td>
                <td>
                  <button class="btn btn-info btn-sm ver-historial-colab" data-colaborador-id="${col.id}">
                    <i class="fas fa-history"></i> Ver Historial
                  </button>
                </td>
              </tr>
            `;
          }).join('')
        : '<tr><td colspan="8" class="text-center">No hay colaboradores para mostrar</td></tr>';

      $('#modalColaboradores').modal('show');

      document.querySelectorAll('.accion-colaborador').forEach(btn => {
        btn.addEventListener('click', e => {
          e.preventDefault();
          const colaboradorId = btn.getAttribute('data-colaborador-id');
          const nuevoEstado = btn.getAttribute('data-nuevo-estado') === 'true';
          cambiarEstadoColaboradorInterventor(colaboradorId, nuevoEstado, e);
        });
      });

      document.querySelectorAll('.ver-historial-colab').forEach(btn => {
        btn.addEventListener('click', e => {
          e.preventDefault();
          const colaboradorId = btn.getAttribute('data-colaborador-id');
          verHistorialColaborador(colaboradorId);
        });
      });

      document.getElementById('filtroModalEstado').addEventListener('change', aplicarFiltroModalEstado);
    })
    .catch(error => {
      console.error('[ERROR] Error al obtener colaboradores:', error);
      Swal.fire('Error', 'No se pudieron cargar los colaboradores: ' + error.message, 'error');
    });
}
    /**
     * Filtra las filas del modal de colaboradores según el estado seleccionado.
     */
    function aplicarFiltroModalEstado() {
      const filtro = document.getElementById('filtroModalEstado').value;
      const filas = document.querySelectorAll('#tablaModalColaboradores tr');
  
      filas.forEach(fila => {
        const dataEstado = fila.getAttribute('data-estado');
        if (!dataEstado) return;
        fila.style.display = filtro === 'todos' || (filtro === 'habilitados' && dataEstado === 'habilitado') || (filtro === 'inhabilitados' && dataEstado === 'inhabilitado') ? '' : 'none';
      });
    }
  
    /**
     * Cambia el estado de un colaborador (habilitar/deshabilitar).
     * @param {string} colaboradorId - ID del colaborador.
     * @param {boolean} nuevoEstado - Nuevo estado (true: habilitado, false: inhabilitado).
     * @param {Event} event - Evento del botón.
     */
    async function cambiarEstadoColaboradorInterventor(colaboradorId, nuevoEstado, event) {
      const boton = event.target;
      boton.disabled = true;
      boton.textContent = 'Procesando...';
  
      try {
        const response = await fetch(`/actualizar-estado-colaborador/${colaboradorId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ estado: nuevoEstado, usuario: USERNAME }),
        });
  
        if (!response.ok) throw new Error((await response.json()).message || 'Error al actualizar');
        const fila = document.querySelector(`tr[data-colaborador-id="${colaboradorId}"]`);
  
        if (fila) {
          fila.querySelector('.estado-colaborador').textContent = nuevoEstado ? 'Habilitado' : 'Inhabilitado';
          fila.setAttribute('data-estado', nuevoEstado ? 'habilitado' : 'inhabilitado');
          fila.querySelector('.acciones-colaborador').innerHTML = nuevoEstado ?
            `<button class="btn btn-danger btn-sm accion-colaborador" data-colaborador-id="${colaboradorId}" data-nuevo-estado="false">Deshabilitar</button>` :
            `<button class="btn btn-success btn-sm accion-colaborador" data-colaborador-id="${colaboradorId}" data-nuevo-estado="true">Restaurar</button>`;
  
          fila.querySelector('.accion-colaborador').addEventListener('click', e => {
            e.preventDefault();
            const colId = e.target.getAttribute('data-colaborador-id');
            const newState = e.target.getAttribute('data-nuevo-estado') === 'true';
            cambiarEstadoColaboradorInterventor(colId, newState, e);
          });
  
          aplicarFiltroModalEstado();
        }
  
        Swal.fire({ icon: 'success', title: 'Éxito', text: `Colaborador ${nuevoEstado ? 'habilitado' : 'deshabilitado'} correctamente`, timer: 1500, showConfirmButton: false });
      } catch (error) {
        console.error('[ERROR] Error al cambiar estado:', error);
        Swal.fire('Error', error.message, 'error');
      } finally {
        boton.disabled = false;
        boton.textContent = nuevoEstado ? 'Restaurar' : 'Deshabilitar';
      }
    }
  
    /**
     * Muestra el historial de un colaborador en un modal.
     * @param {string} colaboradorId - ID del colaborador.
     */
    function verHistorialColaborador(colaboradorId) {
      fetch(`/obtener-historial-colaborador/${colaboradorId}`)
        .then(response => response.json())
        .then(data => {
          const tableBody = document.getElementById('historialTableBody');
          tableBody.innerHTML = data.length > 0 ? data.map(registro => `
            <tr>
              <td>${registro.nombre_colaborador}</td>
              <td>${registro.empresa}</td>
              <td>${registro.nit}</td>
              <td>${registro.tipo}</td>
              <td>${registro.lugar}</td>
              <td>${registro.usuario_registro}</td>
              <td>${registro.registro_hecho}</td>
              <td>${registro.fecha_hora}</td>
              <td><span class="badge ${registro.estado_actual === 'Ingreso' ? 'bg-success' : 'bg-danger'}">${registro.estado_actual}</span></td>
            </tr>
          `).join('') : '<tr><td colspan="9" class="text-center">No hay registros de ingresos o salidas para este colaborador</td></tr>';
  
          $('#modalColaboradores').modal('hide');
          $('#historialModal').modal('show');
  
          $('#historialModal').on('hidden.bs.modal', () => $('#modalColaboradores').modal('show'));
        })
        .catch(error => {
          console.error('[ERROR] Error al obtener historial:', error);
          Swal.fire('Error', 'No se pudo obtener el historial del colaborador', 'error');
        });
    }
  
    // ===== Funciones de chat =====
    /**
     * Obtiene el ID del usuario interventor (ajustar según autenticación real).
     * @returns {number} ID del usuario interventor.
     */
     function getInterventorUserId() {
  // Intentar obtener el ID de la variable directamente del backend
  const userId = '<%= userId %>';
  if (userId && userId !== 'undefined') {
    return userId;
  }
  
  // Intentar obtener de un atributo data en algún elemento
  const userIdElement = document.querySelector('[data-interventor-user-id]');
  if (userIdElement && userIdElement.dataset.interventorUserId) {
    return userIdElement.dataset.interventorUserId;
  }
  
  // Intentar obtener de un meta tag
  const metaTag = document.querySelector('meta[name="interventor-user-id"]');
  if (metaTag && metaTag.getAttribute('content')) {
    return metaTag.getAttribute('content');
  }
  
  console.error('❌ No se pudo obtener un ID de usuario interventor válido');
  return null;
}  
    /**
     * Abre el modal de chat para una solicitud específica y solicita permisos de notificación.
     * @param {string} solicitudId - ID de la solicitud.
     */
    async function openChatModalInterventor(solicitudId) {
      try {
        // Solicitar permiso de notificaciones si no está concedido
        if ('Notification' in window && Notification.permission !== 'granted') {
          if (Notification.permission !== 'denied') {
            const permission = await Notification.requestPermission();
            console.log(`[Notificaciones] Permiso ${permission === 'granted' ? 'concedido' : 'denegado'}`);
          } else {
            console.log('[Notificaciones] Permiso denegado previamente por el usuario');
          }
        }
  
        currentSolicitudIdInterventor = solicitudId;
        document.getElementById('chatSolicitudIdInterventor').textContent = solicitudId;
        document.getElementById('chatModalInterventor').classList.remove('hidden');
        displayedMessagesInterventor.clear();
  
        if (!socketInterventor || socketInterventor.readyState !== WebSocket.OPEN) {
          const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
          socketInterventor = new WebSocket(`${protocol}//${window.location.host}/ws/chat/interventor`);
  
          socketInterventor.onopen = function() {
            console.log('[Interventor] WebSocket conectado');
            
            // Obtener ID de usuario con verificación de errores
            const interventorUserId = getInterventorUserId();
            
            if (!interventorUserId || interventorUserId === 'undefined') {
              console.error('❌ ERROR: ID de usuario no válido al identificarse:', interventorUserId);
              Swal.fire({
                icon: 'error',
                title: 'Error de conexión',
                text: 'No se pudo establecer su identidad. Por favor recargue la página.'
              });
              return;
            }
            
            // Identificar al cliente con el ID correcto y el rol
            console.log('🔑 Enviando identificación con usuario:', interventorUserId);
            socketInterventor.send(JSON.stringify({
              type: 'identify',
              userId: interventorUserId,
              role: 'interventor',
              solicitudId: solicitudId
            }));
          };
          socketInterventor.onmessage = function(event) {
            try {
              const message = JSON.parse(event.data);
              console.log("[Interventor] Mensaje recibido desde WebSocket:", message);
              
              // Ignorar mensajes de confirmación de identificación
              if (message.type === 'identify_confirmation') {
                console.log('✅ Identificación confirmada');
                return;
              }
              
              // Si es una actualización de estado
              if (message.type === 'status_update') {
                // Primero buscar por tempId o messageId
                let messageElement = document.querySelector(`[data-message-id="${message.tempId || message.messageId}"]`);
                
                if (messageElement) {
                  // Actualizar ID si necesario
                  if (message.messageId && message.tempId) {
                    messageElement.setAttribute('data-message-id', message.messageId);
                  }
                  
                  // Actualizar estado
                  const statusElement = messageElement.querySelector('.status');
                  if (statusElement) {
                    let statusIcon = '';
                    
                    switch (message.status) {
                      case 'sent':
                        statusIcon = '<span class="status-icon-sent text-gray-400">✓</span>';
                        break;
                      case 'delivered':
                        statusIcon = '<span class="status-icon-delivered text-gray-400">✓✓</span>';
                        break;
                      case 'read':
                        statusIcon = '<span class="status-icon-read text-blue-400">✓✓</span>';
                        break;
                      case 'error':
                        statusIcon = '<span class="status-icon-error text-red-500">✗</span>';
                        break;
                    }
                    
                    statusElement.innerHTML = statusIcon;
                  }
                }
                return;
              }

              // Para mensajes nuevos de chat
              if (message.solicitudId === currentSolicitudIdInterventor) {
                // Determinar si es mensaje propio o recibido
                const interventorUserId = getInterventorUserId();
                const isSenderMessage = message.usuario_id === interventorUserId;
                
                displayMessageInterventor(message);
                
                if (!isSenderMessage) {
                  // Si el mensaje no es del usuario actual y la ventana está oculta, mostrar notificación
                  if (document.hidden) {
                    notifyNewMessageInterventor(message);
                  }
                  
                  // Enviar confirmación de lectura si el chat está abierto
                  if (!document.hidden && socketInterventor.readyState === WebSocket.OPEN) {
                    socketInterventor.send(JSON.stringify({
                      type: 'status_update',
                      messageId: message.id,
                      status: 'read',
                      solicitudId: message.solicitudId,
                      chatType: 'interventor'
                    }));
                  }
                }
              }
              
              // Actualizar contador de mensajes no leídos para esta solicitud
              updateUnreadCountInterventor(message.solicitudId);
            } catch (error) {
              console.error('[Interventor] Error al procesar mensaje del WebSocket:', error);
            }
          };
          socketInterventor.onerror = error => console.error('[Interventor] Error en WebSocket:', error);
          socketInterventor.onclose = () => console.log('[Interventor] WebSocket cerrado');
        }
  
        await loadInitialMessagesInterventor(solicitudId);
        await markMessagesAsReadInterventor(solicitudId);
      } catch (error) {
        console.error('[Interventor] Error al abrir chat:', error);
        Swal.fire('Error', 'No se pudo cargar el chat.', 'error');
      }
    }
  
    /**
     * Cierra el modal de chat y limpia los recursos.
     */
    function closeChatModalInterventor() {
      document.getElementById('chatModalInterventor').classList.add('hidden');
      if (socketInterventor) {
        socketInterventor.close();
        socketInterventor = null;
      }
      currentSolicitudIdInterventor = null;
      oldestMessageIdInterventor = null;
      displayedMessagesInterventor.clear();
    }
  
    /**
     * Envía un mensaje al WebSocket y lo muestra localmente con estado "enviado".
     */
    function sendMessageInterventor() {
      const input = document.getElementById('chatInputInterventor');
      const content = input.value.trim();
      
      if (!content || !currentSolicitudIdInterventor || !socketInterventor) {
        console.warn('No se puede enviar mensaje: contenido vacío o no hay conexión');
        return;
      }

      const interventorUserId = getInterventorUserId();
      if (!interventorUserId) {
        console.error('Error: No se pudo obtener el ID del usuario');
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'No se pudo enviar el mensaje. Por favor recargue la página e intente nuevamente.'
        });
        return;
      }
      
      const tempId = 'temp-' + Date.now();
      const timestamp = new Date().toISOString();
      
      // Mostrar mensaje local inmediatamente
      const localMessage = {
        id: tempId,
        usuario_id: interventorUserId,
        content: content,
        created_at: timestamp,
        isSender: true
      };
      
      displayMessageInterventor(localMessage, true);
      
      // Enviar mensaje al servidor
      try {
        const message = {
          solicitudId: currentSolicitudIdInterventor,
          type: 'interventor',
          content: content,
          userId: interventorUserId,
          tempId: tempId,
          timestamp: timestamp
        };
        
        if (socketInterventor.readyState === WebSocket.OPEN) {
          socketInterventor.send(JSON.stringify(message));
          
          // Actualizar estado progresivamente
          setTimeout(() => updateMessageStatusInterventor(tempId, 'sent'), 100);
          setTimeout(() => updateMessageStatusInterventor(tempId, 'delivered'), 1000);
        } else {
          updateMessageStatusInterventor(tempId, 'error');
          console.error('[Interventor] WebSocket no está abierto. Estado:', socketInterventor.readyState);
        }
      } catch (error) {
        console.error('[Interventor] Error al enviar mensaje:', error);
        updateMessageStatusInterventor(tempId, 'error');
      }
      
      // Limpiar input y hacer scroll
      input.value = '';
      const chatMessages = document.getElementById('chatMessagesInterventor');
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
  
    /**
     * Carga los mensajes iniciales de una conversación.
     * @param {string} solicitudId - ID de la solicitud.
     */
    async function loadInitialMessagesInterventor(solicitudId) {
      const chatMessages = document.getElementById('chatMessagesInterventor');
      chatMessages.innerHTML = '<div class="flex justify-center my-4"><div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-600"></div></div>';
  
      try {
        const interventorUserId = getInterventorUserId();
        const response = await fetch(`/api/chat/${solicitudId}/interventor?limit=20&userId=${interventorUserId}`);
        if (!response.ok) throw new Error(`Error al cargar mensajes: ${response.status}`);
  
        const messages = await response.json();
        chatMessages.innerHTML = messages.length === 0 ?
          '<div class="text-center text-gray-500 p-4">No hay mensajes en esta conversación.</div>' : '';
  
        messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at))
          .forEach(message => displayMessageInterventor(message));
        oldestMessageIdInterventor = messages[0]?.id;
  
        setTimeout(() => chatMessages.scrollTop = chatMessages.scrollHeight, 100);
      } catch (error) {
        console.error('[ERROR] Error al cargar mensajes:', error);
        chatMessages.innerHTML = '<div class="text-center text-red-500 p-4">Error al cargar mensajes.</div>';
      }
    }
  
    /**
     * Devuelve el ícono de estado según las condiciones actuales del backend.
     * @param {boolean} isLocal - Si el mensaje es local (recién enviado).
     * @param {boolean} leido - Si el mensaje fue leído.
     * @returns {string} HTML del ícono de estado.
     */
    function getStatusIcon(isLocal, leido, isDelivered = false) {
        if (isLocal) {
            return '<span class="status-icon-sent text-gray-400">✓</span>'; // Enviado (✓ gris)
        } else if (leido) {
            return '<span class="status-icon-read text-blue-400">✓✓</span>'; // Leído (✓✓ azul)
        } else if (isDelivered) {
            return '<span class="status-icon-delivered text-gray-400">✓✓</span>'; // Entregado (✓✓ gris)
        }
        return '<span class="status-icon-sent text-gray-400">✓</span>'; // Por defecto, enviado
    }
  
    /**
     * Muestra o actualiza un mensaje en el chat con manejo robusto de fechas.
     * @param {Object} message - Mensaje a mostrar o actualizar.
     * @param {boolean} isLocal - Si el mensaje es local (recién enviado).
     */
    function displayMessageInterventor(message, isLocal = false) {
      const chatMessages = document.getElementById('chatMessagesInterventor');
      const interventorUserId = getInterventorUserId();
      const isSender = parseInt(message.usuario_id) === parseInt(interventorUserId);
  
      // Si el mensaje ya existe, actualizamos su estado
      if (message.id && displayedMessagesInterventor.has(message.id)) {
        const existingMessageDiv = chatMessages.querySelector(`[data-message-id="${message.id}"]`);
        if (existingMessageDiv && isSender) {
          const statusIcon = getStatusIcon(false, message.leido, true);
          existingMessageDiv.querySelector('.status').innerHTML = statusIcon;
        }
        return;
      }
  
      if (message.id) displayedMessagesInterventor.add(message.id);
  
      const messageDiv = document.createElement('div');
      messageDiv.className = `chat-message p-3 my-2 rounded-lg ${isSender ? 'ml-auto bg-blue-600 text-white max-w-[70%]' : 'bg-gray-200 text-gray-800 max-w-[70%]'}`;
      if (message.id) messageDiv.setAttribute('data-message-id', message.id);
  
      let messageContent = '';
      try {
        messageContent = typeof message.content === 'string' ? 
          (() => {
            try {
              const parsed = JSON.parse(message.content);
              return parsed.text || message.content;
            } catch (e) {
              return message.content;
            }
          })() : 
          (message.content.text || message.content.value || JSON.stringify(message.content));
      } catch (e) {
        messageContent = message.content || 'Mensaje inválido';
      }
  
      // Formateo de fecha usando el mismo formato que en la vista del contratista
      const date = new Date(message.created_at || message.timestamp);
      const time = date.toLocaleString('es-ES', { dateStyle: 'short', timeStyle: 'short' });
  
      const statusIcon = isSender ? getStatusIcon(isLocal, message.leido, !isLocal) : '';
  
      messageDiv.innerHTML = `
        <div class="text-sm mb-1">${messageContent}</div>
        <div class="text-xs ${isSender ? 'text-gray-300' : 'text-gray-500'} text-right">
          ${time} <span class="status">${statusIcon}</span>
        </div>
      `;
      chatMessages.appendChild(messageDiv);
  
      const isNearBottom = chatMessages.scrollHeight - chatMessages.scrollTop - chatMessages.clientHeight < 100;
      if (isNearBottom) chatMessages.scrollTop = chatMessages.scrollHeight;
    }
  
    /**
     * Actualiza el contador de mensajes no leídos en el botón de chat.
     * @param {string} solicitudId - ID de la solicitud.
     */
    async function updateUnreadCountInterventor(solicitudId) {
      try {
        const interventorUserId = getInterventorUserId();
        const response = await fetch(`/api/chat/${solicitudId}/interventor/unread?userId=${interventorUserId}`);
        if (!response.ok) throw new Error('Error al obtener contador');
  
        const data = await response.json();
        const button = document.querySelector(`.open-chat-btn-interventor[data-solicitud-id="${solicitudId}"]`);
        if (button) {
          const unreadBadge = button.querySelector('.unread-count');
          if (unreadBadge) {
            unreadBadge.textContent = data.unreadCount || 0;
            unreadBadge.style.display = data.unreadCount > 0 ? 'inline-block' : 'none';
          } else {
            console.warn(`[Interventor] Badge no encontrado para solicitud ${solicitudId}`);
          }
        }
      } catch (error) {
        console.error('[ERROR] Error al actualizar contador:', error);
      }
    }
  
    /**
     * Marca los mensajes de una conversación como leídos.
     * @param {string} solicitudId - ID de la solicitud.
     */
    async function markMessagesAsReadInterventor(solicitudId) {
      try {
        const interventorUserId = getInterventorUserId();
        const response = await fetch(`/api/chat/${solicitudId}/interventor/mark-read`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId: interventorUserId }),
        });
  
        if (!response.ok) throw new Error((await response.json()).message || 'Error al marcar como leídos');
        updateUnreadCountInterventor(solicitudId);
      } catch (error) {
        console.error('[ERROR] Error al marcar mensajes como leídos:', error);
      }
    }
  
    /**
     * Muestra una notificación del navegador para un nuevo mensaje.
     * @param {Object} message - Mensaje recibido.
     */
    function notifyNewMessageInterventor(message) {
      if (!('Notification' in window) || Notification.permission !== 'granted') return;
  
      let messageContent = '';
      try {
        messageContent = typeof message.content === 'string' ? (JSON.parse(message.content).text || message.content) : (message.content.text || message.content.value || JSON.stringify(message.content));
      } catch (e) {
        messageContent = message.content || 'Nuevo mensaje';
      }
      new Notification(`Nuevo mensaje en solicitud ${message.solicitudId}`, {
        body: messageContent,
        icon: '/static/icon.png', // Asegúrate de que este archivo exista
      });
    }
  
    // ===== Inicialización de eventos =====
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.open-chat-btn-interventor').forEach(btn => {
        btn.addEventListener('click', () => openChatModalInterventor(btn.dataset.solicitudId));
        updateUnreadCountInterventor(btn.dataset.solicitudId);
      });
  
      document.getElementById('chatInputInterventor')?.addEventListener('keypress', e => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendMessageInterventor();
        }
      });
  
      iniciarActualizacionContadores();
    });
  
    /**
     * Inicia la actualización periódica de los contadores de mensajes no leídos.
     */
    function iniciarActualizacionContadores() {
      if (window.contadoresInterval) clearInterval(window.contadoresInterval);
      window.contadoresInterval = setInterval(() => {
        document.querySelectorAll('.open-chat-btn-interventor').forEach(btn => updateUnreadCountInterventor(btn.dataset.solicitudId));
      }, 5000);
    }

    // Añadir esta nueva función
    function updateMessageStatusInterventor(messageId, status) {
      const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
      if (!messageElement) return;
      
      const statusElement = messageElement.querySelector('.status');
      if (!statusElement) return;
      
      let statusIcon = '';
      switch (status) {
        case 'sent':
          statusIcon = '<span class="status-icon-sent text-gray-400">✓</span>';
          break;
        case 'delivered':
          statusIcon = '<span class="status-icon-delivered text-gray-400">✓✓</span>';
          break;
        case 'read':
          statusIcon = '<span class="status-icon-read text-blue-400">✓✓</span>';
          break;
        case 'error':
          statusIcon = '<span class="status-icon-error text-red-500">✗</span>';
          break;
      }
      
      statusElement.innerHTML = statusIcon;
    }
  </script>

  <script>
    // Agregar después de los otros scripts existentes
    document.addEventListener('DOMContentLoaded', function() {
      const filtrosContent = document.getElementById('filtrosCollapse');
      const toggleButton = document.getElementById('toggleFilters');
      const toggleText = document.getElementById('toggleText');
      let filtrosVisible = true;

      toggleButton.addEventListener('click', function() {
        filtrosVisible = !filtrosVisible;
        
        if (filtrosVisible) {
          filtrosContent.classList.remove('hidden');
          toggleText.textContent = 'Ocultar Filtros';
        } else {
          filtrosContent.classList.add('hidden');
          toggleText.textContent = 'Mostrar Filtros';
        }
      });
    });
  </script>
  <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
  <script src="/js/socket-manager.js"></script>
</body>
</html>