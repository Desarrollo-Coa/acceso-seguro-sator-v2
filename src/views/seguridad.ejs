<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Seguridad</title>
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#000000">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        video { display: flex; justify-content: center; }
        .ocultar { display: none; }
        #advertencia { color: #ff0000; }
        .colaborador-checkbox { height: 20px; width: 20px; }
        #mensajeEstado { color: #ff0000; font-style: italic; }
        #loadingOverlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.7);
            display: flex; flex-direction: column; justify-content: center; align-items: center; z-index: 9999; color: white;
        }
        #loadingOverlay.hidden { display: none; }
        #progressBar { width: 50%; height: 20px; background: #ddd; border-radius: 10px; overflow: hidden; }
        #progressFill { height: 100%; background: #28a745; width: 0; transition: width 0.3s ease; }
        #loadingMessage { margin-top: 10px; font-size: 1.2rem; }
        #pendingActionsTable { margin-top: 20px; }
        #pendingActionsTable th, #pendingActionsTable td { text-align: left; padding: 8px; }
        #pendingActionsTable th { background-color: #f8f9fa; }
        #pendingActionsTable tr:nth-child(even) { background-color: #f2f2f2; }
        .highlight-card { border: 2px solid #007bff; background-color: #e7f1ff; }
        .offline-banner {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background-color: #ffc107;
            color: #000;
            text-align: center;
            padding: 10px;
            z-index: 9999;
            display: none;
        }
        .offline-banner.show {
            display: block;
        }
    </style>
</head>
<body>
    <!-- Banner de estado offline -->
    <div id="offlineBanner" class="offline-banner">
        Estás trabajando en modo offline. Las acciones se guardarán localmente.
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="hidden">
        <h2>Cargando datos...</h2>
        <div id="progressBar">
            <div id="progressFill"></div>
        </div>
        <p id="loadingMessage">Iniciando carga...</p>
    </div>

    <!-- Barra de navegación -->
    <nav class="flex justify-between items-center bg-gray-800 text-white p-4">
        <a class="text-lg font-semibold" href="#">Vista Seguridad GA - <%= username %></a>
        <a class="text-lg" href="/logout">Cerrar sesión</a>
    </nav>

    <div class="container mt-5">
        <!-- Mensaje de error -->
        <% if (typeof error !== 'undefined' && error) { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>Error:</strong> <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>
        
        <!-- Botones para cargar y sincronizar -->
        <div class="mb-4 d-flex justify-content-start gap-3">
            <button class="btn btn-primary" onclick="cargarTodosLosRegistros()">Cargar Datos Online</button>
            <button class="btn btn-success" onclick="syncPendingActions()">Sincronizar Datos</button>
            <button class="btn btn-warning" onclick="limpiarCache()">Limpiar Caché</button>
        </div>

        <!-- Buscador -->
        <div class="mb-4 d-flex justify-content-between align-items-center gap-3">
            <div class="d-flex align-items-center gap-2 w-75 w-md-50">
                <input 
                    type="text" 
                    id="buscarId" 
                    class="form-control" 
                    placeholder="Buscar por ID de Colaborador o Vehículo (ej: 123 o VH-11)" 
                    title="Ingrese ID de colaborador o vehículo" 
                    required>
                <button class="btn btn-primary" onclick="buscar()">
                    <i class="bi bi-search me-1"></i> Buscar
                </button>
            </div>
        </div>

        <!-- Tabla de acciones pendientes -->
        <div id="pendingActionsTable" class="table-responsive">
            <h5>Acciones Pendientes</h5>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID Acción</th>
                        <th>Tipo</th>
                        <th>Solicitud ID</th>
                        <th>Detalles</th>
                        <th>Fecha</th>
                    </tr>
                </thead>
                <tbody id="pendingActionsBody"></tbody>
            </table>
        </div>
    </div>

    <!-- Modal de Confirmación para Entrada/Salida -->
    <div id="confirmacionModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden" style="z-index: 10000">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md mx-4">
            <div class="px-6 py-4 border-b flex justify-between items-center">
                <h5 class="modal-title">Confirmar Registro</h5>
                <button id="cerrarModal" class="text-gray-500 hover:text-gray-700">×</button>
            </div>
            <div class="p-6">
                <p id="confirmacionTexto" class="text-gray-700"></p>
                <ul id="listaColaboradoresConfirmacion" class="mt-2 text-gray-600 list-disc pl-5"></ul>
                <div class="mt-4">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="fechaRegistro" class="form-label">Fecha del Evento:</label>
                            <input type="date" id="fechaRegistro" class="form-control w-full" required>
                            <small class="text-muted">Seleccione la fecha en que ocurrió el evento</small>
                        </div>
                        <div class="col-md-6">
                            <label for="horaRegistro" class="form-label">Hora del Evento:</label>
                            <div class="d-flex gap-2">
                                <select id="horaSelect" class="form-select" required>
                                    <option value="">Hora</option>
                                </select>
                                <select id="minutoSelect" class="form-select" required>
                                    <option value="">Minuto</option>
                                </select>
                            </div>
                            <small class="text-muted">Seleccione la hora exacta en que ocurrió el evento</small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="px-6 py-4 border-t flex justify-end space-x-3">
                <button id="cancelarBtn" class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 rounded">Cancelar</button>
                <button id="confirmarRegistroBtn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded">Confirmar</button>
            </div>
        </div>
    </div>

    <!-- Modal para Ver Detalles -->
    <div class="modal fade" id="detallesModal" tabindex="-1" aria-labelledby="detallesModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detallesModalLabel">Detalles de la Solicitud</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12 col-md-6">
                            <p><strong>Id de la solicitud:</strong> <span id="detalleId"></span></p>
                            <p><strong>Empresa:</strong> <span id="detalleEmpresa"></span></p>
                            <p><strong>Lugar:</strong> <span id="detalleLugar"></span></p>
                        </div>
                        <div class="col-12 col-md-6">
                            <p><strong>Labor:</strong> <span id="detalleLabor"></span></p>
                            <p><strong>Inicio de Obra:</strong> <span id="detalleInicio"></span></p>
                            <p><strong>Fin de Obra:</strong> <span id="detalleFin"></span></p>
                            <p><strong>Estado:</strong> <span id="detalleEstado"></span></p>
                            <p><strong>Interventor:</strong> <span id="detalleInterventor"></span></p>
                            <p><span id="advertencia"></span></p>
                            <p><span id="mensajeEstado"></span></p>
                        </div>
                    </div>
                    <h5 class="mt-4">Colaboradores</h5>
                    <div id="detalleColaboradores" class="row row-cols-1 row-cols-md-3 row-cols-lg-4 g-3"></div>
                    <h5 class="mt-4">Vehículos</h5>
                    <div id="detalleVehiculos" class="row row-cols-1 row-cols-md-3 row-cols-lg-4 g-3"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-primary" id="registrarIngresoBtn">Registrar Ingreso</button>
                    <button type="button" class="btn btn-success" id="registrarEntradaBtn">Registrar Entrada</button>
                    <button type="button" class="btn btn-danger" id="registrarSalidaBtn">Registrar Salida</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Initialize IndexedDB
        let db;
        const dbRequest = indexedDB.open('SeguridadDB', 2); // Incrementar versión para nuevo esquema

        dbRequest.onupgradeneeded = function(event) {
            db = event.target.result;

            // Crear almacén para solicitudes
            if (!db.objectStoreNames.contains('solicitudes')) {
                const solicitudesStore = db.createObjectStore('solicitudes', { keyPath: 'id' });
                solicitudesStore.createIndex('lugar', 'lugar', { unique: false });
            }

            // Crear almacén para colaboradores
            if (!db.objectStoreNames.contains('colaboradores')) {
                const colaboradoresStore = db.createObjectStore('colaboradores', { keyPath: 'id' });
                colaboradoresStore.createIndex('solicitudId', 'solicitudId', { unique: false });
                colaboradoresStore.createIndex('cedula', 'cedula', { unique: true });
            }

            // Crear almacén para vehículos
            if (!db.objectStoreNames.contains('vehiculos')) {
                const vehiculosStore = db.createObjectStore('vehiculos', { keyPath: 'id' });
                vehiculosStore.createIndex('solicitudId', 'solicitudId', { unique: false });
                vehiculosStore.createIndex('matricula', 'matricula', { unique: true });
            }

            // Crear almacén para acciones pendientes
            if (!db.objectStoreNames.contains('pendingActions')) {
                db.createObjectStore('pendingActions', { keyPath: 'id' });
            }
        };

        dbRequest.onsuccess = function(event) {
            db = event.target.result;
            updatePendingActionsTable();
        };

        dbRequest.onerror = function(event) {
            console.error('Error opening IndexedDB:', event.target.error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'No se pudo inicializar la base de datos local.'
            });
        };

        // Function to add an action to IndexedDB
        async function addActionToDB(action) {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction(['pendingActions'], 'readwrite');
                const store = transaction.objectStore('pendingActions');
                const request = store.add({
                    id: Date.now().toString(),
                    type: action.type,
                    data: action.data,
                    timestamp: new Date().toISOString()
                });

                request.onsuccess = () => {
                    console.log('Action added to IndexedDB:', action);
                    updatePendingActionsTable();
                    resolve();
                };

                request.onerror = () => {
                    console.error('Error adding action to IndexedDB:', request.error);
                    reject(request.error);
                };
            });
        }

        // Function to get all pending actions from IndexedDB
        async function getPendingActions() {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction(['pendingActions'], 'readonly');
                const store = transaction.objectStore('pendingActions');
                const request = store.getAll();

                request.onsuccess = () => {
                    resolve(request.result);
                };

                request.onerror = () => {
                    console.error('Error retrieving actions from IndexedDB:', request.error);
                    reject(request.error);
                };
            });
        }

        // Function to delete an action from IndexedDB
        async function deleteActionFromDB(id) {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction(['pendingActions'], 'readwrite');
                const store = transaction.objectStore('pendingActions');
                const request = store.delete(id);

                request.onsuccess = () => {
                    console.log('Action deleted from IndexedDB:', id);
                    resolve();
                };

                request.onerror = () => {
                    console.error('Error deleting action from IndexedDB:', request.error);
                    reject(request.error);
                };
            });
        }

        // Function to update the pending actions table
        async function updatePendingActionsTable() {
            const tbody = document.getElementById('pendingActionsBody');
            tbody.innerHTML = '';
            const actions = await getPendingActions();

            if (actions.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5">No hay acciones pendientes.</td></tr>';
                return;
            }

            actions.forEach(action => {
                const row = document.createElement('tr');
                row.setAttribute('data-action-id', action.id);
                const typeText = {
                    'registrarEntrada': 'Registrar Entrada (Colaboradores)',
                    'registrarSalida': 'Registrar Salida (Colaboradores)',
                    'registrarEntradaVehiculo': 'Registrar Entrada (Vehículos)',
                    'registrarSalidaVehiculo': 'Registrar Salida (Vehículos)',
                    'registrarIngreso': 'Registrar Ingreso (Solicitud)'
                }[action.type] || action.type;

                const details = [];
                if (action.data.colaboradores) {
                    details.push(`Colaboradores: ${action.data.colaboradores.map(c => c.nombre).join(', ')}`);
                }
                if (action.data.vehiculos) {
                    details.push(`Vehículos: ${action.data.vehiculos.map(v => v.matricula).join(', ')}`);
                }
                if (action.type === 'registrarIngreso') {
                    details.push('Ingreso de solicitud completa');
                }

                row.innerHTML = `
                    <td>${action.id}</td>
                    <td>${typeText}</td>
                    <td>${action.data.solicitudId || 'N/A'}</td>
                    <td>${details.join('; ') || 'N/A'}</td>
                    <td>${new Date(action.timestamp).toLocaleString()}</td>
                `;
                tbody.appendChild(row);
            });
        }

        // Function to synchronize pending actions with the server
        async function syncPendingActions() {
            if (!navigator.onLine) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Sin Conexión',
                    text: 'No hay conexión a internet. Por favor, intenta de nuevo cuando estés en línea.'
                });
                return;
            }

            const actions = await getPendingActions();
            if (actions.length === 0) {
                Swal.fire({
                    icon: 'info',
                    title: 'Sin Acciones',
                    text: 'No hay acciones pendientes para sincronizar.'
                });
                return;
            }

            Swal.fire({
                title: 'Sincronizando...',
                text: 'Por favor, espera mientras se sincronizan las acciones.',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            let successCount = 0;
            let errorCount = 0;

            for (const action of actions) {
                try {
                    let url, method, body;
                    switch (action.type) {
                        case 'registrarEntrada':
                            url = `/api/solicitudes/${action.data.solicitudId}/registrar-entrada`;
                            method = 'POST';
                            body = JSON.stringify({
                                solicitudId: action.data.solicitudId,
                                colaboradores: action.data.colaboradores,
                                fecha: action.data.fecha,
                                estado_actual: action.data.estadoActual
                            });
                            break;
                        case 'registrarSalida':
                            url = `/api/solicitudes/${action.data.solicitudId}/registrar-salida`;
                            method = 'POST';
                            body = JSON.stringify({
                                solicitudId: action.data.solicitudId,
                                colaboradores: action.data.colaboradores,
                                fecha: action.data.fecha,
                                estado_actual: action.data.estadoActual
                            });
                            break;
                        case 'registrarEntradaVehiculo':
                            url = `/api/solicitudes/${action.data.solicitudId}/registrar-entrada-vehiculo`;
                            method = 'POST';
                            body = JSON.stringify({
                                solicitudId: action.data.solicitudId,
                                vehiculos: action.data.vehiculos,
                                fecha: action.data.fecha,
                                estado_actual: action.data.estadoActual
                            });
                            break;
                        case 'registrarSalidaVehiculo':
                            url = `/api/solicitudes/${action.data.solicitudId}/registrar-salida-vehiculo`;
                            method = 'POST';
                            body = JSON.stringify({
                                solicitudId: action.data.solicitudId,
                                vehiculos: action.data.vehiculos,
                                fecha: action.data.fecha,
                                estado_actual: action.data.estadoActual
                            });
                            break;
                        case 'registrarIngreso':
                            url = `/api/solicitudes/${action.data.solicitudId}/registrar-ingreso`;
                            method = 'PUT';
                            body = null;
                            break;
                        default:
                            console.warn('Tipo de acción desconocido:', action.type);
                            continue;
                    }

                    console.log('Enviando solicitud:', { url, method, body });

                    const response = await fetch(url, {
                        method,
                        headers: { 'Content-Type': 'application/json' },
                        body
                    });

                    if (response.ok) {
                        await deleteActionFromDB(action.id);
                        successCount++;
                        const row = document.querySelector(`tr[data-action-id="${action.id}"]`);
                        if (row) row.remove();
                        console.log(`Acción ${action.type} sincronizada exitosamente`);
                    } else {
                        const errorData = await response.json();
                        console.error(`Error al sincronizar ${action.type}:`, errorData);
                        errorCount++;
                    }
                } catch (error) {
                    console.error(`Error al sincronizar ${action.type}:`, error);
                    errorCount++;
                }
            }

            await updatePendingActionsTable();
            Swal.close();
            Swal.fire({
                icon: successCount > 0 ? 'success' : 'warning',
                title: 'Sincronización Completada',
                html: `Acciones sincronizadas exitosamente: ${successCount}<br>Acciones con errores: ${errorCount}`
            });
        }

        // Utility functions
        let modalData = null;
        const estadosVencidos = ['en labor - vencida', 'labor detenida', 'pendiente ingreso - vencido', 'en labor - vencida'];

        function getEstadoClass(estado) {
            if (!estado) return 'bg-secondary';
            if (estado.includes('pendiente ingreso')) return 'bg-warning';
            if (estado.includes('vencida')) return 'bg-danger';
            if (estado === 'en labor') return 'bg-info';
            if (estado === 'labor detenida') return 'bg-secondary';
            return 'bg-success';
        }

        function formatFecha(fecha) {
            if (!fecha || fecha === 'N/A' || fecha === 'null') return 'N/A';
            const match = fecha.match(/^(\d{2})\/(\d{2})\/(\d{4})$/);
            if (match) {
                const [, day, month, year] = match;
                const date = new Date(`${year}-${month}-${day}`);
                if (!isNaN(date.getTime())) {
                    return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;
                }
            }
            const date = new Date(fecha);
            if (isNaN(date.getTime())) return 'N/A';
            return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;
        }

        // Function to fill the modal
        async function llenarModal(data, selectedId, isVehicle = false) {
    modalData = data;
    document.getElementById('detalleId').textContent = data.id || 'N/A';
    document.getElementById('detalleEmpresa').textContent = data.empresa || 'N/A';
    document.getElementById('detalleLugar').textContent = data.nombre_lugar || 'N/A';
    document.getElementById('detalleLabor').textContent = data.labor || 'N/A';
    document.getElementById('detalleInterventor').textContent = data.interventor || 'N/A';
    document.getElementById('detalleInicio').textContent = formatFecha(data.inicio_obra);
    document.getElementById('detalleFin').textContent = formatFecha(data.fin_obra);
    document.getElementById('detalleEstado').textContent = data.estado_actual || 'Desconocido';
    document.getElementById('detalleEstado').className = 'badge ' + getEstadoClass(data.estado_actual);

    // Mostrar advertencias específicas
    let advertencia = '';
    if (data.advertencia) advertencia += data.advertencia + ' ';
    if (data.mensajeCursoSiso && !isVehicle) advertencia += data.mensajeCursoSiso + ' ';
    if (data.mensajePlantillaSS && !isVehicle) advertencia += data.mensajePlantillaSS + ' ';
    if (data.mensajeVehiculos && isVehicle) advertencia += data.mensajeVehiculos + ' ';
    document.getElementById('advertencia').textContent = advertencia.trim() || 'Sin advertencias';

    const colaboradoresContainer = document.getElementById('detalleColaboradores');
    const vehiculosContainer = document.getElementById('detalleVehiculos');
    const colaboradoresTitle = document.querySelector('h5.mt-4:first-of-type');
    const vehiculosTitle = document.querySelector('h5.mt-4:last-of-type');
    
    colaboradoresContainer.style.display = 'none';
    vehiculosContainer.style.display = 'none';
    colaboradoresTitle.style.display = 'none';
    vehiculosTitle.style.display = 'none';

    if (isVehicle) {
        // Mostrar solo el vehículo específico
        if (data.vehiculos && data.vehiculos.length > 0) {
            const vehiculo = data.vehiculos.find(v => v.id.toString() === selectedId.replace('VH-', ''));
            if (vehiculo) {
                vehiculosContainer.style.display = 'block';
                vehiculosTitle.style.display = 'block';
                vehiculosContainer.innerHTML = '';
                const vehDiv = document.createElement('div');
                vehDiv.classList.add('col-md-4', 'mb-3', 'highlight-card');
                vehDiv.innerHTML = `
                    <div class="card">
                        <img src="${vehiculo.foto || '/default.jpg'}" class="card-img-top" alt="Foto del vehículo ${vehiculo.matricula}">
                        <div class="card-body">
                            <h6 class="card-title">Vehículo: ${vehiculo.matricula}</h6>
                            <p class="card-text">ID Vehículo: VH-${vehiculo.id}</p>
                            <p class="card-text">SOAT: ${vehiculo.soat_inicio ? 'Vigente hasta ' + formatFecha(vehiculo.soat_fin) : 'No definido'}</p>
                            <p class="card-text">Tecnomecánica: ${vehiculo.tecnomecanica_inicio ? 'Vigente hasta ' + formatFecha(vehiculo.tecnomecanica_fin) : 'No definida'}</p>
                            <p class="card-text">Licencia Conducción: ${vehiculo.licencia_conduccion ? 'Aprobada' : 'No aprobada'}</p>
                            <p class="card-text">Licencia Tránsito: ${vehiculo.licencia_transito ? 'Aprobada' : 'No aprobada'}</p>
                            ${vehiculo.estado === 0 ? '<p class="card-text text-danger">Ingreso cancelado</p>' : '<input type="checkbox" class="vehiculo-checkbox" value="VH-' + vehiculo.id + '" checked>'}
                        </div>
                    </div>
                `;
                vehiculosContainer.appendChild(vehDiv);
            }
        }
    } else {
        // Mostrar solo el colaborador específico
        if (data.colaboradores && data.colaboradores.length > 0) {
            const colaborador = data.colaboradores.find(c => c.id.toString() === selectedId);
            if (colaborador) {
                colaboradoresContainer.style.display = 'block';
                colaboradoresTitle.style.display = 'block';
                colaboradoresContainer.innerHTML = '';
                const colDiv = document.createElement('div');
                colDiv.classList.add('col-md-4', 'mb-3', 'highlight-card');
                colDiv.innerHTML = `
                    <div class="card">
                        <img src="${colaborador.foto || '/default.jpg'}" class="card-img-top" alt="Foto del colaborador ${colaborador.nombre}">
                        <div class="card-body">
                            <h6 class="card-title">${colaborador.nombre}</h6>
                            <p class="card-text">Cédula: ${colaborador.cedula}</p>
                            <p class="card-text">Curso SISO: ${colaborador.cursoSiso || 'No definido'}</p>
                            <p class="card-text">Plantilla SS: ${colaborador.plantillaSS || 'No definida'}</p>
                            ${colaborador.estado === 0 ? '<p class="card-text text-danger">Ingreso cancelado</p>' : '<input type="checkbox" class="colaborador-checkbox" value="' + colaborador.id + '" checked>'}
                        </div>
                    </div>
                `;
                colaboradoresContainer.appendChild(colDiv);
            }
        }
    }

    configurarBotones(data, isVehicle);
    const modal = new bootstrap.Modal(document.getElementById('detallesModal'));
    modal.show();
}
        // Function to configure buttons
        function configurarBotones(data, isVehicle = false) {
    const registrarIngresoBtn = document.getElementById('registrarIngresoBtn');
    const registrarEntradaBtn = document.getElementById('registrarEntradaBtn');
    const registrarSalidaBtn = document.getElementById('registrarSalidaBtn');
    const mensajeEstado = document.getElementById('mensajeEstado');

    // Verificar si hay colaboradores inactivos
    const hayColaboradoresInactivos = data.colaboradores && data.colaboradores.some(col => col.estado === 0);
    
    // Verificar si hay vehículos inactivos (solo para vehículos)
    const hayVehiculosInactivos = isVehicle && data.vehiculos && data.vehiculos.some(veh => veh.estado === 0);
    
    // Verificar problemas con documentos basado en el estado real de los colaboradores
    const hayProblemasCursoSiso = !isVehicle && data.colaboradores && data.colaboradores.some(col => 
        col.cursoSiso === 'Vencido' || col.cursoSiso === 'Perdido' || col.cursoSiso === 'No'
    );
    
    const hayProblemasPlantillaSS = !isVehicle && data.colaboradores && data.colaboradores.some(col => 
        col.plantillaSS === 'Vencida' || col.plantillaSS === 'No definida'
    );
    
    // Verificar problemas con vehículos (solo para vehículos)
    const problemasVehiculos = [];
    if (isVehicle && data.vehiculos) {
        data.vehiculos.forEach(veh => {
            const hoy = new Date();
            const soatFin = new Date(veh.soat_fin);
            const tecnomecanicaFin = new Date(veh.tecnomecanica_fin);
            
            const formatDate = (date) => {
                if (!date || isNaN(date.getTime())) return 'N/A';
                return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;
            };
            
            if (soatFin < hoy) {
                problemasVehiculos.push(`SOAT del vehículo ${veh.matricula} vencido desde ${formatDate(soatFin)}`);
            }
            if (tecnomecanicaFin < hoy) {
                problemasVehiculos.push(`Tecnomecánica del vehículo ${veh.matricula} vencida desde ${formatDate(tecnomecanicaFin)}`);
            }
            if (!veh.licencia_conduccion) {
                problemasVehiculos.push(`Licencia de conducción del vehículo ${veh.matricula} no aprobada`);
            }
            if (!veh.licencia_transito) {
                problemasVehiculos.push(`Licencia de tránsito del vehículo ${veh.matricula} no aprobada`);
            }
        });
    }
    const hayProblemasVehiculos = problemasVehiculos.length > 0;
    
    // Verificar estado vencido
    const estadoVencido = data.estado_actual ? data.estado_actual.includes('vencido') : false;
    
    // Verificar advertencia de ubicación
    const hayAdvertenciaUbicacion = data.advertencia ? data.advertencia.includes('ADVERTENCIA: El lugar de la solicitud no coincide con tu ubicación') : false;

    // Determinar si hay alguna restricción que deshabilite los botones
    const hayRestricciones = hayColaboradoresInactivos || 
                            hayVehiculosInactivos || 
                            hayProblemasCursoSiso || 
                            hayProblemasPlantillaSS || 
                            hayProblemasVehiculos || 
                            estadoVencido || 
                            hayAdvertenciaUbicacion;

    // Construir mensaje de estado detallado
    let mensajeDetallado = '';
    if (hayRestricciones) {
        mensajeDetallado = 'No se pueden realizar acciones debido a:';
        if (hayColaboradoresInactivos) mensajeDetallado += '\n- Hay colaboradores inactivos';
        if (hayVehiculosInactivos) mensajeDetallado += '\n- Hay vehículos inactivos';
        if (hayProblemasCursoSiso) mensajeDetallado += '\n- Hay problemas con cursos SISO';
        if (hayProblemasPlantillaSS) mensajeDetallado += '\n- Hay problemas con plantillas SS';
        if (hayProblemasVehiculos) {
            mensajeDetallado += '\n- Problemas con vehículos:';
            problemasVehiculos.forEach(problema => {
                mensajeDetallado += `\n  * ${problema}`;
            });
        }
        if (estadoVencido) mensajeDetallado += '\n- El estado de la solicitud está vencido';
        if (hayAdvertenciaUbicacion) mensajeDetallado += '\n- El lugar de la solicitud no coincide con tu ubicación';
    } else {
        mensajeDetallado = 'Todos los requisitos están en orden. Puedes realizar las acciones.';
    }

    // Actualizar el mensaje de estado
    if (mensajeEstado) {
        mensajeEstado.textContent = mensajeDetallado;
        mensajeEstado.style.color = hayRestricciones ? '#dc3545' : '#28a745';
    }

    // Configurar botón de Registrar Ingreso
    if (registrarIngresoBtn) {
        const puedeRegistrarIngreso = data.estado_actual === 'pendiente ingreso' && !hayRestricciones;
        registrarIngresoBtn.disabled = !puedeRegistrarIngreso;
        registrarIngresoBtn.title = puedeRegistrarIngreso ? 
            'Registrar ingreso de colaboradores' : 
            mensajeDetallado;
    }

    // Configurar botones de Entrada y Salida
    if (registrarEntradaBtn && registrarSalidaBtn) {
        const puedeRegistrarEntradaSalida = data.estado_actual === 'en labor' && !hayRestricciones;
        
        registrarEntradaBtn.disabled = !puedeRegistrarEntradaSalida;
        registrarSalidaBtn.disabled = !puedeRegistrarEntradaSalida;
        
        registrarEntradaBtn.title = mensajeDetallado;
        registrarSalidaBtn.title = mensajeDetallado;

        // Mostrar mensaje de depuración en consola
        console.log('Estado actual:', data.estado_actual);
        console.log('Restricciones:', {
            hayColaboradoresInactivos,
            hayVehiculosInactivos,
            hayProblemasCursoSiso,
            hayProblemasPlantillaSS,
            hayProblemasVehiculos,
            estadoVencido,
            hayAdvertenciaUbicacion
        });
        console.log('Puede registrar entrada/salida:', puedeRegistrarEntradaSalida);
    }
}

        // Event listeners
        document.addEventListener('DOMContentLoaded', () => {
            const initialData = <%- JSON.stringify(typeof modalData !== 'undefined' ? modalData : null) %>;
            if (initialData) {
                llenarModal(initialData);
            }
            
            inicializarSelectoresHora();
            configurarModalConfirmacion();

            // Verificar si el Service Worker está registrado
            if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => {
                    navigator.serviceWorker.register('/js/sw.js')
                        .then(registration => {
                            console.log('Service Worker registrado con éxito:', registration.scope);
                            
                            // Verificar si hay una nueva versión del Service Worker
                            registration.addEventListener('updatefound', () => {
                                const newWorker = registration.installing;
                                newWorker.addEventListener('statechange', () => {
                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                                        // Hay una nueva versión disponible
                                        Swal.fire({
                                            title: 'Nueva versión disponible',
                                            text: 'Hay una nueva versión de la aplicación. ¿Deseas actualizar?',
                                            icon: 'info',
                                            showCancelButton: true,
                                            confirmButtonText: 'Actualizar',
                                            cancelButtonText: 'Más tarde'
                                        }).then((result) => {
                                            if (result.isConfirmed) {
                                                newWorker.postMessage({ type: 'SKIP_WAITING' });
                                                window.location.reload();
                                            }
                                        });
                                    }
                                });
                            });
                        })
                        .catch(error => {
                            console.error('Error al registrar el Service Worker:', error);
                        });
                });
            }

            // Manejar cambios en la conexión
            window.addEventListener('online', () => {
                console.log('Conexión restaurada.');
                Swal.fire({
                    icon: 'info',
                    title: 'Conexión Restaurada',
                    text: 'Puedes sincronizar las acciones pendientes ahora.'
                });
            });

            window.addEventListener('offline', () => {
                console.log('Sin conexión. Las acciones se guardarán localmente.');
                Swal.fire({
                    icon: 'info',
                    title: 'Sin Conexión',
                    text: 'Las acciones se guardarán localmente y se sincronizarán cuando haya conexión.'
                });
            });

            // Función para verificar el estado de la conexión
            function verificarConexion() {
                if (!navigator.onLine) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Sin Conexión',
                        text: 'Estás trabajando en modo offline. Las acciones se guardarán localmente.'
                    });
                }
            }

            // Verificar conexión al cargar la página
            verificarConexion();

            // Función para actualizar el banner de estado offline
            updateOfflineBanner();
        });

        function inicializarSelectoresHora() {
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            
            document.getElementById('fechaRegistro').value = `${year}-${month}-${day}`;
            
            const horaSelect = document.getElementById('horaSelect');
            const minutoSelect = document.getElementById('minutoSelect');
            
            horaSelect.innerHTML = '<option value="">Hora</option>';
            minutoSelect.innerHTML = '<option value="">Minuto</option>';
            
            for (let i = 0; i < 24; i++) {
                const option = document.createElement('option');
                option.value = String(i).padStart(2, '0');
                option.textContent = String(i).padStart(2, '0');
                if (i === parseInt(hours)) option.selected = true;
                horaSelect.appendChild(option);
            }
            
            for (let i = 0; i < 60; i++) {
                const option = document.createElement('option');
                option.value = String(i).padStart(2, '0');
                option.textContent = String(i).padStart(2, '0');
                if (i === parseInt(minutes)) option.selected = true;
                minutoSelect.appendChild(option);
            }
        }

        function configurarModalConfirmacion() {
            const modal = document.getElementById('confirmacionModal');
            const cerrarModal = document.getElementById('cerrarModal');
            const cancelarBtn = document.getElementById('cancelarBtn');
            const confirmarRegistroBtn = document.getElementById('confirmarRegistroBtn');
            
            document.getElementById('fechaRegistro').addEventListener('click', function() {
                this.focus();
            });
            
            document.getElementById('horaSelect').addEventListener('click', function() {
                this.focus();
            });
            
            document.getElementById('minutoSelect').addEventListener('click', function() {
                this.focus();
            });

            cerrarModal.addEventListener('click', () => {
                if (!procesoEnCurso) modal.classList.add('hidden');
            });
            
            cancelarBtn.addEventListener('click', () => {
                if (!procesoEnCurso) modal.classList.add('hidden');
            });

            window.mostrarConfirmacionModal = function(tipo) {
                if (procesoEnCurso) {
                    Swal.fire({ 
                        icon: 'warning', 
                        title: 'Proceso en curso', 
                        text: 'Hay un registro en proceso. Por favor, espere a que se complete.' 
                    });
                    return;
                }

                const now = new Date();
                const year = now.getFullYear();
                const month = String(now.getMonth() + 1).padStart(2, '0');
                const day = String(now.getDate()).padStart(2, '0');
                const hours = String(now.getHours()).padStart(2, '0');
                const minutes = String(now.getMinutes()).padStart(2, '0');
                
                document.getElementById('fechaRegistro').value = `${year}-${month}-${day}`;
                document.getElementById('horaSelect').value = hours;
                document.getElementById('minutoSelect').value = minutes;

                tipoRegistro = tipo;
                const checkboxes = document.querySelectorAll('.colaborador-checkbox:checked, .vehiculo-checkbox:checked');
                if (!checkboxes.length) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Selecciona elementos',
                        text: `Debes seleccionar al menos un colaborador o vehículo para registrar su ${tipo}.`
                    });
                    return;
                }

                if (modalData.mensajeCursoSiso || modalData.mensajePlantillaSS || modalData.mensajeVehiculos) {
                    let mensaje = '';
                    if (modalData.mensajeCursoSiso) mensaje += modalData.mensajeCursoSiso + ' ';
                    if (modalData.mensajePlantillaSS) mensaje += modalData.mensajePlantillaSS + ' ';
                    if (modalData.mensajeVehiculos) mensaje += modalData.mensajeVehiculos + ' ';
                    Swal.fire({
                        icon: 'warning',
                        title: 'Restricción de Registro',
                        text: mensaje.trim(),
                        confirmButtonText: 'Entendido'
                    });
                    return;
                }

                colaboradoresSeleccionados = Array.from(checkboxes).map(checkbox => {
                    const cardBody = checkbox.closest('.card-body');
                    const isVehiculo = checkbox.classList.contains('vehiculo-checkbox');
                    return {
                        id: checkbox.value.trim(),
                        nombre: isVehiculo ? `Vehículo ${cardBody.querySelector('.card-title').textContent.split(': ')[1]}` : cardBody.querySelector('.card-title').textContent.trim(),
                        cedula: isVehiculo ? checkbox.value.trim() : cardBody.querySelector('.card-text').textContent.replace('Cédula: ', '').trim()
                    };
                });

                document.getElementById('listaColaboradoresConfirmacion').innerHTML = colaboradoresSeleccionados
                    .map(col => `<li>${col.nombre} - ${col.id.startsWith('VH-') ? 'ID' : 'C.C'} ${col.cedula}</li>`)
                    .join('');
                document.getElementById('confirmacionTexto').textContent = `¿Estás seguro de registrar la ${tipo} de los siguientes elementos?`;
                
                const detallesModal = bootstrap.Modal.getInstance(document.getElementById('detallesModal'));
                if (detallesModal) detallesModal.hide();
                
                modal.classList.remove('hidden');
            };

            document.getElementById('registrarEntradaBtn').onclick = () => {
                if (!procesoEnCurso) mostrarConfirmacionModal('entrada');
            };
            
            document.getElementById('registrarSalidaBtn').onclick = () => {
                if (!procesoEnCurso) mostrarConfirmacionModal('salida');
            };

            confirmarRegistroBtn.addEventListener('click', async () => {
                if (procesoEnCurso) return;

                procesoEnCurso = true;
                confirmarRegistroBtn.disabled = true;
                cancelarBtn.disabled = true;
                cerrarModal.disabled = true;

                const fechaRegistro = document.getElementById('fechaRegistro').value;
                const horaRegistro = document.getElementById('horaSelect').value;
                const minutoRegistro = document.getElementById('minutoSelect').value;
                const fechaHoraCompleta = `${fechaRegistro}T${horaRegistro}:${minutoRegistro}`;
                const solicitudId = document.getElementById('detalleId').textContent;
                const detalleEstado = document.getElementById('detalleEstado').textContent;

                if (!colaboradoresSeleccionados.length) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Elementos no seleccionados',
                        text: 'Debes seleccionar al menos un elemento.'
                    });
                    procesoEnCurso = false;
                    confirmarRegistroBtn.disabled = false;
                    cancelarBtn.disabled = false;
                    cerrarModal.disabled = false;
                    return;
                }
                if (!fechaRegistro || !horaRegistro || !minutoRegistro) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Fecha y hora requeridas',
                        text: 'Por favor, ingresa la fecha y hora del evento.'
                    });
                    procesoEnCurso = false;
                    confirmarRegistroBtn.disabled = false;
                    cancelarBtn.disabled = false;
                    cerrarModal.disabled = false;
                    return;
                }

                const colaboradores = colaboradoresSeleccionados.filter(item => !item.id.startsWith('VH-'));
                const vehiculos = colaboradoresSeleccionados.filter(item => item.id.startsWith('VH-'));

                if (navigator.onLine) {
                    try {
                        let response;
                        if (tipoRegistro === 'entrada') {
                            if (colaboradores.length > 0) {
                                response = await fetch(`/api/solicitudes/${solicitudId}/registrar-entrada`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ 
                                        estado_actual: detalleEstado, 
                                        solicitudId, 
                                        colaboradores, 
                                        fecha: fechaHoraCompleta,
                                        fecha_registro: new Date().toISOString()
                                    })
                                });
                            }
                            if (vehiculos.length > 0) {
                                response = await fetch(`/api/solicitudes/${solicitudId}/registrar-entrada-vehiculo`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ 
                                        estado_actual: detalleEstado, 
                                        solicitudId, 
                                        vehiculos, 
                                        fecha: fechaHoraCompleta,
                                        fecha_registro: new Date().toISOString()
                                    })
                                });
                            }
                        } else if (tipoRegistro === 'salida') {
                            if (colaboradores.length > 0) {
                                response = await fetch(`/api/solicitudes/${solicitudId}/registrar-salida`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ 
                                        estado_actual: detalleEstado, 
                                        solicitudId, 
                                        colaboradores, 
                                        fecha: fechaHoraCompleta,
                                        fecha_registro: new Date().toISOString()
                                    })
                                });
                            }
                            if (vehiculos.length > 0) {
                                response = await fetch(`/api/solicitudes/${solicitudId}/registrar-salida-vehiculo`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ 
                                        estado_actual: detalleEstado, 
                                        solicitudId, 
                                        vehiculos, 
                                        fecha: fechaHoraCompleta,
                                        fecha_registro: new Date().toISOString()
                                    })
                                });
                            }
                        }

                        const result = await response.json();
                        if (response.ok) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Registro exitoso',
                                text: result.message
                            });
                            document.querySelectorAll('.colaborador-checkbox:checked').forEach(checkbox => checkbox.checked = false);
                            document.querySelectorAll('.vehiculo-checkbox:checked').forEach(checkbox => checkbox.checked = false);
                            modal.classList.add('hidden');
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: result.message
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Hubo un problema al registrar la operación.'
                        });
                        console.error('Error al registrar:', error);
                    } finally {
                        procesoEnCurso = false;
                        confirmarRegistroBtn.disabled = false;
                        cancelarBtn.disabled = false;
                        cerrarModal.disabled = false;
                    }
                } else {
                    try {
                        if (tipoRegistro === 'entrada') {
                            if (colaboradores.length > 0) {
                                await addActionToDB({
                                    type: 'registrarEntrada',
                                    data: {
                                        solicitudId,
                                        colaboradores,
                                        fecha: fechaHoraCompleta,
                                        estadoActual: detalleEstado
                                    }
                                });
                            }
                            if (vehiculos.length > 0) {
                                await addActionToDB({
                                    type: 'registrarEntradaVehiculo',
                                    data: {
                                        solicitudId,
                                        vehiculos,
                                        fecha: fechaHoraCompleta,
                                        estadoActual: detalleEstado
                                    }
                                });
                            }
                        } else if (tipoRegistro === 'salida') {
                            if (colaboradores.length > 0) {
                                await addActionToDB({
                                    type: 'registrarSalida',
                                    data: {
                                        solicitudId,
                                        colaboradores,
                                        fecha: fechaHoraCompleta,
                                        estadoActual: detalleEstado
                                    }
                                });
                            }
                            if (vehiculos.length > 0) {
                                await addActionToDB({
                                    type: 'registrarSalidaVehiculo',
                                    data: {
                                        solicitudId,
                                        vehiculos,
                                        fecha: fechaHoraCompleta,
                                        estadoActual: detalleEstado
                                    }
                                });
                            }
                        }
                        Swal.fire({
                            icon: 'info',
                            title: 'Sin Conexión',
                            text: 'La acción se ha guardado localmente y se sincronizará cuando haya conexión.'
                        });
                        document.querySelectorAll('.colaborador-checkbox:checked').forEach(checkbox => checkbox.checked = false);
                        document.querySelectorAll('.vehiculo-checkbox:checked').forEach(checkbox => checkbox.checked = false);
                        modal.classList.add('hidden');
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Hubo un problema al guardar la acción localmente.'
                        });
                        console.error('Error al guardar en IndexedDB:', error);
                    } finally {
                        procesoEnCurso = false;
                        confirmarRegistroBtn.disabled = false;
                        cancelarBtn.disabled = false;
                        cerrarModal.disabled = false;
                    }
                }
            });
        }

        // Function to load all records

        async function cargarTodosLosRegistros() {
    const loadingOverlay = document.getElementById('loadingOverlay');
    const progressFill = document.getElementById('progressFill');
    const loadingMessage = document.getElementById('loadingMessage');

    loadingOverlay.classList.remove('hidden');
    loadingMessage.textContent = 'Obteniendo solicitudes...';
    progressFill.style.width = '0%';

    try {
        const response = await fetch('/api/solicitudes/obtenerSolicitudesActivasConColaboradoresYVehiculos');
        if (!response.ok) {
            throw new Error(`Error al cargar los registros: ${response.statusText}`);
        }

        const solicitudes = await response.json();
        let totalItems = solicitudes.length;
        solicitudes.forEach(solicitud => {
            totalItems += (solicitud.colaboradores ? solicitud.colaboradores.length : 0);
            totalItems += (solicitud.vehiculos ? solicitud.vehiculos.length : 0);
        });
        let processedItems = 0;

        function updateProgress() {
            processedItems++;
            const progress = (processedItems / totalItems) * 100;
            progressFill.style.width = `${progress}%`;
            loadingMessage.textContent = `Procesando ${processedItems} de ${totalItems} elementos...`;
        }

        const transaction = db.transaction(['solicitudes', 'colaboradores', 'vehiculos'], 'readwrite');
        const solicitudesStore = transaction.objectStore('solicitudes');
        const colaboradoresStore = transaction.objectStore('colaboradores');
        const vehiculosStore = transaction.objectStore('vehiculos');

        for (const solicitud of solicitudes) {
            const solicitudData = {
                id: solicitud.id,
                empresa: solicitud.empresa,
                nit: solicitud.nit,
                estado: solicitud.estado,
                interventor: solicitud.interventor,
                lugar: solicitud.lugar,
                nombre_lugar: solicitud.nombre_lugar,
                inicio_obra: solicitud.inicio_obra,
                fin_obra: solicitud.fin_obra,
                labor: solicitud.labor,
                estado_actual: solicitud.estado_actual,
                advertencia: solicitud.advertencia,
                mensajeCursoSiso: solicitud.mensajeCursoSiso,
                mensajePlantillaSS: solicitud.mensajePlantillaSS,
                mensajeVehiculos: solicitud.mensajeVehiculos,
                timestamp: new Date().toISOString()
            };
            await solicitudesStore.put(solicitudData);
            updateProgress();

            if (solicitud.colaboradores && solicitud.colaboradores.length > 0) {
                for (const colaborador of solicitud.colaboradores) {
                    const colaboradorData = {
                        id: colaborador.id,
                        nombre: colaborador.nombre,
                        cedula: colaborador.cedula,
                        foto: colaborador.foto,
                        cedulaFoto: colaborador.cedulaFoto,
                        estado: colaborador.estado,
                        cursoSiso: colaborador.cursoSiso,
                        curso_siso_estado: colaborador.curso_siso_estado,
                        curso_siso_vencimiento: colaborador.curso_siso_vencimiento,
                        plantillaSS: colaborador.plantillaSS,
                        plantilla_ss_inicio: colaborador.plantilla_ss_inicio,
                        plantilla_ss_fin: colaborador.plantilla_ss_fin,
                        mensajeCursoSiso: colaborador.mensajeCursoSiso,
                        mensajePlantillaSS: colaborador.mensajePlantillaSS,
                        solicitudId: solicitud.id,
                        timestamp: new Date().toISOString()
                    };
                    await colaboradoresStore.put(colaboradorData);
                    updateProgress();
                }
            }

            if (solicitud.vehiculos && solicitud.vehiculos.length > 0) {
                for (const vehiculo of solicitud.vehiculos) {
                    const vehiculoData = {
                        id: vehiculo.id,
                        matricula: vehiculo.matricula,
                        foto: vehiculo.foto,
                        estado: vehiculo.estado,
                        soat_inicio: vehiculo.soat_inicio,
                        soat_fin: vehiculo.soat_fin,
                        tecnomecanica_inicio: vehiculo.tecnomecanica_inicio,
                        tecnomecanica_fin: vehiculo.tecnomecanica_fin,
                        licencia_conduccion: vehiculo.licencia_conduccion,
                        licencia_transito: vehiculo.licencia_transito,
                        estado_soat: vehiculo.estado_soat,
                        estado_tecnomecanica: vehiculo.estado_tecnomecanica,
                        mensajesAdvertencia: vehiculo.mensajesAdvertencia,
                        solicitudId: solicitud.id,
                        timestamp: new Date().toISOString()
                    };
                    await vehiculosStore.put(vehiculoData);
                    updateProgress();
                }
            }
        }

        loadingMessage.textContent = 'Carga completa!';
        progressFill.style.width = '100%';
        setTimeout(() => {
            loadingOverlay.classList.add('hidden');
        }, 500);
    } catch (error) {
        console.error('Error al cargar registros:', error);
        loadingMessage.textContent = 'Error al cargar datos. Usando caché.';
        setTimeout(() => {
            loadingOverlay.classList.add('hidden');
        }, 1000);
    }
}


        // Function to view details
        async function verDetalles(id) {
    try {
        console.log('Iniciando verDetalles con ID:', id);
        const cleanId = id.trim().toUpperCase();
        const isVehicle = cleanId.startsWith('VH-');
        const searchId = isVehicle ? cleanId.replace('VH-', '') : cleanId;
        const url = `/api/solicitudes/seguridad/${cleanId}`;

        if (navigator.onLine) {
            const response = await fetch(url).catch(error => {
                console.error('Error de red:', error);
                throw new Error('No se pudo conectar al servidor. Usando datos en caché.');
            });

            if (!response.ok) {
                const errorData = await response.json();
                Swal.fire({ 
                    icon: 'error', 
                    title: 'No encontrado', 
                    text: errorData.message || 'No se ha encontrado registro de este colaborador o vehículo.' 
                });
                return;
            }

            const data = await response.json();
            if (!data) {
                Swal.fire({ 
                    icon: 'error', 
                    title: 'Error', 
                    text: 'No se recibieron datos válidos del servidor.' 
                });
                return;
            }

            // Guardar en IndexedDB
            const transaction = db.transaction(['solicitudes', 'colaboradores', 'vehiculos'], 'readwrite');
            const solicitudesStore = transaction.objectStore('solicitudes');
            const colaboradoresStore = transaction.objectStore('colaboradores');
            const vehiculosStore = transaction.objectStore('vehiculos');

            const solicitudData = {
                id: data.id,
                empresa: data.empresa,
                nit: data.nit,
                estado: data.estado,
                interventor: data.interventor,
                lugar: data.lugar,
                nombre_lugar: data.nombre_lugar,
                inicio_obra: data.inicio_obra,
                fin_obra: data.fin_obra,
                labor: data.labor,
                estado_actual: data.estado_actual,
                advertencia: data.advertencia,
                mensajeCursoSiso: data.mensajeCursoSiso,
                mensajePlantillaSS: data.mensajePlantillaSS,
                mensajeVehiculos: data.mensajeVehiculos,
                timestamp: new Date().toISOString()
            };
            await solicitudesStore.put(solicitudData);

            if (data.colaboradores) {
                for (const colaborador of data.colaboradores) {
                    await colaboradoresStore.put({
                        id: colaborador.id,
                        nombre: colaborador.nombre,
                        cedula: colaborador.cedula,
                        foto: colaborador.foto,
                        cedulaFoto: colaborador.cedulaFoto,
                        estado: colaborador.estado,
                        cursoSiso: colaborador.cursoSiso,
                        curso_siso_estado: colaborador.curso_siso_estado,
                        curso_siso_vencimiento: colaborador.curso_siso_vencimiento,
                        plantillaSS: colaborador.plantillaSS,
                        plantilla_ss_inicio: colaborador.plantilla_ss_inicio,
                        plantilla_ss_fin: colaborador.plantilla_ss_fin,
                        mensajeCursoSiso: colaborador.mensajeCursoSiso,
                        mensajePlantillaSS: colaborador.mensajePlantillaSS,
                        solicitudId: data.id,
                        timestamp: new Date().toISOString()
                    });
                }
            }

            if (data.vehiculos) {
                for (const vehiculo of data.vehiculos) {
                    await vehiculosStore.put({
                        id: vehiculo.id,
                        matricula: vehiculo.matricula,
                        foto: vehiculo.foto,
                        estado: vehiculo.estado,
                        soat_inicio: vehiculo.soat_inicio,
                        soat_fin: vehiculo.soat_fin,
                        tecnomecanica_inicio: vehiculo.tecnomecanica_inicio,
                        tecnomecanica_fin: vehiculo.tecnomecanica_fin,
                        licencia_conduccion: vehiculo.licencia_conduccion,
                        licencia_transito: vehiculo.licencia_transito,
                        estado_soat: vehiculo.estado_soat,
                        estado_tecnomecanica: vehiculo.estado_tecnomecanica,
                        mensajesAdvertencia: vehiculo.mensajesAdvertencia,
                        solicitudId: data.id,
                        timestamp: new Date().toISOString()
                    });
                }
            }

            // Filtrar datos para el modal
            const detalles = {
                ...data,
                colaboradores: isVehicle ? [] : data.colaboradores.filter(c => c.id.toString() === searchId),
                vehiculos: isVehicle ? data.vehiculos.filter(v => v.id.toString() === searchId) : [],
                mensajeVehiculos: isVehicle ? data.mensajeVehiculos : null // Excluir mensajeVehiculos para colaboradores
            };

            llenarModal(detalles, cleanId, isVehicle);
        } else {
            console.log('Sin conexión, buscando en caché');
            const transaction = db.transaction(['solicitudes', 'colaboradores', 'vehiculos'], 'readonly');
            const colaboradoresStore = transaction.objectStore('colaboradores');
            const vehiculosStore = transaction.objectStore('vehiculos');
            const solicitudesStore = transaction.objectStore('solicitudes');

            let item, solicitudId;
            if (isVehicle) {
                const vehiculoRequest = vehiculosStore.get(Number(searchId));
                item = await new Promise(resolve => {
                    vehiculoRequest.onsuccess = () => resolve(vehiculoRequest.result);
                    vehiculoRequest.onerror = () => resolve(null);
                });
            } else {
                const colaboradorRequest = colaboradoresStore.get(Number(searchId));
                item = await new Promise(resolve => {
                    colaboradorRequest.onsuccess = () => resolve(colaboradorRequest.result);
                    colaboradorRequest.onerror = () => resolve(null);
                });
            }

            if (!item) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Sin Conexión',
                    text: 'No se encontraron datos en caché para este colaborador o vehículo.'
                });
                return;
            }

            solicitudId = item.solicitudId;
            const solicitudRequest = solicitudesStore.get(solicitudId);
            const solicitud = await new Promise(resolve => {
                solicitudRequest.onsuccess = () => resolve(solicitudRequest.result);
                solicitudRequest.onerror = () => resolve(null);
            });

            if (!solicitud) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Sin Conexión',
                    text: 'No se encontraron detalles de la solicitud en caché.'
                });
                return;
            }

            // Obtener todos los colaboradores de la solicitud
            const colaboradoresIndex = colaboradoresStore.index('solicitudId');
            const colaboradoresRequest = colaboradoresIndex.getAll(solicitudId);
            const colaboradores = await new Promise(resolve => {
                colaboradoresRequest.onsuccess = () => resolve(colaboradoresRequest.result);
                colaboradoresRequest.onerror = () => resolve([]);
            });

            // Obtener todos los vehículos de la solicitud
            const vehiculosIndex = vehiculosStore.index('solicitudId');
            const vehiculosRequest = vehiculosIndex.getAll(solicitudId);
            const vehiculos = await new Promise(resolve => {
                vehiculosRequest.onsuccess = () => resolve(vehiculosRequest.result);
                vehiculosRequest.onerror = () => resolve([]);
            });

            // Construir objeto completo para el modal
            const detalles = {
                ...solicitud,
                colaboradores: isVehicle ? [] : colaboradores.filter(c => c.id.toString() === searchId),
                vehiculos: isVehicle ? vehiculos.filter(v => v.id.toString() === searchId) : [],
                mensajeVehiculos: isVehicle ? solicitud.mensajeVehiculos : null // Excluir mensajeVehiculos para colaboradores
            };

            llenarModal(detalles, cleanId, isVehicle);
        }
    } catch (error) {
        console.error('Error al obtener detalles:', error);
        Swal.fire({ 
            icon: 'error', 
            title: 'Error', 
            text: error.message || 'Ocurrió un error al obtener los detalles. Por favor, intenta nuevamente.' 
        });
    }
}

        function buscar() {
            const id = document.getElementById('buscarId').value.trim();
            if (!id) {
                Swal.fire({ 
                    icon: 'warning', 
                    title: 'ID requerido', 
                    text: 'Por favor, ingresa un ID válido.' 
                });
                return;
            }
            verDetalles(id);
        }

        let tipoRegistro = '';
        let colaboradoresSeleccionados = [];
        let procesoEnCurso = false;

        async function registrarIngreso() {
            try {
                const response = await fetch(`/seguridad/registrar-ingreso/${modalData.id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Error al registrar el ingreso');
                }

                const data = await response.json();
                
                if (data.success) {
                    // Actualizar el estado en el modal
                    modalData.estado_actual = 'en labor';
                    
                    // Actualizar los botones
                    configurarBotones(modalData);
                    
                    // Mostrar mensaje de éxito
                    Swal.fire({
                        icon: 'success',
                        title: 'Éxito',
                        text: 'Ingreso registrado correctamente',
                        timer: 1500
                    });
                } else {
                    throw new Error(data.message || 'Error al registrar el ingreso');
                }
            } catch (error) {
                console.error('Error al registrar ingreso:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Error al registrar el ingreso'
                });
            }
        }

        // Función para actualizar el banner de estado offline
        function updateOfflineBanner() {
            const banner = document.getElementById('offlineBanner');
            if (!navigator.onLine) {
                banner.classList.add('show');
            } else {
                banner.classList.remove('show');
            }
        }

        // Función para limpiar la caché
        async function limpiarCache() {
            try {
                // Limpiar IndexedDB
                const dbNames = ['SeguridadDB'];
                for (const dbName of dbNames) {
                    await new Promise((resolve, reject) => {
                        const request = indexedDB.deleteDatabase(dbName);
                        request.onsuccess = () => resolve();
                        request.onerror = () => reject(request.error);
                    });
                }

                // Limpiar caché del Service Worker
                if ('caches' in window) {
                    const cacheNames = await caches.keys();
                    await Promise.all(
                        cacheNames.map(cacheName => caches.delete(cacheName))
                    );
                }

                // Desregistrar Service Worker
                if ('serviceWorker' in navigator) {
                    const registrations = await navigator.serviceWorker.getRegistrations();
                    for (const registration of registrations) {
                        await registration.unregister();
                    }
                }

                Swal.fire({
                    icon: 'success',
                    title: 'Caché Limpiada',
                    text: 'La caché ha sido limpiada exitosamente. La página se recargará.',
                    timer: 2000,
                    showConfirmButton: false
                }).then(() => {
                    window.location.reload(true);
                });
            } catch (error) {
                console.error('Error al limpiar la caché:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Hubo un problema al limpiar la caché.'
                });
            }
        }
    </script>
</body>
</html>