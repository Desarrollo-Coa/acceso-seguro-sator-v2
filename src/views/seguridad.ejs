<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Seguridad</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        video { display: flex; justify-content: center; }
        .ocultar { display: none; }
        #advertencia { color: #ff0000; }
        .colaborador-checkbox { height: 20px; width: 20px; }
        #mensajeEstado {
            color: #ff0000;
            font-style: italic;
        }
        /* Loading Overlay Styles */
        #loadingOverlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            color: white;
        }
        #loadingOverlay.hidden {
            display: none;
        }
        #progressBar {
            width: 50%;
            height: 20px;
            background: #ddd;
            border-radius: 10px;
            overflow: hidden;
        }
        #progressFill {
            height: 100%;
            background: #28a745;
            width: 0;
            transition: width 0.3s ease;
        }
        #loadingMessage {
            margin-top: 10px;
            font-size: 1.2rem;
        }
    </style>
</head>
<body>
    <!-- Loading Overlay -->
    <div id="loadingOverlay">
        <h2>Cargando datos...</h2>
        <div id="progressBar">
            <div id="progressFill"></div>
        </div>
        <p id="loadingMessage">Iniciando carga...</p>
    </div>

    <!-- Barra de navegación -->
    <nav class="flex justify-between items-center bg-gray-800 text-white p-4">
        <a class="text-lg font-semibold" href="#">Vista Seguridad GA - <%= username %></a>
        <a class="text-lg" href="/logout">Cerrar sesión</a>
    </nav>

    <div class="container mt-5">
        <!-- Mensaje de error -->
        <% if (typeof error !== 'undefined' && error) { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>Error:</strong> <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>
        
        <!-- Buscador -->
        <div class="mb-4 d-flex justify-content-between align-items-center gap-3">
            <div class="d-flex align-items-center gap-2 w-75 w-md-50">
                <input 
                    type="text" 
                    id="buscarId" 
                    class="form-control" 
                    placeholder="Buscar por ID de Colaborador o Vehículo (ej: 123 o VH-11)" 
                    title="Ingrese ID de colaborador o vehículo" 
                    required>
                <button class="btn btn-primary" onclick="buscar()">
                    <i class="bi bi-search me-1"></i> Buscar
                </button>
            </div>
        </div>
    </div>

    <!-- Modal de Confirmación para Entrada/Salida -->
    <div id="confirmacionModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden" style="z-index: 10000">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md mx-4">
            <div class="px-6 py-4 border-b flex justify-between items-center">
                <h5 class="modal-title">Confirmar Registro</h5>
                <button id="cerrarModal" class="text-gray-500 hover:text-gray-700">×</button>
            </div>
            <div class="p-6">
                <p id="confirmacionTexto" class="text-gray-700"></p>
                <ul id="listaColaboradoresConfirmacion" class="mt-2 text-gray-600 list-disc pl-5"></ul>
                <div class="mt-4">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="fechaRegistro" class="form-label">Fecha del Evento:</label>
                            <input type="date" id="fechaRegistro" class="form-control w-full" required>
                            <small class="text-muted">Seleccione la fecha en que ocurrió el evento</small>
                        </div>
                        <div class="col-md-6">
                            <label for="horaRegistro" class="form-label">Hora del Evento:</label>
                            <div class="d-flex gap-2">
                                <select id="horaSelect" class="form-select" required>
                                    <option value="">Hora</option>
                                    <!-- Las opciones se generarán con JavaScript -->
                                </select>
                                <select id="minutoSelect" class="form-select" required>
                                    <option value="">Minuto</option>
                                    <!-- Las opciones se generarán con JavaScript -->
                                </select>
                            </div>
                            <small class="text-muted">Seleccione la hora exacta en que ocurrió el evento</small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="px-6 py-4 border-t flex justify-end space-x-3">
                <button id="cancelarBtn" class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 rounded">Cancelar</button>
                <button id="confirmarRegistroBtn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded">Confirmar</button>
            </div>
        </div>
    </div>

    <!-- Modal para Ver Detalles -->
    <div class="modal fade" id="detallesModal" tabindex="-1" aria-labelledby="detallesModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detallesModalLabel">Detalles de la Solicitud</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12 col-md-6">
                            <p><strong>Id de la solicitud:</strong> <span id="detalleId"></span></p>
                            <p><strong>Empresa:</strong> <span id="detalleEmpresa"></span></p>
                            <p><strong>Lugar:</strong> <span id="detalleLugar"></span></p>
                        </div>
                        <div class="col-12 col-md-6">
                            <p><strong>Labor:</strong> <span id="detalleLabor"></span></p>
                            <p><strong>Inicio de Obra:</strong> <span id="detalleInicio"></span></p>
                            <p><strong>Fin de Obra:</strong> <span id="detalleFin"></span></p>
                            <p><strong>Estado:</strong> <span id="detalleEstado"></span></p>
                            <p><strong>Interventor:</strong> <span id="detalleInterventor"></span></p>
                            <p><span id="advertencia"></span></p>
                            <p><span id="mensajeEstado"></span></p>
                        </div>
                    </div>
                    <h5 class="mt-4">Colaboradores</h5>
                    <div id="detalleColaboradores" class="row row-cols-1 row-cols-md-3 row-cols-lg-4 g-3"></div>
                    
                    <h5 class="mt-4">Vehículos</h5>
                    <div id="detalleVehiculos" class="row row-cols-1 row-cols-md-3 row-cols-lg-4 g-3"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-primary" id="registrarIngresoBtn">Registrar Ingreso</button>
                    <button type="button" class="btn btn-success" id="registrarEntradaBtn">Registrar Entrada</button>
                    <button type="button" class="btn btn-danger" id="registrarSalidaBtn">Registrar Salida</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Initialize IndexedDB
        let db;
        const dbRequest = indexedDB.open('SeguridadDB', 1);
        dbRequest.onsuccess = function(event) {
            const db = event.target.result;
            const transaction = db.transaction(['pendingActions'], 'readonly');
            const store = transaction.objectStore('pendingActions');
            const request = store.getAll();
            
            request.onsuccess = function() {
                console.log('Contenido de IndexedDB:', {
                    totalRegistros: request.result.length,
                    tiposDeRegistros: request.result.map(item => item.type),
                    detalles: request.result.filter(item => item.type === 'cachedDetails'),
                    colaboradores: request.result
                        .filter(item => item.type === 'cachedColaborador')
                        .map(item => ({
                            id: item.data.id,
                            nombre: item.data.nombre,
                            solicitudId: item.data.solicitudId
                        }))
                });
            };
        };
        dbRequest.onupgradeneeded = function(event) {
            db = event.target.result;
            if (!db.objectStoreNames.contains('pendingActions')) {
                db.createObjectStore('pendingActions', { keyPath: 'id' });
            }
        };

        dbRequest.onsuccess = function(event) {
            db = event.target.result;
            // Attempt to sync any pending actions on page load if online
            if (navigator.onLine) {
                syncPendingActions();
            }
        };

        dbRequest.onerror = function(event) {
            console.error('Error opening IndexedDB:', event.target.error);
        };

        // Function to add an action to IndexedDB
        async function addActionToDB(action) {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction(['pendingActions'], 'readwrite');
                const store = transaction.objectStore('pendingActions');
                const request = store.add({
                    id: Date.now().toString(),
                    type: action.type,
                    data: action.data,
                    timestamp: new Date().toISOString()
                });

                request.onsuccess = () => {
                    console.log('Action added to IndexedDB:', action);
                    resolve();
                };

                request.onerror = () => {
                    console.error('Error adding action to IndexedDB:', request.error);
                    reject(request.error);
                };
            });
        }

        // Function to get all pending actions from IndexedDB
        async function getPendingActions() {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction(['pendingActions'], 'readonly');
                const store = transaction.objectStore('pendingActions');
                const request = store.getAll();

                request.onsuccess = () => {
                    resolve(request.result);
                };

                request.onerror = () => {
                    console.error('Error retrieving actions from IndexedDB:', request.error);
                    reject(request.error);
                };
            });
        }

        // Function to delete an action from IndexedDB
        async function deleteActionFromDB(id) {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction(['pendingActions'], 'readwrite');
                const store = transaction.objectStore('pendingActions');
                const request = store.delete(id);

                request.onsuccess = () => {
                    console.log('Action deleted from IndexedDB:', id);
                    resolve();
                };

                request.onerror = () => {
                    console.error('Error deleting action from IndexedDB:', request.error);
                    reject(request.error);
                };
            });
        }

        // Function to synchronize pending actions with the server
        async function syncPendingActions() {
            const actions = await getPendingActions();
            if (actions.length === 0) return;

            for (const action of actions) {
                try {
                    // Ignorar acciones de tipo cachedDetails
                    if (action.type === 'cachedDetails') {
                        continue;
                    }

                    let url, method, body;
                    switch (action.type) {
                        case 'registrarEntrada':
                            console.log('Body registrarEntrada:', {
                                solicitudId: action.data.solicitudId,
                                colaboradores: action.data.colaboradores,
                                fecha: action.data.fecha,
                                estado_actual: action.data.estadoActual
                            });
                            url = `/api/solicitudes/${action.data.solicitudId}/registrar-entrada`;
                            method = 'POST';
                            body = JSON.stringify({
                                solicitudId: action.data.solicitudId,
                                colaboradores: action.data.colaboradores.map(col => ({
                                    id: col.id,
                                    nombre: col.nombre,
                                    cedula: col.cedula
                                })),
                                fecha: action.data.fecha,
                                estado_actual: action.data.estadoActual
                            });
                            break;
                        case 'registrarSalida':
                            console.log('Body registrarSalida:', {
                                solicitudId: action.data.solicitudId,
                                colaboradores: action.data.colaboradores,
                                fecha: action.data.fecha,
                                estado_actual: action.data.estadoActual
                            });
                            url = `/api/solicitudes/${action.data.solicitudId}/registrar-salida`;
                            method = 'POST';
                            body = JSON.stringify({
                                solicitudId: action.data.solicitudId,
                                colaboradores: action.data.colaboradores.map(col => ({
                                    id: col.id,
                                    nombre: col.nombre,
                                    cedula: col.cedula
                                })),
                                fecha: action.data.fecha,
                                estado_actual: action.data.estadoActual
                            });
                            break;
                        case 'registrarEntradaVehiculo':
                            url = `/api/solicitudes/${action.data.solicitudId}/registrar-entrada-vehiculo`;
                            method = 'POST';
                            body = JSON.stringify({
                                solicitudId: action.data.solicitudId,
                                vehiculos: action.data.vehiculos.map(veh => ({
                                    id: veh.id.replace('VH-', ''),
                                    matricula: veh.matricula
                                })),
                                fecha: action.data.fecha,
                                estado_actual: action.data.estadoActual
                            });
                            break;
                        case 'registrarSalidaVehiculo':
                            url = `/api/solicitudes/${action.data.solicitudId}/registrar-salida-vehiculo`;
                            method = 'POST';
                            body = JSON.stringify({
                                solicitudId: action.data.solicitudId,
                                vehiculos: action.data.vehiculos.map(veh => ({
                                    id: veh.id.replace('VH-', ''),
                                    matricula: veh.matricula
                                })),
                                fecha: action.data.fecha,
                                estado_actual: action.data.estadoActual
                            });
                            break;
                        case 'registrarIngreso':
                            url = `/api/solicitudes/${action.data.solicitudId}/registrar-ingreso`;
                            method = 'PUT';
                            body = null;
                            break;
                        default:
                            console.warn('Tipo de acción desconocido:', action.type);
                            continue;
                    }

                    console.log('Enviando solicitud:', { url, method, body });

                    const response = await fetch(url, {
                        method,
                        headers: { 'Content-Type': 'application/json' },
                        body
                    });

                    if (response.ok) {
                        await deleteActionFromDB(action.id);
                        console.log(`Acción ${action.type} sincronizada exitosamente`);
                    } else {
                        const errorData = await response.json();
                        console.error(`Error al sincronizar ${action.type}:`, errorData);
                    }
                } catch (error) {
                    console.error(`Error al sincronizar ${action.type}:`, error);
                }
            }

            // Recargar los datos después de sincronizar
            await cargarTodosLosRegistros();
        }

        // Modify existing functions to use IndexedDB
        let modalData = null;
        const estadosVencidos = ['en labor - vencida', 'labor detenida', 'pendiente ingreso - vencido', 'en labor - vencida'];

        function getEstadoClass(estado) {
            if (!estado) return 'bg-secondary';
            if (estado.includes('pendiente ingreso')) return 'bg-warning';
            if (estado.includes('vencida')) return 'bg-danger';
            if (estado === 'en labor') return 'bg-info';
            if (estado === 'labor detenida') return 'bg-secondary';
            return 'bg-success';
        }

        function formatFecha(fecha) {
            if (!fecha || fecha === 'N/A' || fecha === 'null') return 'N/A';
            // Try parsing as DD/MM/YYYY (from backend DATE_FORMAT)
            const match = fecha.match(/^(\d{2})\/(\d{2})\/(\d{4})$/);
            if (match) {
                const [, day, month, year] = match;
                const date = new Date(`${year}-${month}-${day}`);
                if (!isNaN(date.getTime())) {
                    return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;
                }
            }
            // Fallback for other formats or invalid dates
            const date = new Date(fecha);
            if (isNaN(date.getTime())) return 'N/A';
            return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;
        }

        async function llenarModal(data) {
            modalData = data;
            document.getElementById('detalleId').textContent = data.id || 'N/A';
            document.getElementById('detalleEmpresa').textContent = data.empresa || 'N/A';
            document.getElementById('detalleLugar').textContent = data.nombre_lugar || 'N/A';
            document.getElementById('detalleLabor').textContent = data.labor || 'N/A';
            document.getElementById('detalleInterventor').textContent = data.interventor || 'N/A';
            document.getElementById('detalleInicio').textContent = formatFecha(data.inicio_obra);
            document.getElementById('detalleFin').textContent = formatFecha(data.fin_obra);

            document.getElementById('advertencia').textContent = data.advertencia || '';
            document.getElementById('mensajeEstado').textContent = data.mensajeEstado || '';

            const colaboradoresContainer = document.getElementById('detalleColaboradores');
            const vehiculosContainer = document.getElementById('detalleVehiculos');
            const colaboradoresTitle = document.querySelector('h5.mt-4:first-of-type');
            const vehiculosTitle = document.querySelector('h5.mt-4:last-of-type');
            
            colaboradoresContainer.style.display = 'none';
            vehiculosContainer.style.display = 'none';
            colaboradoresTitle.style.display = 'none';
            vehiculosTitle.style.display = 'none';

            if (data.colaboradores && data.colaboradores.length > 0) {
                colaboradoresContainer.style.display = 'block';
                colaboradoresTitle.style.display = 'block';
                colaboradoresContainer.innerHTML = '';
                data.colaboradores.forEach(colaborador => {
                    const colDiv = document.createElement('div');
                    colDiv.classList.add('col-md-4', 'mb-3');
                    colDiv.innerHTML = `
                        <div class="card">
                            <img src="${colaborador.foto}" class="card-img-top" alt="Foto de ${colaborador.nombre}">
                            <div class="card-body">
                                <h6 class="card-title">${colaborador.nombre}</h6>
                                <p class="card-text">Cédula: ${colaborador.cedula}</p>
                                <p class="card-text">ID Colaborador: ${colaborador.id}</p>
                                <p class="card-text">Curso SISO: ${colaborador.cursoSiso || 'No definido'}</p>
                                <p class="card-text">Plantilla SS: ${colaborador.plantillaSS || 'No definida'}</p>
                                ${colaborador.estado === 0 ? '<p class="card-text text-danger">Ingreso cancelado</p>' : '<input type="checkbox" class="colaborador-checkbox" value="' + colaborador.id + '">'}
                            </div>
                        </div>
                    `;
                    colaboradoresContainer.appendChild(colDiv);
                });
            }

            if (data.vehiculos && data.vehiculos.length > 0) {
                vehiculosContainer.style.display = 'block';
                vehiculosTitle.style.display = 'block';
                vehiculosContainer.innerHTML = '';
                data.vehiculos.forEach(vehiculo => {
                    const vehDiv = document.createElement('div');
                    vehDiv.classList.add('col-md-4', 'mb-3');
                    vehDiv.innerHTML = `
                        <div class="card">
                            <img src="${vehiculo.foto}" class="card-img-top" alt="Foto del vehículo ${vehiculo.matricula}">
                            <div class="card-body">
                                <h6 class="card-title">Vehículo: ${vehiculo.matricula}</h6>
                                <p class="card-text">ID Vehículo: VH-${vehiculo.id}</p>
                                <p class="card-text">SOAT: ${vehiculo.soat_inicio ? 'Vigente hasta ' + formatFecha(vehiculo.soat_fin) : 'No definido'}</p>
                                <p class="card-text">Tecnomecánica: ${vehiculo.tecnomecanica_inicio ? 'Vigente hasta ' + formatFecha(vehiculo.tecnomecanica_fin) : 'No definida'}</p>
                                <p class="card-text">Licencia Conducción: ${vehiculo.licencia_conduccion ? 'Aprobada' : 'No aprobada'}</p>
                                <p class="card-text">Licencia Tránsito: ${vehiculo.licencia_transito ? 'Aprobada' : 'No aprobada'}</p>
                                ${vehiculo.estado === 0 ? '<p class="card-text text-danger">Ingreso cancelado</p>' : '<input type="checkbox" class="vehiculo-checkbox" value="VH-' + vehiculo.id + '">'}
                            </div>
                        </div>
                    `;
                    vehiculosContainer.appendChild(vehDiv);
                });
            }

            const estadoElement = document.getElementById('detalleEstado');
            estadoElement.textContent = data.estado_actual || 'Desconocido';
            estadoElement.className = 'badge ' + getEstadoClass(data.estado_actual);

            configurarBotones(data);
            const modal = new bootstrap.Modal(document.getElementById('detallesModal'));
            modal.show();
        }

        async function configurarBotones(data) {
            const registrarIngresoBtn = document.getElementById('registrarIngresoBtn');
            const registrarEntradaBtn = document.getElementById('registrarEntradaBtn');
            const registrarSalidaBtn = document.getElementById('registrarSalidaBtn');

            const colaboradoresInactivos = data.colaboradores && data.colaboradores.some(col => col.estado === 0);
            const vehiculosInactivos = data.vehiculos && data.vehiculos.some(veh => veh.estado === 0);

            const cursoSisoProblema = data.colaboradores && data.colaboradores.some(col => 
                col.cursoSiso === 'Vencido' || col.cursoSiso === 'Perdido' || col.cursoSiso === 'No'
            );
            const plantillaSSProblema = data.colaboradores && data.colaboradores.some(col => 
                col.plantillaSS === 'Vencida' || col.plantillaSS === 'No definida'
            );
            const vehiculosProblema = data.vehiculos && data.vehiculos.some(veh => 
                veh.mensajesAdvertencia && veh.mensajesAdvertencia.length > 0
            );

            if (data.mensajeCursoSiso || data.mensajePlantillaSS || (data.vehiculos && data.vehiculos.some(veh => veh.mensajesAdvertencia))) {
                let mensaje = '';
                if (data.mensajeCursoSiso) mensaje += data.mensajeCursoSiso + ' ';
                if (data.mensajePlantillaSS) mensaje += data.mensajePlantillaSS + ' ';
                if (data.vehiculos) {
                    data.vehiculos.forEach(veh => {
                        if (veh.mensajesAdvertencia) {
                            mensaje += veh.mensajesAdvertencia.join(' ') + ' ';
                        }
                    });
                }
                Swal.fire({
                    icon: 'warning',
                    title: 'Restricción de Registro',
                    text: mensaje.trim(),
                    confirmButtonText: 'Entendido'
                });
            }

            if (colaboradoresInactivos || vehiculosInactivos || estadosVencidos.includes(data.estado_actual) || 
                data.advertencia || data.estado_actual === 'en labor' || cursoSisoProblema || 
                plantillaSSProblema || vehiculosProblema) {
                registrarIngresoBtn.disabled = true;
                registrarIngresoBtn.classList.add('btn-secondary');
                registrarIngresoBtn.classList.remove('btn-primary');
                registrarIngresoBtn.textContent = colaboradoresInactivos || vehiculosInactivos ? 'Ingreso cancelado' : 'No disponible';
            } else {
                registrarIngresoBtn.disabled = false;
                registrarIngresoBtn.classList.remove('btn-secondary');
                registrarIngresoBtn.classList.add('btn-primary');
                registrarIngresoBtn.textContent = 'Registrar Ingreso';
                registrarIngresoBtn.onclick = async () => {
                    if (navigator.onLine) {
                        try {
                            const response = await fetch(`/api/solicitudes/${data.id}/registrar-ingreso`, { method: 'PUT' });
                            if (response.ok) {
                                Swal.fire({ icon: 'success', title: 'Ingreso registrado', text: 'El ingreso se ha registrado correctamente.' });
                                registrarIngresoBtn.disabled = true;
                                registrarIngresoBtn.textContent = 'Registrado';
                            } else {
                                const errorData = await response.json();
                                Swal.fire({ icon: 'error', title: 'Error', text: errorData.message || 'No se pudo registrar el ingreso.' });
                            }
                        } catch (err) {
                            Swal.fire({ icon: 'error', title: 'Error', text: 'Ocurrió un error al intentar registrar el ingreso.' });
                        }
                    } else {
                        await addActionToDB({
                            type: 'registrarIngreso',
                            data: { solicitudId: data.id }
                        });
                        Swal.fire({
                            icon: 'info',
                            title: 'Sin Conexión',
                            text: 'El ingreso se ha guardado localmente y se sincronizará cuando haya conexión.'
                        });
                    }
                };
            }

            if (colaboradoresInactivos || vehiculosInactivos || data.advertencia || estadosVencidos.includes(data.estado_actual) || 
                cursoSisoProblema || plantillaSSProblema || vehiculosProblema) {
                registrarEntradaBtn.disabled = true;
                registrarEntradaBtn.classList.add('btn-secondary');
                registrarEntradaBtn.classList.remove('btn-success');
                registrarEntradaBtn.textContent = 'No disponible';

                registrarSalidaBtn.disabled = true;
                registrarSalidaBtn.classList.add('btn-secondary');
                registrarSalidaBtn.classList.remove('btn-danger');
                registrarSalidaBtn.textContent = 'No disponible';
            } else {
                registrarEntradaBtn.disabled = false;
                registrarEntradaBtn.classList.remove('btn-secondary');
                registrarEntradaBtn.classList.add('btn-success');
                registrarEntradaBtn.textContent = 'Registrar Entrada';

                registrarSalidaBtn.disabled = false;
                registrarSalidaBtn.classList.remove('btn-secondary');
                registrarSalidaBtn.classList.add('btn-danger');
                registrarSalidaBtn.textContent = 'Registrar Salida';
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const initialData = <%- JSON.stringify(typeof modalData !== 'undefined' ? modalData : null) %>;
            if (initialData) {
                llenarModal(initialData);
            }
            
            inicializarSelectoresHora();
            configurarModalConfirmacion();

            // Cargar todos los registros al iniciar
            cargarTodosLosRegistros();

            // Register Service Worker
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/js/sw.js')
                    .then(registration => {
                        console.log('Service Worker registrado con éxito:', registration.scope);
                        return registration.update();
                    })
                    .catch(error => {
                        console.error('Error al registrar el Service Worker:', error);
                    });
            }

            // Monitor network status
            window.addEventListener('online', () => {
                console.log('Conexión restaurada. Sincronizando datos...');
                syncPendingActions();
                // Recargar todos los registros cuando se restaura la conexión
                cargarTodosLosRegistros();
            });

            window.addEventListener('offline', () => {
                console.log('Sin conexión. Las acciones se guardarán localmente.');
                Swal.fire({
                    icon: 'info',
                    title: 'Sin Conexión',
                    text: 'Las acciones se guardarán localmente y se sincronizarán cuando haya conexión.'
                });
            });
        });

        function inicializarSelectoresHora() {
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            
            document.getElementById('fechaRegistro').value = `${year}-${month}-${day}`;
            
            const horaSelect = document.getElementById('horaSelect');
            const minutoSelect = document.getElementById('minutoSelect');
            
            horaSelect.innerHTML = '<option value="">Hora</option>';
            minutoSelect.innerHTML = '<option value="">Minuto</option>';
            
            for (let i = 0; i < 24; i++) {
                const option = document.createElement('option');
                option.value = String(i).padStart(2, '0');
                option.textContent = String(i).padStart(2, '0');
                if (i === parseInt(hours)) {
                    option.selected = true;
                }
                horaSelect.appendChild(option);
            }
            
            for (let i = 0; i < 60; i++) {
                const option = document.createElement('option');
                option.value = String(i).padStart(2, '0');
                option.textContent = String(i).padStart(2, '0');
                if (i === parseInt(minutes)) {
                    option.selected = true;
                }
                minutoSelect.appendChild(option);
            }
        }

        function configurarModalConfirmacion() {
            const modal = document.getElementById('confirmacionModal');
            const cerrarModal = document.getElementById('cerrarModal');
            const cancelarBtn = document.getElementById('cancelarBtn');
            const confirmarRegistroBtn = document.getElementById('confirmarRegistroBtn');
            
            document.getElementById('fechaRegistro').addEventListener('click', function() {
                this.focus();
            });
            
            document.getElementById('horaSelect').addEventListener('click', function() {
                this.focus();
            });
            
            document.getElementById('minutoSelect').addEventListener('click', function() {
                this.focus();
            });

            cerrarModal.addEventListener('click', () => {
                if (!procesoEnCurso) {
                    modal.classList.add('hidden');
                }
            });
            
            cancelarBtn.addEventListener('click', () => {
                if (!procesoEnCurso) {
                    modal.classList.add('hidden');
                }
            });

            window.mostrarConfirmacionModal = function(tipo) {
                if (procesoEnCurso) {
                    Swal.fire({ 
                        icon: 'warning', 
                        title: 'Proceso en curso', 
                        text: 'Hay un registro en proceso. Por favor, espere a que se complete.' 
                    });
                    return;
                }

                const now = new Date();
                const year = now.getFullYear();
                const month = String(now.getMonth() + 1).padStart(2, '0');
                const day = String(now.getDate()).padStart(2, '0');
                const hours = String(now.getHours()).padStart(2, '0');
                const minutes = String(now.getMinutes()).padStart(2, '0');
                
                document.getElementById('fechaRegistro').value = `${year}-${month}-${day}`;
                document.getElementById('horaSelect').value = hours;
                document.getElementById('minutoSelect').value = minutes;

                tipoRegistro = tipo;
                const checkboxes = document.querySelectorAll('.colaborador-checkbox:checked, .vehiculo-checkbox:checked');
                if (!checkboxes.length) {
                    Swal.fire({ icon: 'warning', title: 'Selecciona elementos', text: `Debes seleccionar al menos un colaborador o vehículo para registrar su ${tipo}.` });
                    return;
                }

                if (modalData.mensajeCursoSiso || modalData.mensajePlantillaSS || 
                    (modalData.vehiculos && modalData.vehiculos.some(veh => veh.mensajesAdvertencia))) {
                    let mensaje = '';
                    if (modalData.mensajeCursoSiso) mensaje += modalData.mensajeCursoSiso + ' ';
                    if (modalData.mensajePlantillaSS) mensaje += modalData.mensajePlantillaSS + ' ';
                    if (modalData.vehiculos) {
                        modalData.vehiculos.forEach(veh => {
                            if (veh.mensajesAdvertencia) {
                                mensaje += veh.mensajesAdvertencia.join(' ') + ' ';
                            }
                        });
                    }
                    Swal.fire({
                        icon: 'warning',
                        title: 'Restricción de Registro',
                        text: mensaje.trim(),
                        confirmButtonText: 'Entendido'
                    });
                    return;
                }

                colaboradoresSeleccionados = Array.from(checkboxes).map(checkbox => {
                    const cardBody = checkbox.closest('.card-body');
                    const isVehiculo = checkbox.classList.contains('vehiculo-checkbox');
                    return {
                        id: checkbox.value.trim(),
                        nombre: isVehiculo ? `Vehículo ${cardBody.querySelector('.card-title').textContent.split(': ')[1]}` : cardBody.querySelector('.card-title').textContent.trim(),
                        cedula: isVehiculo ? checkbox.value.trim() : cardBody.querySelector('.card-text').textContent.replace('Cédula: ', '').trim()
                    };
                });

                document.getElementById('listaColaboradoresConfirmacion').innerHTML = colaboradoresSeleccionados
                    .map(col => `<li>${col.nombre} - ${col.id.startsWith('VH-') ? 'ID' : 'C.C'} ${col.cedula}</li>`)
                    .join('');
                document.getElementById('confirmacionTexto').textContent = `¿Estás seguro de registrar la ${tipo} de los siguientes elementos?`;
                
                const detallesModal = bootstrap.Modal.getInstance(document.getElementById('detallesModal'));
                if (detallesModal) {
                    detallesModal.hide();
                }
                
                modal.classList.remove('hidden');
            };

            document.getElementById('registrarEntradaBtn').onclick = () => {
                if (!procesoEnCurso) {
                    mostrarConfirmacionModal('entrada');
                }
            };
            
            document.getElementById('registrarSalidaBtn').onclick = () => {
                if (!procesoEnCurso) {
                    mostrarConfirmacionModal('salida');
                }
            };

            confirmarRegistroBtn.addEventListener('click', async () => {
                if (procesoEnCurso) {
                    return;
                }

                procesoEnCurso = true;
                confirmarRegistroBtn.disabled = true;
                cancelarBtn.disabled = true;
                cerrarModal.disabled = true;

                const fechaRegistro = document.getElementById('fechaRegistro').value;
                const horaRegistro = document.getElementById('horaSelect').value;
                const minutoRegistro = document.getElementById('minutoSelect').value;
                const fechaHoraCompleta = `${fechaRegistro}T${horaRegistro}:${minutoRegistro}`;
                const solicitudId = document.getElementById('detalleId').textContent;
                const detalleEstado = document.getElementById('detalleEstado').textContent;

                if (!colaboradoresSeleccionados.length) {
                    Swal.fire({ icon: 'warning', title: 'Elementos no seleccionados', text: 'Debes seleccionar al menos un elemento.' });
                    procesoEnCurso = false;
                    confirmarRegistroBtn.disabled = false;
                    cancelarBtn.disabled = false;
                    cerrarModal.disabled = false;
                    return;
                }
                if (!fechaRegistro || !horaRegistro || !minutoRegistro) {
                    Swal.fire({ icon: 'warning', title: 'Fecha y hora requeridas', text: 'Por favor, ingresa la fecha y hora del evento.' });
                    procesoEnCurso = false;
                    confirmarRegistroBtn.disabled = false;
                    cancelarBtn.disabled = false;
                    cerrarModal.disabled = false;
                    return;
                }

                const colaboradores = colaboradoresSeleccionados.filter(item => !item.id.startsWith('VH-'));
                const vehiculos = colaboradoresSeleccionados.filter(item => item.id.startsWith('VH-'));

                if (navigator.onLine) {
                    try {
                        let response;
                        if (tipoRegistro === 'entrada') {
                            if (colaboradores.length > 0) {
                                response = await fetch(`/api/solicitudes/${solicitudId}/registrar-entrada`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ 
                                        estado_actual: detalleEstado, 
                                        solicitudId, 
                                        colaboradores, 
                                        fecha: fechaHoraCompleta,
                                        fecha_registro: new Date().toISOString()
                                    })
                                });
                            }
                            if (vehiculos.length > 0) {
                                response = await fetch(`/api/solicitudes/${solicitudId}/registrar-entrada-vehiculo`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ 
                                        estado_actual: detalleEstado, 
                                        solicitudId, 
                                        vehiculos, 
                                        fecha: fechaHoraCompleta,
                                        fecha_registro: new Date().toISOString()
                                    })
                                });
                            }
                        } else if (tipoRegistro === 'salida') {
                            if (colaboradores.length > 0) {
                                response = await fetch(`/api/solicitudes/${solicitudId}/registrar-salida`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ 
                                        estado_actual: detalleEstado, 
                                        solicitudId, 
                                        colaboradores, 
                                        fecha: fechaHoraCompleta,
                                        fecha_registro: new Date().toISOString()
                                    })
                                });
                            }
                            if (vehiculos.length > 0) {
                                response = await fetch(`/api/solicitudes/${solicitudId}/registrar-salida-vehiculo`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ 
                                        estado_actual: detalleEstado, 
                                        solicitudId, 
                                        vehiculos, 
                                        fecha: fechaHoraCompleta,
                                        fecha_registro: new Date().toISOString()
                                    })
                                });
                            }
                        }

                        const result = await response.json();
                        if (response.ok) {
                            Swal.fire({ icon: 'success', title: 'Registro exitoso', text: result.message });
                            document.querySelectorAll('.colaborador-checkbox:checked').forEach(checkbox => checkbox.checked = false);
                            document.querySelectorAll('.vehiculo-checkbox:checked').forEach(checkbox => checkbox.checked = false);
                            modal.classList.add('hidden');
                        } else {
                            Swal.fire({ icon: 'error', title: 'Error', text: result.message });
                        }
                    } catch (error) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'Hubo un problema al registrar la operación.' });
                        console.error('Error al registrar:', error);
                    } finally {
                        procesoEnCurso = false;
                        confirmarRegistroBtn.disabled = false;
                        cancelarBtn.disabled = false;
                        cerrarModal.disabled = false;
                    }
                } else {
                    try {
                        if (tipoRegistro === 'entrada') {
                            if (colaboradores.length > 0) {
                                await addActionToDB({
                                    type: 'registrarEntrada',
                                    data: {
                                        solicitudId,
                                        colaboradores,
                                        fecha: fechaHoraCompleta,
                                        estadoActual: detalleEstado
                                    }
                                });
                            }
                            if (vehiculos.length > 0) {
                                await addActionToDB({
                                    type: 'registrarEntradaVehiculo',
                                    data: {
                                        solicitudId,
                                        vehiculos,
                                        fecha: fechaHoraCompleta,
                                        estadoActual: detalleEstado
                                    }
                                });
                            }
                        } else if (tipoRegistro === 'salida') {
                            if (colaboradores.length > 0) {
                                await addActionToDB({
                                    type: 'registrarSalida',
                                    data: {
                                        solicitudId,
                                        colaboradores,
                                        fecha: fechaHoraCompleta,
                                        estadoActual: detalleEstado
                                    }
                                });
                            }
                            if (vehiculos.length > 0) {
                                await addActionToDB({
                                    type: 'registrarSalidaVehiculo',
                                    data: {
                                        solicitudId,
                                        vehiculos,
                                        fecha: fechaHoraCompleta,
                                        estadoActual: detalleEstado
                                    }
                                });
                            }
                        }
                        Swal.fire({
                            icon: 'info',
                            title: 'Sin Conexión',
                            text: 'La acción se ha guardado localmente y se sincronizará cuando haya conexión.'
                        });
                        document.querySelectorAll('.colaborador-checkbox:checked').forEach(checkbox => checkbox.checked = false);
                        document.querySelectorAll('.vehiculo-checkbox:checked').forEach(checkbox => checkbox.checked = false);
                        modal.classList.add('hidden');
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Hubo un problema al guardar la acción localmente.'
                        });
                        console.error('Error al guardar en IndexedDB:', error);
                    } finally {
                        procesoEnCurso = false;
                        confirmarRegistroBtn.disabled = false;
                        cancelarBtn.disabled = false;
                        cerrarModal.disabled = false;
                    }
                }
            });
        }

        async function verDetalles(id) {
            try {
                console.log('Iniciando verDetalles con ID:', id);
                const cleanId = id.trim().toUpperCase();
                const url = `/api/solicitudes/seguridad/${cleanId}`;
                console.log('URL de búsqueda:', url);

                if (navigator.onLine) {
                    console.log('Conexión en línea, realizando búsqueda en servidor');
                    const response = await fetch(url);
                    if (!response.ok) {
                        const errorData = await response.json();
                        console.error('Error en la respuesta del servidor:', errorData);
                        Swal.fire({ 
                            icon: 'error', 
                            title: 'Solicitud no encontrada', 
                            text: errorData.message || 'No se ha encontrado registro de esta solicitud.' 
                        });
                        return;
                    }

                    const data = await response.json();
                    console.log('Datos recibidos del servidor:', data);
                    if (!data) {
                        console.error('No se recibieron datos válidos del servidor');
                        Swal.fire({ 
                            icon: 'error', 
                            title: 'Error', 
                            text: 'No se recibieron datos válidos del servidor.' 
                        });
                        return;
                    }

                    // Cache data in IndexedDB for offline use
                    console.log('Guardando datos en IndexedDB para uso sin conexión');
                    const transaction = db.transaction(['pendingActions'], 'readwrite');
                    const store = transaction.objectStore('pendingActions');
                    await store.put({
                        id: `detalles-${cleanId}`,
                        type: 'cachedDetails',
                        data,
                        timestamp: new Date().toISOString()
                    });
                    console.log('Datos guardados en IndexedDB');

                    llenarModal(data);
                } else {
                    console.log('Sin conexión, buscando en caché local');
                    // Intentar obtener datos de la caché
                    const transaction = db.transaction(['pendingActions'], 'readonly');
                    const store = transaction.objectStore('pendingActions');
                    
                    // Primero buscar si es un ID de colaborador
                    const colaboradoresRequest = store.getAll();
                    colaboradoresRequest.onsuccess = () => {
                        console.log('Buscando colaborador en caché con ID:', cleanId);
                        const colaborador = colaboradoresRequest.result
                            .find(item => item.type === 'cachedColaborador' && item.data.id === cleanId);
                        
                        if (colaborador) {
                            console.log('Colaborador encontrado en caché:', colaborador);
                            // Si encontramos el colaborador, buscar su solicitud
                            const solicitudRequest = store.get(`detalles-${colaborador.data.solicitudId}`);
                            solicitudRequest.onsuccess = () => {
                                if (solicitudRequest.result) {
                                    const detalles = solicitudRequest.result.data;
                                    console.log('Detalles de solicitud encontrados:', detalles);
                                    
                                    // Buscar todos los colaboradores de esta solicitud
                                    const todosColaboradoresRequest = store.getAll();
                                    todosColaboradoresRequest.onsuccess = () => {
                                        const colaboradores = todosColaboradoresRequest.result
                                            .filter(item => item.type === 'cachedColaborador' && item.data.solicitudId === detalles.id)
                                            .map(item => item.data);
                                        console.log('Colaboradores encontrados para la solicitud:', colaboradores);
                                        
                                        // Buscar todos los vehículos de esta solicitud
                                        const vehiculosRequest = store.getAll();
                                        vehiculosRequest.onsuccess = () => {
                                            const vehiculos = vehiculosRequest.result
                                                .filter(item => item.type === 'cachedVehiculo' && item.data.solicitudId === detalles.id)
                                                .map(item => item.data);
                                            console.log('Vehículos encontrados para la solicitud:', vehiculos);
                                            
                                            detalles.colaboradores = colaboradores;
                                            detalles.vehiculos = vehiculos;
                                            
                                            console.log('Detalles completos preparados para mostrar:', {
                                                colaboradorId: cleanId,
                                                solicitudId: detalles.id,
                                                colaboradoresEncontrados: colaboradores.length,
                                                vehiculosEncontrados: vehiculos.length,
                                                detallesCompletos: detalles
                                            });
                                            
                                            llenarModal(detalles);
                                        };
                                    };
                                } else {
                                    console.log('No se encontraron detalles de solicitud en caché');
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Sin Conexión',
                                        text: 'No se pueden obtener los detalles sin conexión. Intente más tarde.'
                                    });
                                }
                            };
                        } else {
                            console.log('No se encontró colaborador, buscando como ID de solicitud');
                            // Si no es un ID de colaborador, intentar como ID de solicitud
                            const solicitudRequest = store.get(`detalles-${cleanId}`);
                            solicitudRequest.onsuccess = () => {
                                if (solicitudRequest.result) {
                                    const detalles = solicitudRequest.result.data;
                                    console.log('Detalles de solicitud encontrados por ID:', detalles);
                                    
                                    // Buscar todos los colaboradores asociados a esta solicitud
                                    const colaboradoresRequest = store.getAll();
                                    colaboradoresRequest.onsuccess = () => {
                                        const colaboradores = colaboradoresRequest.result
                                            .filter(item => item.type === 'cachedColaborador' && item.data.solicitudId === detalles.id)
                                            .map(item => item.data);
                                        console.log('Colaboradores encontrados para la solicitud:', colaboradores);
                                        
                                        // Buscar todos los vehículos asociados a esta solicitud
                                        const vehiculosRequest = store.getAll();
                                        vehiculosRequest.onsuccess = () => {
                                            const vehiculos = vehiculosRequest.result
                                                .filter(item => item.type === 'cachedVehiculo' && item.data.solicitudId === detalles.id)
                                                .map(item => item.data);
                                            console.log('Vehículos encontrados para la solicitud:', vehiculos);
                                            
                                            detalles.colaboradores = colaboradores;
                                            detalles.vehiculos = vehiculos;
                                            
                                            console.log('Detalles completos preparados para mostrar:', {
                                                solicitudId: detalles.id,
                                                colaboradoresEncontrados: colaboradores.length,
                                                vehiculosEncontrados: vehiculos.length,
                                                detallesCompletos: detalles
                                            });
                                            
                                            llenarModal(detalles);
                                        };
                                    };
                                } else {
                                    console.log('No se encontraron detalles de solicitud en caché');
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Sin Conexión',
                                        text: 'No se pueden obtener los detalles sin conexión. Intente más tarde.'
                                    });
                                }
                            };
                        }
                    };
                }
            } catch (error) {
                console.error('Error al obtener detalles:', error);
                Swal.fire({ 
                    icon: 'error', 
                    title: 'Error', 
                    text: 'Ocurrió un error al obtener los detalles de la solicitud. Por favor, intente nuevamente.' 
                });
            }
        }

        function buscar() {
            const id = document.getElementById('buscarId').value.trim();
            if (!id) {
                Swal.fire({ 
                    icon: 'warning', 
                    title: 'ID requerido', 
                    text: 'Por favor, ingrese un ID válido.' 
                });
                return;
            }
            verDetalles(id);
        }

        let tipoRegistro = '';
        let colaboradoresSeleccionados = [];
        let procesoEnCurso = false;

        // Periodic sync attempt
        setInterval(() => {
            if (navigator.onLine) {
                syncPendingActions();
            }
        }, 60000); // Try syncing every 60 seconds

        // Función para cargar todos los registros
        async function cargarTodosLosRegistros() {
            const loadingOverlay = document.getElementById('loadingOverlay');
            const progressFill = document.getElementById('progressFill');
            const loadingMessage = document.getElementById('loadingMessage');

            if (!navigator.onLine) {
                console.log('Sin conexión. Usando datos en caché.');
                loadingMessage.textContent = 'Sin conexión. Usando datos en caché.';
                setTimeout(() => {
                    loadingOverlay.classList.add('hidden');
                }, 1000);
                return;
            }

            try {
                console.log('Cargando todos los registros...');
                loadingMessage.textContent = 'Obteniendo solicitudes...';
                const response = await fetch('/api/solicitudes/seguridad_activas');
                if (!response.ok) {
                    throw new Error(`Error al cargar los registros: ${response.statusText}`);
                }

                const solicitudes = await response.json();
                console.log('Registros cargados:', solicitudes.length);
                console.log('IDs de solicitudes encontradas:', solicitudes.map(s => s.id));

                // Calcular el total de elementos a procesar
                let totalItems = solicitudes.length;
                solicitudes.forEach(solicitud => {
                    totalItems += (solicitud.colaboradores ? solicitud.colaboradores.length : 0);
                    totalItems += (solicitud.vehiculos ? solicitud.vehiculos.length : 0);
                });
                let processedItems = 0;

                // Función para actualizar el progreso
                function updateProgress() {
                    processedItems++;
                    const progress = (processedItems / totalItems) * 100;
                    progressFill.style.width = `${progress}%`;
                    loadingMessage.textContent = `Procesando ${processedItems} de ${totalItems} elementos...`;
                }

                // Guardar en IndexedDB
                const transaction = db.transaction(['pendingActions'], 'readwrite');
                const store = transaction.objectStore('pendingActions');

                for (const solicitud of solicitudes) {
                    try {
                        console.log(`\nProcesando solicitud ID: ${solicitud.id}`);
                        console.log(`Detalles de solicitud ${solicitud.id}:`, {
                            empresa: solicitud.empresa,
                            lugar: solicitud.nombre_lugar,
                            labor: solicitud.labor,
                            estado: solicitud.estado_actual
                        });

                        // Guardar detalles de la solicitud
                        await store.put({
                            id: `detalles-${solicitud.id}`,
                            type: 'cachedDetails',
                            data: solicitud,
                            timestamp: new Date().toISOString()
                        });
                        console.log(`Detalles de solicitud ${solicitud.id} guardados`);
                        updateProgress();

                        // Guardar colaboradores
                        if (solicitud.colaboradores && solicitud.colaboradores.length > 0) {
                            console.log(`Colaboradores para solicitud ${solicitud.id}:`, solicitud.colaboradores.map(col => ({
                                id: col.id,
                                nombre: col.nombre,
                                cedula: col.cedula,
                                cursoSiso: col.cursoSiso,
                                plantillaSS: col.plantillaSS
                            })));
                            for (const colaborador of solicitud.colaboradores) {
                                await store.put({
                                    id: `colaborador-${colaborador.id}`,
                                    type: 'cachedColaborador',
                                    data: {
                                        id: colaborador.id,
                                        nombre: colaborador.nombre,
                                        cedula: colaborador.cedula,
                                        foto: colaborador.foto,
                                        estado: colaborador.estado,
                                        cursoSiso: colaborador.cursoSiso,
                                        plantillaSS: colaborador.plantillaSS,
                                        curso_siso_vencimiento: colaborador.curso_siso_vencimiento,
                                        plantilla_ss_inicio: colaborador.plantilla_ss_inicio,
                                        plantilla_ss_fin: colaborador.plantilla_ss_fin,
                                        solicitudId: solicitud.id
                                    },
                                    timestamp: new Date().toISOString()
                                });
                                updateProgress();
                            }
                            console.log(`Colaboradores guardados: ${solicitud.colaboradores.length}`);
                        } else {
                            console.log(`No se encontraron colaboradores para solicitud ${solicitud.id}`);
                        }

                        // Guardar vehículos
                        if (solicitud.vehiculos && solicitud.vehiculos.length > 0) {
                            console.log(`Vehículos para solicitud ${solicitud.id}:`, solicitud.vehiculos.map(veh => ({
                                id: veh.id,
                                matricula: veh.matricula,
                                estado_soat: veh.estado_soat,
                                estado_tecnomecanica: veh.estado_tecnomecanica,
                                licencia_conduccion: veh.licencia_conduccion,
                                licencia_transito: veh.licencia_transito
                            })));
                            for (const vehiculo of solicitud.vehiculos) {
                                await store.put({
                                    id: `vehiculo-${vehiculo.id}`,
                                    type: 'cachedVehiculo',
                                    data: {
                                        id: vehiculo.id,
                                        matricula: vehiculo.matricula,
                                        foto: vehiculo.foto,
                                        estado: vehiculo.estado,
                                        soat_inicio: vehiculo.soat_inicio,
                                        soat_fin: vehiculo.soat_fin,
                                        tecnomecanica_inicio: vehiculo.tecnomecanica_inicio,
                                        tecnomecanica_fin: vehiculo.tecnomecanica_fin,
                                        licencia_conduccion: vehiculo.licencia_conduccion,
                                        licencia_transito: vehiculo.licencia_transito,
                                        estado_soat: vehiculo.estado_soat,
                                        estado_tecnomecanica: vehiculo.estado_tecnomecanica,
                                        mensajesAdvertencia: vehiculo.mensajesAdvertencia,
                                        solicitudId: solicitud.id
                                    },
                                    timestamp: new Date().toISOString()
                                });
                                updateProgress();
                            }
                            console.log(`Vehículos guardados: ${solicitud.vehiculos.length}`);
                        } else {
                            console.log(`No se encontraron vehículos para solicitud ${solicitud.id}`);
                        }
                    } catch (error) {
                        console.error(`Error al cachear solicitud ${solicitud.id}:`, error);
                    }
                }

                // Verificar contenido de IndexedDB
                const allItemsRequest = store.getAll();
                allItemsRequest.onsuccess = () => {
                    const allItems = allItemsRequest.result;
                    console.log('\nResumen de carga:');
                    console.log('Total de solicitudes:', solicitudes.length);
                    console.log('Total de items en IndexedDB:', allItems.length);
                    console.log('Desglose:', {
                        detalles: allItems.filter(item => item.type === 'cachedDetails').length,
                        colaboradores: allItems.filter(item => item.type === 'cachedColaborador').length,
                        vehiculos: allItems.filter(item => item.type === 'cachedVehiculo').length,
                        pendientes: allItems.filter(item => item.type.startsWith('pending')).length
                    });
                    loadingMessage.textContent = 'Carga completa!';
                    progressFill.style.width = '100%';
                    setTimeout(() => {
                        loadingOverlay.classList.add('hidden');
                    }, 500);
                };

            } catch (error) {
                console.error('Error al cargar registros:', error);
                loadingMessage.textContent = 'Error al cargar datos. Usando caché.';
                setTimeout(() => {
                    loadingOverlay.classList.add('hidden');
                }, 1000);
            }
        }

        async function verDetalles(id) {
            try {
                console.log('Iniciando verDetalles con ID:', id);
                const cleanId = id.trim().toUpperCase();

                if (navigator.onLine) {
                    console.log('Conexión en línea, realizando búsqueda en servidor');
                    const url = `/api/solicitudes/seguridad/${cleanId}`;
                    const response = await fetch(url);
                    if (!response.ok) {
                        const errorData = await response.json();
                        console.error('Error en la respuesta del servidor:', errorData);
                        Swal.fire({ 
                            icon: 'error', 
                            title: 'No encontrado', 
                            text: errorData.message || 'No se ha encontrado registro.' 
                        });
                        return;
                    }

                    const data = await response.json();
                    console.log('Datos recibidos del servidor:', data);

                    // Cachear datos en IndexedDB
                    const transaction = db.transaction(['pendingActions'], 'readwrite');
                    const store = transaction.objectStore('pendingActions');
                    await store.put({
                        id: `detalles-${data.id}`,
                        type: 'cachedDetails',
                        data,
                        timestamp: new Date().toISOString()
                    });

                    // Cachear colaboradores
                    if (data.colaboradores && data.colaboradores.length > 0) {
                        for (const colaborador of data.colaboradores) {
                            await store.put({
                                id: `colaborador-${colaborador.id}`,
                                type: 'cachedColaborador',
                                data: {
                                    ...colaborador,
                                    solicitudId: data.id
                                },
                                timestamp: new Date().toISOString()
                            });
                        }
                    }

                    // Cachear vehículos
                    if (data.vehiculos && data.vehiculos.length > 0) {
                        for (const vehiculo of data.vehiculos) {
                            await store.put({
                                id: `vehiculo-${vehiculo.id}`,
                                type: 'cachedVehiculo',
                                data: {
                                    ...vehiculo,
                                    solicitudId: data.id
                                },
                                timestamp: new Date().toISOString()
                            });
                        }
                    }

                    console.log('Datos guardados en IndexedDB');
                    llenarModal(data);
                } else {
                    console.log('Sin conexión, buscando en caché local');
                    const transaction = db.transaction(['pendingActions'], 'readonly');
                    const store = transaction.objectStore('pendingActions');

                    // Determinar si es colaborador, vehículo o solicitud
                    const isVehiculo = cleanId.startsWith('VH-');
                    const entityId = isVehiculo ? cleanId.replace('VH-', '') : cleanId;
                    const cacheId = isVehiculo ? `vehiculo-${entityId}` : `colaborador-${entityId}`;

                    // Buscar como colaborador o vehículo
                    const entityRequest = store.get(cacheId);
                    entityRequest.onsuccess = async () => {
                        const entity = entityRequest.result;
                        if (entity) {
                            console.log(`Encontrado ${isVehiculo ? 'vehículo' : 'colaborador'} en caché:`, entity.data);
                            const solicitudId = entity.data.solicitudId;

                            // Buscar solicitud asociada
                            const solicitudRequest = store.get(`detalles-${solicitudId}`);
                            solicitudRequest.onsuccess = () => {
                                const solicitud = solicitudRequest.result;
                                if (!solicitud) {
                                    console.log(`No se encontró solicitud ${solicitudId} en caché`);
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Sin Conexión',
                                        text: 'No se encontró la solicitud asociada.'
                                    });
                                    return;
                                }

                                // Preparar datos para el modal
                                const modalData = {
                                    id: solicitud.data.id,
                                    empresa: solicitud.data.empresa,
                                    nombre_lugar: solicitud.data.nombre_lugar,
                                    labor: solicitud.data.labor,
                                    inicio_obra: solicitud.data.inicio_obra,
                                    fin_obra: solicitud.data.fin_obra,
                                    estado_actual: solicitud.data.estado_actual,
                                    interventor: solicitud.data.interventor,
                                    mensajeCursoSiso: solicitud.data.mensajeCursoSiso,
                                    mensajePlantillaSS: solicitud.data.mensajePlantillaSS,
                                    mensajeVehiculos: solicitud.data.mensajeVehiculos,
                                    colaboradores: isVehiculo ? [] : [entity.data],
                                    vehiculos: isVehiculo ? [entity.data] : []
                                };

                                console.log('Datos para el modal:', modalData);
                                llenarModal(modalData);
                            };
                        } else {
                            console.log('No se encontró colaborador/vehículo, buscando como solicitud');
                            // Buscar como solicitud
                            const solicitudRequest = store.get(`detalles-${cleanId}`);
                            solicitudRequest.onsuccess = () => {
                                if (solicitudRequest.result) {
                                    const detalles = solicitudRequest.result.data;
                                    console.log('Detalles de solicitud encontrados:', detalles);

                                    // Obtener colaboradores y vehículos
                                    const allItemsRequest = store.getAll();
                                    allItemsRequest.onsuccess = () => {
                                        const colaboradores = allItemsRequest.result
                                            .filter(item => item.type === 'cachedColaborador' && item.data.solicitudId === detalles.id)
                                            .map(item => item.data);
                                        const vehiculos = allItemsRequest.result
                                            .filter(item => item.type === 'cachedVehiculo' && item.data.solicitudId === detalles.id)
                                            .map(item => item.data);

                                        detalles.colaboradores = colaboradores;
                                        detalles.vehiculos = vehiculos;

                                        console.log('Detalles completos:', {
                                            solicitudId: detalles.id,
                                            colaboradores: colaboradores.length,
                                            vehiculos: vehiculos.length
                                        });
                                        llenarModal(detalles);
                                    };
                                } else {
                                    console.log('No se encontraron datos en caché');
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Sin Conexión',
                                        text: 'No se encontraron datos en caché.'
                                    });
                                }
                            };
                        }
                    };
                }
            } catch (error) {
                console.error('Error al obtener detalles:', error);
                Swal.fire({ 
                    icon: 'error', 
                    title: 'Error', 
                    text: 'Ocurrió un error al obtener los detalles.' 
                });
            }
        }

        async function buscarPorIdSinConexion(id) {
            try {
                const transaction = db.transaction(['pendingActions'], 'readonly');
                const store = transaction.objectStore('pendingActions');

                // Determinar si es colaborador o vehículo
                const isVehiculo = id.startsWith('VH-');
                const entityId = isVehiculo ? id.replace('VH-', '') : id;
                const type = isVehiculo ? 'cachedVehiculo' : 'cachedColaborador';
                const cacheId = isVehiculo ? `vehiculo-${entityId}` : `colaborador-${entityId}`;

                // Buscar el colaborador o vehículo
                const entityRequest = store.get(cacheId);
                entityRequest.onsuccess = async () => {
                    const entity = entityRequest.result;
                    if (!entity) {
                        console.log(`No se encontró ${isVehiculo ? 'vehículo' : 'colaborador'} con ID ${id} en caché`);
                        alert(`No se encontró ${isVehiculo ? 'vehículo' : 'colaborador'} con ID ${id}`);
                        return;
                    }

                    const solicitudId = entity.data.solicitudId;
                    console.log(`Encontrado ${type} con ID ${id}, asociado a solicitud ${solicitudId}`);

                    // Buscar detalles de la solicitud
                    const solicitudRequest = store.get(`detalles-${solicitudId}`);
                    solicitudRequest.onsuccess = () => {
                        const solicitud = solicitudRequest.result;
                        if (!solicitud) {
                            console.log(`No se encontró solicitud ${solicitudId} en caché`);
                            alert('No se encontró la solicitud asociada');
                            return;
                        }

                        // Mostrar datos en el modal
                        const modalData = {
                            id: solicitud.data.id,
                            empresa: solicitud.data.empresa,
                            lugar: solicitud.data.nombre_lugar,
                            labor: solicitud.data.labor,
                            inicio_obra: solicitud.data.inicio_obra,
                            fin_obra: solicitud.data.fin_obra,
                            estado: solicitud.data.estado_actual,
                            interventor: solicitud.data.interventor,
                            [isVehiculo ? 'vehiculos' : 'colaboradores']: [entity.data]
                        };

                        console.log('Datos para el modal:', modalData);
                        llenarModal(modalData);

                        // Habilitar acciones
                        habilitarAcciones(solicitudId, entity.data, isVehiculo);
                    };
                };
            } catch (error) {
                console.error('Error al buscar sin conexión:', error);
                alert('Error al buscar el ID');
            }
        }

        function habilitarAcciones(solicitudId, entity, isVehiculo) {
            const entradaBtn = document.getElementById('registrarEntradaBtn');
            const salidaBtn = document.getElementById('registrarSalidaBtn');
            const ingresoSolicitudBtn = document.getElementById('registrarIngresoBtn');

            // Acción para registrar ingreso de la solicitud
            ingresoSolicitudBtn.onclick = async () => {
                if (navigator.onLine) {
                    try {
                        const response = await fetch(`/api/solicitudes/seguridad/ingreso/${solicitudId}`, { method: 'POST' });
                        if (response.ok) {
                            Swal.fire({ icon: 'success', title: 'Éxito', text: 'Solicitud registrada como "en labor".' });
                        } else {
                            Swal.fire({ icon: 'error', title: 'Error', text: 'Error al registrar ingreso de solicitud.' });
                        }
                    } catch (error) {
                        console.error('Error al registrar ingreso:', error);
                        Swal.fire({ icon: 'error', title: 'Error', text: 'Error al registrar ingreso.' });
                    }
                } else {
                    // Guardar acción en caché para sincronizar después
                    const transaction = db.transaction(['pendingActions'], 'readwrite');
                    const store = transaction.objectStore('pendingActions');
                    store.add({
                        id: `ingreso-solicitud-${solicitudId}-${Date.now()}`,
                        type: 'pendingIngresoSolicitud',
                        data: { solicitudId },
                        timestamp: new Date().toISOString()
                    });
                    Swal.fire({ icon: 'info', title: 'Sin conexión', text: 'Ingreso de solicitud guardado para sincronizar.' });
                }
            };

            // Acción para entrada
            entradaBtn.onclick = async () => {
                if (navigator.onLine) {
                    try {
                        const response = await fetch(`/api/solicitudes/seguridad/${isVehiculo ? 'entrada-vehiculo' : 'entrada'}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                solicitudId,
                                [isVehiculo ? 'vehiculos' : 'colaboradores']: [{ id: entity.id }],
                                fecha: new Date().toISOString(),
                                estado_actual: 'pendiente ingreso'
                            })
                        });
                        if (response.ok) {
                            Swal.fire({ icon: 'success', title: 'Éxito', text: `${isVehiculo ? 'Vehículo' : 'Colaborador'} registrado como entrado.` });
                        } else {
                            Swal.fire({ icon: 'error', title: 'Error', text: 'Error al registrar entrada.' });
                        }
                    } catch (error) {
                        console.error('Error al registrar entrada:', error);
                        Swal.fire({ icon: 'error', title: 'Error', text: 'Error al registrar entrada.' });
                    }
                } else {
                    // Guardar acción en caché
                    const transaction = db.transaction(['pendingActions'], 'readwrite');
                    const store = transaction.objectStore('pendingActions');
                    store.add({
                        id: `entrada-${isVehiculo ? 'vehiculo' : 'colaborador'}-${entity.id}-${Date.now()}`,
                        type: isVehiculo ? 'pendingEntradaVehiculo' : 'pendingEntradaColaborador',
                        data: {
                            solicitudId,
                            entityId: entity.id,
                            fecha: new Date().toISOString(),
                            estado_actual: 'pendiente ingreso'
                        },
                        timestamp: new Date().toISOString()
                    });
                    Swal.fire({ icon: 'info', title: 'Sin conexión', text: `Entrada de ${isVehiculo ? 'vehículo' : 'colaborador'} guardada para sincronizar.` });
                }
            };

            // Acción para salida
            salidaBtn.onclick = async () => {
                if (navigator.onLine) {
                    try {
                        const response = await fetch(`/api/solicitudes/seguridad/${isVehiculo ? 'salida-vehiculo' : 'salida'}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                solicitudId,
                                [isVehiculo ? 'vehiculos' : 'colaboradores']: [{ id: entity.id }],
                                fecha: new Date().toISOString(),
                                estado_actual: 'pendiente ingreso'
                            })
                        });
                        if (response.ok) {
                            Swal.fire({ icon: 'success', title: 'Éxito', text: `${isVehiculo ? 'Vehículo' : 'Colaborador'} registrado como salido.` });
                        } else {
                            Swal.fire({ icon: 'error', title: 'Error', text: 'Error al registrar salida.' });
                        }
                    } catch (error) {
                        console.error('Error al registrar salida:', error);
                        Swal.fire({ icon: 'error', title: 'Error', text: 'Error al registrar salida.' });
                    }
                } else {
                    // Guardar acción en caché
                    const transaction = db.transaction(['pendingActions'], 'readwrite');
                    const store = transaction.objectStore('pendingActions');
                    store.add({
                        id: `salida-${isVehiculo ? 'vehiculo' : 'colaborador'}-${entity.id}-${Date.now()}`,
                        type: isVehiculo ? 'pendingSalidaVehiculo' : 'pendingSalidaColaborador',
                        data: {
                            solicitudId,
                            entityId: entity.id,
                            fecha: new Date().toISOString(),
                            estado_actual: 'pendiente ingreso'
                        },
                        timestamp: new Date().toISOString()
                    });
                    Swal.fire({ icon: 'info', title: 'Sin conexión', text: `Salida de ${isVehiculo ? 'vehículo' : 'colaborador'} guardada para sincronizar.` });
                }
            };
        }
    </script>
</body>
</html>