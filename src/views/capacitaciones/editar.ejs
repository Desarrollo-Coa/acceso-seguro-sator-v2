<%- include('../partials/header') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-10">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <h2 class="text-2xl font-bold mb-6">Editar Capacitación</h2>
                    
                    <form id="capacitacionForm" class="space-y-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Nombre de la Capacitación</label>
                            <input type="text" name="nombre" id="nombre" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Vigencia (meses)</label>
                            <input type="number" name="vigencia_meses" id="vigencia_meses" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Puntos por Pregunta</label>
                            <input type="number" name="puntos_por_pregunta" id="puntos_por_pregunta" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Puntaje Mínimo Aprobación</label>
                            <input type="number" name="puntaje_minimo_aprobacion" id="puntaje_minimo_aprobacion" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        </div>

                        <div id="preguntas" class="space-y-6">
                            <!-- Las preguntas se cargarán aquí dinámicamente -->
                        </div>

                        <button type="button" onclick="agregarPregunta()" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Agregar Pregunta
                        </button>

                        <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                            Guardar Cambios
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
let preguntaCount = 0;
const capacitacionId = window.location.pathname.split('/').pop();

function agregarPregunta(preguntaExistente = null) {
    const preguntasDiv = document.getElementById('preguntas');
    const nuevaPregunta = document.createElement('div');
    nuevaPregunta.className = 'pregunta border p-4 rounded-lg';
    
    // Determinar el número inicial de opciones
    const opcionesIniciales = preguntaExistente ? preguntaExistente.opciones.length : 2;
    
    nuevaPregunta.innerHTML = `
        <div class="space-y-4">
            <div class="flex justify-between items-center">
                <label class="block text-sm font-medium text-gray-700">Pregunta ${preguntaCount + 1}</label>
                <button type="button" onclick="eliminarPregunta(this)" class="text-red-600 hover:text-red-800">
                    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div>
                <input type="text" name="preguntas[${preguntaCount}][texto]" required 
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" 
                    value="${preguntaExistente ? preguntaExistente.texto : ''}">
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700">Imagen o Video</label>
                ${preguntaExistente && preguntaExistente.multimedia ? `
                    <div class="mt-2 mb-4">
                        ${preguntaExistente.multimedia.toLowerCase().match(/\.(jpg|jpeg|png|gif)$/) ? 
                            `<img src="${preguntaExistente.multimedia}" alt="Multimedia actual" class="max-w-xs h-auto">` :
                            `<video src="${preguntaExistente.multimedia}" controls class="max-w-xs h-auto">Tu navegador no soporta el elemento de video.</video>`
                        }
                        <input type="hidden" name="preguntas[${preguntaCount}][multimedia_actual]" value="${preguntaExistente.multimedia}">
                    </div>
                ` : ''}
                <input type="file" 
                       name="preguntas[${preguntaCount}][multimedia]" 
                       accept="image/*,video/*" 
                       class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100">
                <p class="mt-1 text-sm text-gray-500">Formatos permitidos: imágenes (jpg, png, gif) y videos (mp4, webm)</p>
            </div>

            <div class="opciones space-y-2" data-pregunta-index="${preguntaCount}">
                ${Array(opcionesIniciales).fill().map((_, i) => `
                    <div class="flex items-center gap-2 opcion-container">
                        <input type="radio" name="preguntas[${preguntaCount}][respuesta_correcta]" value="${i}" required 
                            class="mr-2" ${preguntaExistente && preguntaExistente.respuesta_correcta == i ? 'checked' : ''}>
                        <input type="text" name="preguntas[${preguntaCount}][opciones][]" 
                            placeholder="Opción ${i+1}" required 
                            class="inline-block w-64 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" 
                            value="${preguntaExistente && preguntaExistente.opciones[i] ? preguntaExistente.opciones[i] : ''}">
                        <button type="button" onclick="eliminarOpcion(this)" class="text-red-600 hover:text-red-800 ${opcionesIniciales <= 2 ? 'hidden' : ''}">
                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                        </button>
                    </div>
                `).join('')}
            </div>
            <button type="button" onclick="agregarOpcion(${preguntaCount})" 
                class="mt-2 inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                + Agregar Opción
            </button>
        </div>
    `;
    preguntasDiv.appendChild(nuevaPregunta);
    preguntaCount++;
}

function agregarOpcion(preguntaIndex) {
    const opcionesDiv = document.querySelector(`[data-pregunta-index="${preguntaIndex}"]`);
    const numOpciones = opcionesDiv.querySelectorAll('.opcion-container').length;
    
    const nuevaOpcion = document.createElement('div');
    nuevaOpcion.className = 'flex items-center gap-2 opcion-container';
    nuevaOpcion.innerHTML = `
        <input type="radio" name="preguntas[${preguntaIndex}][respuesta_correcta]" value="${numOpciones}" required class="mr-2">
        <input type="text" name="preguntas[${preguntaIndex}][opciones][]" 
            placeholder="Opción ${numOpciones + 1}" required 
            class="inline-block w-64 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
        <button type="button" onclick="eliminarOpcion(this)" class="text-red-600 hover:text-red-800">
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
        </button>
    `;
    opcionesDiv.appendChild(nuevaOpcion);
    
    // Mostrar todos los botones de eliminar si hay más de 2 opciones
    if (numOpciones + 1 > 2) {
        opcionesDiv.querySelectorAll('.opcion-container button').forEach(btn => btn.classList.remove('hidden'));
    }
}

function eliminarOpcion(button) {
    const opcionesDiv = button.closest('.opciones');
    const opcionContainer = button.closest('.opcion-container');
    const numOpciones = opcionesDiv.querySelectorAll('.opcion-container').length;
    
    if (numOpciones > 2) {
        opcionContainer.remove();
        // Actualizar los valores y placeholders de las opciones restantes
        opcionesDiv.querySelectorAll('.opcion-container').forEach((container, index) => {
            const radio = container.querySelector('input[type="radio"]');
            const input = container.querySelector('input[type="text"]');
            radio.value = index;
            input.placeholder = `Opción ${index + 1}`;
        });
        
        // Ocultar botones de eliminar si solo quedan 2 opciones
        if (numOpciones - 1 <= 2) {
            opcionesDiv.querySelectorAll('.opcion-container button').forEach(btn => btn.classList.add('hidden'));
        }
    }
}

async function eliminarPregunta(button) {
    const pregunta = button.closest('.pregunta');
    const multimediaActual = pregunta.querySelector('input[name$="[multimedia_actual]"]');
    
    let mensaje = "Se eliminará la pregunta permanentemente";
    if (multimediaActual && multimediaActual.value) {
        mensaje = "Se eliminará la pregunta y su archivo multimedia cuando guardes los cambios";
    }

    const result = await Swal.fire({
        title: '¿Estás seguro?',
        text: mensaje,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
    });

    if (!result.isConfirmed) {
        return;
    }

    // Si hay multimedia, la marcamos para eliminación posterior
    if (multimediaActual && multimediaActual.value) {
        // Crear un input hidden para trackear los archivos a eliminar
        const inputEliminar = document.createElement('input');
        inputEliminar.type = 'hidden';
        inputEliminar.name = 'archivos_a_eliminar[]';
        inputEliminar.value = multimediaActual.value;
        document.getElementById('capacitacionForm').appendChild(inputEliminar);
    }

    pregunta.remove();
    actualizarNumeracionPreguntas();
}

function actualizarNumeracionPreguntas() {
    const preguntas = document.querySelectorAll('.pregunta');
    preguntas.forEach((pregunta, index) => {
        const label = pregunta.querySelector('label');
        label.textContent = `Pregunta ${index + 1}`;
    });
    preguntaCount = preguntas.length;
}

// Cargar datos de la capacitación
async function cargarCapacitacion() {
    try {
        const response = await fetch(`/capacitacion/obtener/${capacitacionId}`);
        const capacitacion = await response.json();

        // Llenar campos básicos
        document.getElementById('nombre').value = capacitacion.nombre;
        document.getElementById('vigencia_meses').value = capacitacion.vigencia_meses;
        document.getElementById('puntos_por_pregunta').value = capacitacion.puntos_por_pregunta;
        document.getElementById('puntaje_minimo_aprobacion').value = capacitacion.puntaje_minimo_aprobacion;

        // Cargar preguntas existentes
        const preguntasDiv = document.getElementById('preguntas');
        preguntasDiv.innerHTML = ''; // Limpiar preguntas existentes
        
        if (Array.isArray(capacitacion.preguntas)) {
            capacitacion.preguntas.forEach(pregunta => {
                agregarPregunta(pregunta);
            });
        }
    } catch (error) {
        console.error('Error al cargar la capacitación:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error al cargar la capacitación',
            confirmButtonColor: '#4F46E5'
        });
    }
}

document.getElementById('capacitacionForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    const preguntas = [];
    const archivosAEliminar = Array.from(formData.getAll('archivos_a_eliminar[]'));

    // Mostrar indicador de carga
    Swal.fire({
        title: 'Actualizando capacitación...',
        text: 'Esto puede tomar unos momentos si hay archivos multimedia',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    // Eliminar archivos marcados para eliminación
    for (const url of archivosAEliminar) {
        try {
            await fetch('/capacitacion/eliminar-multimedia', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ url })
            });
        } catch (error) {
            console.error('Error al eliminar archivo:', error);
        }
    }

    // Procesar cada pregunta existente
    const preguntaDivs = document.querySelectorAll('.pregunta');
    for (let i = 0; i < preguntaDivs.length; i++) {
        const preguntaDiv = preguntaDivs[i];
        const pregunta = {
            texto: formData.get(`preguntas[${i}][texto]`),
            opciones: [],
            respuesta_correcta: parseInt(formData.get(`preguntas[${i}][respuesta_correcta]`)),
            multimedia: formData.get(`preguntas[${i}][multimedia_actual]`) || null
        };

        // Obtener todas las opciones de la pregunta
        const opcionesInputs = preguntaDiv.querySelectorAll('input[name^="preguntas['+i+'][opciones]"]');
        opcionesInputs.forEach(input => {
            pregunta.opciones.push(input.value);
        });

        // Procesar archivo multimedia nuevo si existe
        const multimediaFile = formData.get(`preguntas[${i}][multimedia]`);
        if(multimediaFile && multimediaFile.size > 0) {
            const formDataMultimedia = new FormData();
            formDataMultimedia.append('file', multimediaFile);
            
            try {
                const response = await fetch('/capacitacion/upload', {
                    method: 'POST',
                    body: formDataMultimedia
                });
                
                if (!response.ok) {
                    throw new Error('Error al subir el archivo multimedia');
                }
                
                const data = await response.json();
                pregunta.multimedia = data.url;
            } catch (error) {
                console.error('Error al subir archivo multimedia:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: `Error al subir archivo multimedia de la pregunta ${i + 1}`,
                });
                return;
            }
        }

        preguntas.push(pregunta);
    }

    // Crear objeto con todos los datos
    const capacitacionData = {
        nombre: formData.get('nombre'),
        vigencia_meses: parseInt(formData.get('vigencia_meses')),
        puntos_por_pregunta: parseInt(formData.get('puntos_por_pregunta')),
        puntaje_minimo_aprobacion: parseInt(formData.get('puntaje_minimo_aprobacion')),
        puntaje_maximo: preguntas.length * parseInt(formData.get('puntos_por_pregunta')),
        preguntas: preguntas
    };

    try {
        const response = await fetch(`/capacitacion/editar/${capacitacionId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(capacitacionData)
        });

        const result = await response.json();
        if(result.message) {
            await Swal.fire({
                icon: 'success',
                title: '¡Capacitación actualizada exitosamente!',
                confirmButtonColor: '#4F46E5'
            });
            window.location.href = '/capacitacion/listado';
        }
    } catch (error) {
        console.error('Error al actualizar la capacitación:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error al actualizar la capacitación',
            confirmButtonColor: '#4F46E5'
        });
    }
});

// Cargar datos al iniciar
cargarCapacitacion();
</script>

<%- include('../partials/footer') %> 