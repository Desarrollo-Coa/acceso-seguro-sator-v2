<%- include('../partials/header') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-10">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <h2 class="text-2xl font-bold mb-6">Crear Capacitación</h2>
                    
                    <form id="capacitacionForm" class="space-y-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Nombre de la Capacitación</label>
                            <input type="text" name="nombre" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Vigencia (meses)</label>
                            <input type="number" name="vigencia_meses" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Puntos por Pregunta</label>
                            <input type="number" name="puntos_por_pregunta" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Puntaje Mínimo Aprobación</label>
                            <input type="number" name="puntaje_minimo_aprobacion" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        </div>

                        <div id="preguntas" class="space-y-6">
                            <!-- Las preguntas se agregarán aquí dinámicamente -->
                        </div>

                        <button type="button" onclick="agregarPregunta()" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Agregar Pregunta
                        </button>

                        <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                            Guardar Capacitación
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
let preguntaCount = 0;

function agregarPregunta() {
    const preguntasContainer = document.getElementById('preguntasContainer');
    const preguntaIndex = preguntasContainer.children.length;
    
    const preguntaDiv = document.createElement('div');
    preguntaDiv.className = 'pregunta bg-white p-6 rounded-lg shadow mb-6';
    preguntaDiv.innerHTML = `
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-gray-900">Pregunta ${preguntaIndex + 1}</h3>
                <button type="button" onclick="eliminarPregunta(this)" class="text-red-600 hover:text-red-800">
                Eliminar
                </button>
            </div>
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">Texto de la pregunta</label>
            <textarea name="preguntas[${preguntaIndex}][texto]" required
                      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"></textarea>
            </div>
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">Multimedia (opcional)</label>
            <div class="flex items-center space-x-2">
                <input type="file" 
                       name="preguntas[${preguntaIndex}][multimedia]" 
                       accept="image/*,video/*" 
                       onchange="handleFileUpload(this)"
                       class="mt-1 block w-full">
                <button type="button" 
                        onclick="eliminarMultimedia(this)" 
                        class="hidden eliminar-multimedia-btn px-3 py-1 text-sm text-red-600 hover:text-red-800">
                    Eliminar
                </button>
            </div>
            <div class="multimedia-preview mt-2"></div>
            <p class="mt-1 text-sm text-gray-500">
                Para imágenes: se convertirán automáticamente a formato web. Para videos: máximo 150MB.
            </p>
                </div>
        <div class="opciones-container space-y-2">
            <div class="flex items-center space-x-2">
                <input type="radio" name="preguntas[${preguntaIndex}][respuesta_correcta]" value="0" required
                       class="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300">
                <input type="text" name="preguntas[${preguntaIndex}][opciones][]" required
                       placeholder="Opción 1"
                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            </div>
        </div>
        <button type="button" onclick="agregarOpcion(this)" 
                class="mt-2 inline-flex items-center px-3 py-1 border border-transparent text-sm leading-4 font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Agregar opción
        </button>
    `;
    
    preguntasContainer.appendChild(preguntaDiv);
}

async function handleFileUpload(input) {
    const file = input.files[0];
    if (!file) return;

    // Verificar si es un video
    if (file.type.startsWith('video/')) {
        if (file.size > 150 * 1024 * 1024) { // 150MB en bytes
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'El video no puede ser mayor a 150MB'
            });
            input.value = '';
            return;
        }
    }

    // Si es una imagen, convertirla a formato web
    if (file.type.startsWith('image/')) {
        try {
            const webImage = await convertToWebImage(file);
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(webImage);
            input.files = dataTransfer.files;
        } catch (error) {
            console.error('Error al convertir imagen:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Error al procesar la imagen'
            });
            input.value = '';
            return;
        }
    }

    // Obtener el archivo anterior si existe
    const preguntaDiv = input.closest('.pregunta');
    const archivoAnterior = preguntaDiv.querySelector('input[name$="[multimedia_url]"]')?.value;

    // Crear FormData y agregar archivo y archivo anterior
    const formData = new FormData();
    formData.append('file', input.files[0]);
    if (archivoAnterior) {
        formData.append('archivoAnterior', archivoAnterior);
    }

    try {
        const response = await fetch('/capacitacion/upload', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error('Error al subir el archivo');
        }

        const data = await response.json();
        
        // Actualizar el campo oculto con la nueva URL
        if (!preguntaDiv.querySelector('input[name$="[multimedia_url]"]')) {
            const inputUrl = document.createElement('input');
            inputUrl.type = 'hidden';
            inputUrl.name = input.name.replace('multimedia', 'multimedia_url');
            preguntaDiv.appendChild(inputUrl);
        }
        preguntaDiv.querySelector('input[name$="[multimedia_url]"]').value = data.url;

        // Mostrar vista previa y botón de eliminar
        const previewDiv = preguntaDiv.querySelector('.multimedia-preview');
        const eliminarBtn = preguntaDiv.querySelector('.eliminar-multimedia-btn');
        
        if (file.type.startsWith('image/')) {
            previewDiv.innerHTML = `
                <img src="${data.url}" alt="Vista previa" class="max-w-xs rounded-lg shadow-md">
            `;
        } else if (file.type.startsWith('video/')) {
            previewDiv.innerHTML = `
                <video src="${data.url}" controls class="max-w-xs rounded-lg shadow-md"></video>
            `;
        }
        
        eliminarBtn.classList.remove('hidden');

    } catch (error) {
        console.error('Error al subir archivo:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error al subir el archivo'
        });
        input.value = '';
    }
}

async function convertToWebImage(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = function(e) {
            const img = new Image();
            img.onload = function() {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                // Mantener la proporción de aspecto
                let width = img.width;
                let height = img.height;
                
                // Redimensionar si es muy grande
                const MAX_SIZE = 1920;
                if (width > MAX_SIZE || height > MAX_SIZE) {
                    if (width > height) {
                        height = (height * MAX_SIZE) / width;
                        width = MAX_SIZE;
                    } else {
                        width = (width * MAX_SIZE) / height;
                        height = MAX_SIZE;
                    }
                }
                
                canvas.width = width;
                canvas.height = height;
                
                // Dibujar imagen con fondo blanco
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, width, height);
                ctx.drawImage(img, 0, 0, width, height);
                
                // Convertir a WebP
                canvas.toBlob((blob) => {
                    const webImage = new File([blob], file.name.replace(/\.[^/.]+$/, '.webp'), {
                        type: 'image/webp'
                    });
                    resolve(webImage);
                }, 'image/webp', 0.8);
            };
            img.onerror = reject;
            img.src = e.target.result;
        };
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}

function agregarOpcion(button) {
    const preguntaDiv = button.closest('.pregunta');
    const opcionesContainer = preguntaDiv.querySelector('.opciones-container');
    const numOpciones = opcionesContainer.children.length;
    
    const nuevaOpcion = document.createElement('div');
    nuevaOpcion.className = 'flex items-center space-x-2 opcion-container';
    nuevaOpcion.innerHTML = `
        <input type="radio" name="preguntas[${numOpciones}][respuesta_correcta]" value="${numOpciones}" required class="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300">
        <input type="text" name="preguntas[${numOpciones}][opciones][]" required
               placeholder="Opción ${numOpciones + 1}"
               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
        <button type="button" onclick="eliminarOpcion(this)" class="text-red-600 hover:text-red-800">
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
        </button>
    `;
    opcionesContainer.appendChild(nuevaOpcion);
}

function eliminarOpcion(button) {
    const opcionContainer = button.closest('.opcion-container');
        opcionContainer.remove();
}

function eliminarPregunta(button) {
    const pregunta = button.closest('.pregunta');
    pregunta.remove();
    actualizarNumeracionPreguntas();
}

function actualizarNumeracionPreguntas() {
    const preguntas = document.querySelectorAll('.pregunta');
    preguntas.forEach((pregunta, index) => {
        const label = pregunta.querySelector('h3');
        label.textContent = `Pregunta ${index + 1}`;
    });
    preguntaCount = preguntas.length;
}

async function eliminarMultimedia(button) {
    const preguntaDiv = button.closest('.pregunta');
    const inputFile = preguntaDiv.querySelector('input[type="file"]');
    const inputUrl = preguntaDiv.querySelector('input[name$="[multimedia_url]"]');
    const previewDiv = preguntaDiv.querySelector('.multimedia-preview');
    
    if (inputUrl && inputUrl.value) {
        try {
            const response = await fetch('/capacitacion/eliminar-multimedia', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ url: inputUrl.value })
            });

            if (!response.ok) {
                throw new Error('Error al eliminar el archivo');
            }

            // Limpiar el input de archivo
            inputFile.value = '';
            
            // Limpiar la URL del archivo
            inputUrl.value = '';
            
            // Limpiar la vista previa
            previewDiv.innerHTML = '';
            
            // Ocultar el botón de eliminar
            button.classList.add('hidden');

            await Swal.fire({
                icon: 'success',
                title: 'Archivo eliminado',
                text: 'El archivo multimedia ha sido eliminado correctamente'
            });
        } catch (error) {
            console.error('Error al eliminar archivo:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'No se pudo eliminar el archivo multimedia'
            });
        }
    } else {
        // Si no hay URL, solo limpiar los campos
        inputFile.value = '';
        previewDiv.innerHTML = '';
        button.classList.add('hidden');
    }
}

document.getElementById('capacitacionForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    const preguntas = [];

    // Mostrar indicador de carga
    Swal.fire({
        title: 'Guardando capacitación...',
        text: 'Esto puede tomar unos momentos si hay archivos multimedia',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    // Procesar cada pregunta
    const preguntaDivs = document.querySelectorAll('.pregunta');
    for (let i = 0; i < preguntaDivs.length; i++) {
        const preguntaDiv = preguntaDivs[i];
        const pregunta = {
            texto: formData.get(`preguntas[${i}][texto]`),
            opciones: [],
            respuesta_correcta: parseInt(formData.get(`preguntas[${i}][respuesta_correcta]`)),
            multimedia: null
        };

        // Obtener todas las opciones de la pregunta
        const opcionesInputs = preguntaDiv.querySelectorAll('input[name^="preguntas['+i+'][opciones]"]');
        opcionesInputs.forEach(input => {
            pregunta.opciones.push(input.value);
        });

        // Procesar archivo multimedia
        const multimediaFile = formData.get(`preguntas[${i}][multimedia]`);
        if(multimediaFile && multimediaFile.size > 0) {
            const formDataMultimedia = new FormData();
            formDataMultimedia.append('file', multimediaFile);
            
            try {
                const response = await fetch('/capacitacion/upload', {
                    method: 'POST',
                    body: formDataMultimedia
                });
                
                if (!response.ok) {
                    throw new Error('Error al subir el archivo multimedia');
                }
                
                const data = await response.json();
                pregunta.multimedia = data.url;
            } catch (error) {
                console.error('Error al subir archivo multimedia:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: `Error al subir archivo multimedia de la pregunta ${i + 1}`,
                });
                return;
            }
        }

        preguntas.push(pregunta);
    }

    // Validar que haya al menos una pregunta
    if (preguntas.length === 0) {
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Debe agregar al menos una pregunta',
        });
        return;
    }

    // Crear objeto con todos los datos
    const capacitacionData = {
        nombre: formData.get('nombre'),
        vigencia_meses: parseInt(formData.get('vigencia_meses')),
        puntos_por_pregunta: parseInt(formData.get('puntos_por_pregunta')),
        puntaje_minimo_aprobacion: parseInt(formData.get('puntaje_minimo_aprobacion')),
        puntaje_maximo: preguntas.length * parseInt(formData.get('puntos_por_pregunta')),
        preguntas: preguntas
    };

    try {
        const response = await fetch('/capacitacion/crear', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(capacitacionData)
        });

        const result = await response.json();
        if(result.message) {
            // Mostrar el código de seguridad y la URL
            await Swal.fire({
                icon: 'success',
                title: '¡Capacitación creada exitosamente!',
                html: `
                    <div class="text-left">
                        <p class="mb-2"><strong>Código de seguridad:</strong> ${result.codigo_seguridad}</p>
                        <p class="mb-4"><strong>URL de acceso:</strong> ${result.url_acceso}</p>
                        <p class="text-sm text-gray-600">Comparte esta información con los colaboradores que necesiten realizar la capacitación.</p>
                    </div>
                `,
                confirmButtonColor: '#4F46E5'
            });
            window.location.href = '/capacitacion/listado';
        }
    } catch (error) {
        console.error('Error al guardar la capacitación:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error al guardar la capacitación',
            confirmButtonColor: '#4F46E5'
        });
    }
});
</script>

<%- include('../partials/footer') %> 